[
  uuid(2DF8D04C-5BFA-101B-BDE5-00AA0044DE52),
  version(1.0),
  helpstring("UniOffice 1.0 Object Library"),
]
library Office
{
    importlib("stdole2.tlb");

    typedef long single;

/////////////////////////////////////////////////
// Develop part

typedef IDispatch Chart;
typedef IDispatch DialogSheet;
typedef IDispatch MenuBar;
typedef IDispatch Window;
typedef IDispatch AddIns;
typedef IDispatch Assistant;
typedef IDispatch CommandBars;
typedef IDispatch MenuBars;
typedef IDispatch Modules;
typedef IDispatch Menu;
typedef IDispatch Toolbars;
typedef IDispatch Windows;
typedef IDispatch WorksheetFunction;
typedef IDispatch AutoCorrect;
typedef IDispatch Dialogs;
typedef IDispatch FileSearch;
typedef IDispatch IFind;
typedef IDispatch RecentFiles;
typedef IDispatch ODBCErrors;
typedef IDispatch OLEDBErrors;
typedef IDispatch COMAddIns;
typedef IDispatch DefaultWebOptions;
typedef IDispatch LanguageSettings;
typedef IDispatch PivotTable;
typedef IDispatch AnswerWizard;
typedef IDispatch CellFormat;
typedef IDispatch UsedObjects;
typedef IDispatch Watches;
typedef IDispatch FileDialog;
typedef IDispatch AutoRecover;
typedef IDispatch ErrorCheckingOptions;
typedef IDispatch SmartTagRecognizers;
typedef IDispatch NewFile;
typedef IDispatch SpellingOptions;
typedef IDispatch Speech;
typedef IDispatch RTD;
typedef IDispatch IAssistance;
typedef IDispatch MultiThreadedCalculation;
typedef IDispatch HyperLink;
typedef IDispatch XmlMap;
typedef IDispatch Mailer;
typedef IDispatch RoutingSlip;
typedef IDispatch Styles;
typedef IDispatch CustomViews;
typedef IDispatch PublishObjects;
typedef IDispatch WebOptions;
typedef IDispatch HTMLProject;
typedef IDispatch SmartTagOptions;
typedef IDispatch Permission;
typedef IDispatch SharedWorkspace;
typedef IDispatch Sync;
typedef IDispatch XmlNamespaces;
typedef IDispatch XmlMaps;
typedef IDispatch SmartDocument;
typedef IDispatch DocumentLibraryVersions;
typedef IDispatch MetaProperties;
typedef IDispatch Connections;
typedef IDispatch SignatureSet;
typedef IDispatch ServerPolicy;
typedef IDispatch DocumentInspectors;
typedef IDispatch WorkflowTasks;
typedef IDispatch WorkflowTemplates;
typedef IDispatch ServerViewableItems;
typedef IDispatch TableStyles;
typedef IDispatch CustomXMLParts;
typedef IDispatch Research;
typedef IDispatch OfficeTheme;
typedef IDispatch IconSets;
typedef IDispatch PivotCache;
typedef IDispatch HPageBreaks;
typedef IDispatch vPageBreaks;
typedef IDispatch Graphic;
typedef IDispatch Pages;
typedef IDispatch Page;
typedef IDispatch Areas;
typedef IDispatch Characters;
typedef IDispatch PivotField;
typedef IDispatch PivotItem;
typedef IDispatch QueryTable;
typedef IDispatch SoundNote;
typedef IDispatch Validation;
typedef IDispatch Comment;
typedef IDispatch Phonetic;
typedef IDispatch Phonetics;
typedef IDispatch FormatConditions;
typedef IDispatch HyperLinks;
typedef IDispatch PivotCell;
typedef IDispatch Errors;
typedef IDispatch SmartTags;
typedef IDispatch ListObject;
typedef IDispatch XPath;
typedef IDispatch Actions;
typedef IDispatch Shapes;
typedef IDispatch QueryTables;
typedef IDispatch Comments;
typedef IDispatch AutoFilter;
typedef IDispatch Scripts;
typedef IDispatch Tab;
typedef IDispatch MsoEnvelope;
typedef IDispatch CustomProperties;
typedef IDispatch Protection;
typedef IDispatch ListObjects;
typedef IDispatch Sort;






// Develop part
/////////////////////////////////////////////////


    /* Forward declaration of coclass  */
    coclass Application;
    coclass Workbook;
    coclass Worksheet;





    /* Forward declaration of interfaces */
    interface _Application;
    interface Workbooks;
    interface _Workbook;
    interface IWorkbookEvents;
    interface Sheets;
    interface INames;
    interface IName;
    interface IBorders;
    interface IBorder;
    interface IInterior;
    interface IOutline;
    interface IPageSetup;
    interface _IFont;
    interface IRange;
    interface _Worksheet; 
    interface IWorksheets;



    /* Forward declaration of dispinterfaces */
    dispinterface AppEvents;
    dispinterface WorkbookEvents;
    dispinterface PivotCaches;
    dispinterface Names;
    dispinterface Name;
    dispinterface Borders;
    dispinterface Border;
    dispinterface Interior;
    dispinterface Outline;
    dispinterface PageSetup;
    dispinterface Font;
    dispinterface Range;
    dispinterface DocEvents;
    dispinterface Worksheets;




    /* enums descritions */
    typedef enum {
        msoEncodingThai = 874,
        msoEncodingJapaneseShiftJIS = 932,
        msoEncodingSimplifiedChineseGBK = 936,
        msoEncodingKorean = 949,
        msoEncodingTraditionalChineseBig5 = 950,
        msoEncodingUnicodeLittleEndian = 1200,
        msoEncodingUnicodeBigEndian = 1201,
        msoEncodingCentralEuropean = 1250,
        msoEncodingCyrillic = 1251,
        msoEncodingWestern = 1252,
        msoEncodingGreek = 1253,
        msoEncodingTurkish = 1254,
        msoEncodingHebrew = 1255,
        msoEncodingArabic = 1256,
        msoEncodingBaltic = 1257,
        msoEncodingVietnamese = 1258,
        msoEncodingAutoDetect = 50001,
        msoEncodingJapaneseAutoDetect = 50932,
        msoEncodingSimplifiedChineseAutoDetect = 50936,
        msoEncodingKoreanAutoDetect = 50949,
        msoEncodingTraditionalChineseAutoDetect = 50950,
        msoEncodingCyrillicAutoDetect = 51251,
        msoEncodingGreekAutoDetect = 51253,
        msoEncodingArabicAutoDetect = 51256,
        msoEncodingISO88591Latin1 = 28591,
        msoEncodingISO88592CentralEurope = 28592,
        msoEncodingISO88593Latin3 = 28593,
        msoEncodingISO88594Baltic = 28594,
        msoEncodingISO88595Cyrillic = 28595,
        msoEncodingISO88596Arabic = 28596,
        msoEncodingISO88597Greek = 28597,
        msoEncodingISO88598Hebrew = 28598,
        msoEncodingISO88599Turkish = 28599,
        msoEncodingISO885915Latin9 = 28605,
        msoEncodingISO88598HebrewLogical = 38598,
        msoEncodingISO2022JPNoHalfwidthKatakana = 50220,
        msoEncodingISO2022JPJISX02021984 = 50221,
        msoEncodingISO2022JPJISX02011989 = 50222,
        msoEncodingISO2022KR = 50225,
        msoEncodingISO2022CNTraditionalChinese = 50227,
        msoEncodingISO2022CNSimplifiedChinese = 50229,
        msoEncodingMacRoman = 10000,
        msoEncodingMacJapanese = 10001,
        msoEncodingMacTraditionalChineseBig5 = 10002,
        msoEncodingMacKorean = 10003,
        msoEncodingMacArabic = 10004,
        msoEncodingMacHebrew = 10005,
        msoEncodingMacGreek1 = 10006,
        msoEncodingMacCyrillic = 10007,
        msoEncodingMacSimplifiedChineseGB2312 = 10008,
        msoEncodingMacRomania = 10010,
        msoEncodingMacUkraine = 10017,
        msoEncodingMacLatin2 = 10029,
        msoEncodingMacIcelandic = 10079,
        msoEncodingMacTurkish = 10081,
        msoEncodingMacCroatia = 10082,
        msoEncodingEBCDICUSCanada = 37,
        msoEncodingEBCDICInternational = 500,
        msoEncodingEBCDICMultilingualROECELatin2 = 870,
        msoEncodingEBCDICGreekModern = 875,
        msoEncodingEBCDICTurkishLatin5 = 1026,
        msoEncodingEBCDICGermany = 20273,
        msoEncodingEBCDICDenmarkNorway = 20277,
        msoEncodingEBCDICFinlandSweden = 20278,
        msoEncodingEBCDICItaly = 20280,
        msoEncodingEBCDICLatinAmericaSpain = 20284,
        msoEncodingEBCDICUnitedKingdom = 20285,
        msoEncodingEBCDICJapaneseKatakanaExtended = 20290,
        msoEncodingEBCDICFrance = 20297,
        msoEncodingEBCDICArabic = 20420,
        msoEncodingEBCDICGreek = 20423,
        msoEncodingEBCDICHebrew = 20424,
        msoEncodingEBCDICKoreanExtended = 20833,
        msoEncodingEBCDICThai = 20838,
        msoEncodingEBCDICIcelandic = 20871,
        msoEncodingEBCDICTurkish = 20905,
        msoEncodingEBCDICRussian = 20880,
        msoEncodingEBCDICSerbianBulgarian = 21025,
        msoEncodingEBCDICJapaneseKatakanaExtendedAndJapanese = 50930,
        msoEncodingEBCDICUSCanadaAndJapanese = 50931,
        msoEncodingEBCDICKoreanExtendedAndKorean = 50933,
        msoEncodingEBCDICSimplifiedChineseExtendedAndSimplifiedChinese = 50935,
        msoEncodingEBCDICUSCanadaAndTraditionalChinese = 50937,
        msoEncodingEBCDICJapaneseLatinExtendedAndJapanese = 50939,
        msoEncodingOEMUnitedStates = 437,
        msoEncodingOEMGreek437G = 737,
        msoEncodingOEMBaltic = 775,
        msoEncodingOEMMultilingualLatinI = 850,
        msoEncodingOEMMultilingualLatinII = 852,
        msoEncodingOEMCyrillic = 855,
        msoEncodingOEMTurkish = 857,
        msoEncodingOEMPortuguese = 860,
        msoEncodingOEMIcelandic = 861,
        msoEncodingOEMHebrew = 862,
        msoEncodingOEMCanadianFrench = 863,
        msoEncodingOEMArabic = 864,
        msoEncodingOEMNordic = 865,
        msoEncodingOEMCyrillicII = 866,
        msoEncodingOEMModernGreek = 869,
        msoEncodingEUCJapanese = 51932,
        msoEncodingEUCChineseSimplifiedChinese = 51936,
        msoEncodingEUCKorean = 51949,
        msoEncodingEUCTaiwaneseTraditionalChinese = 51950,
        msoEncodingISCIIDevanagari = 57002,
        msoEncodingISCIIBengali = 57003,
        msoEncodingISCIITamil = 57004,
        msoEncodingISCIITelugu = 57005,
        msoEncodingISCIIAssamese = 57006,
        msoEncodingISCIIOriya = 57007,
        msoEncodingISCIIKannada = 57008,
        msoEncodingISCIIMalayalam = 57009,
        msoEncodingISCIIGujarati = 57010,
        msoEncodingISCIIPunjabi = 57011,
        msoEncodingArabicASMO = 708,
        msoEncodingArabicTransparentASMO = 720,
        msoEncodingKoreanJohab = 1361,
        msoEncodingTaiwanCNS = 20000,
        msoEncodingTaiwanTCA = 20001,
        msoEncodingTaiwanEten = 20002,
        msoEncodingTaiwanIBM5550 = 20003,
        msoEncodingTaiwanTeleText = 20004,
        msoEncodingTaiwanWang = 20005,
        msoEncodingIA5IRV = 20105,
        msoEncodingIA5German = 20106,
        msoEncodingIA5Swedish = 20107,
        msoEncodingIA5Norwegian = 20108,
        msoEncodingUSASCII = 20127,
        msoEncodingT61 = 20261,
        msoEncodingISO6937NonSpacingAccent = 20269,
        msoEncodingKOI8R = 20866,
        msoEncodingExtAlphaLowercase = 21027,
        msoEncodingKOI8U = 21866,
        msoEncodingEuropa3 = 29001,
        msoEncodingHZGBSimplifiedChinese = 52936,
        msoEncodingSimplifiedChineseGB18030 = 54936,
        msoEncodingUTF7 = 65000,
        msoEncodingUTF8 = 65001
    } MsoEncoding;

    typedef enum {
        msoSyncEventDownloadInitiated = 0,
        msoSyncEventDownloadSucceeded = 1,
        msoSyncEventDownloadFailed = 2,
        msoSyncEventUploadInitiated = 3,
        msoSyncEventUploadSucceeded = 4,
        msoSyncEventUploadFailed = 5,
        msoSyncEventDownloadNoChange = 6,
        msoSyncEventOffline = 7
    } MsoSyncEventType;

    typedef enum {
        msoFeatureInstallNone = 0,
        msoFeatureInstallOnDemand = 1,
        msoFeatureInstallOnDemandWithUI = 2
    } MsoFeatureInstall;

    typedef enum {
        msoAutomationSecurityLow = 1,
        msoAutomationSecurityByUI = 2,
        msoAutomationSecurityForceDisable = 3
    } MsoAutomationSecurity;

    typedef enum {
        msoFileDialogOpen = 1,
        msoFileDialogSaveAs = 2,
        msoFileDialogFilePicker = 3,
        msoFileDialogFolderPicker = 4
    } MsoFileDialogType;

    typedef enum {
        xlXmlExportSuccess = 0,
        xlXmlExportValidationFailed = 1
    } XlXmlExportResult;

    typedef enum {
        xlXmlImportSuccess = 0,
        xlXmlImportElementsTruncated = 1,
        xlXmlImportValidationFailed = 2
    } XlXmlImportResult;

    typedef enum {
        xlGenerateTableRefA1 = 0,
        xlGenerateTableRefStruct = 1
    } XlGenerateTableRefs;

    typedef enum {
        xlDone = 0,
        xlCalculating = 1,
        xlPending = 2
    } XlCalculationState;

    typedef enum {
        xlNoKey = 0,
        xlEscKey = 1,
        xlAnyKey = 2
    } XlCalculationInterruptKey;

    typedef enum {
        xlCreatorCode = 0x5843454c
    } XlCreator;

    typedef enum {
        xlMicrosoftAccess = 4,
        xlMicrosoftFoxPro = 5,
        xlMicrosoftMail = 3,
        xlMicrosoftPowerPoint = 2,
        xlMicrosoftProject = 6,
        xlMicrosoftSchedulePlus = 7,
        xlMicrosoftWord = 1
    } XlMSApplication;

    typedef enum {
        xlCalculationAutomatic = 0xffffeff7,
        xlCalculationManual = 0xffffefd9,
        xlCalculationSemiautomatic = 2
    } XlCalculation;

    typedef enum {
        xlCommandUnderlinesAutomatic = 0xffffeff7,
        xlCommandUnderlinesOff = 0xffffefce,
        xlCommandUnderlinesOn = 1
    } XlCommandUnderlines;

    typedef enum {
        xlA1 = 1,
        xlR1C1 = 0xffffefca
    } XlReferenceStyle;

    typedef enum {
        xlIBeam = 3,
        xlDefault = 0xffffefd1,
        xlNorthwestArrow = 1,
        xlWait = 2
    } XlMousePointer;

    typedef enum {
        xlCopy = 1,
        xlCut = 2
    } XlCutCopyMode;

    typedef enum {
        xlNoIndicator = 0,
        xlCommentIndicatorOnly = 0xffffffff,
        xlCommentAndIndicator = 1
    } XlCommentDisplayMode;

    typedef enum {
        xlDisabled = 0,
        xlErrorHandler = 2,
        xlInterrupt = 1
    } XlEnableCancelKey;

    typedef enum {
        xlMAPI = 1,
        xlNoMailSystem = 0,
        xlPowerTalk = 2
    } XlMailSystem;

    typedef enum {
        xlDown = 0xffffefe7,
        xlToLeft = 0xffffefc1,
        xlToRight = 0xffffefbf,
        xlUp = 0xffffefbe
    } XlDirection;

    typedef enum {
        xlAddIn = 18,
        xlCSV = 6,
        xlCSVMac = 22,
        xlCSVMSDOS = 24,
        xlCSVWindows = 23,
        xlDBF2 = 7,
        xlDBF3 = 8,
        xlDBF4 = 11,
        xlDIF = 9,
        xlExcel2 = 16,
        xlExcel2FarEast = 27,
        xlExcel3 = 29,
        xlExcel4 = 33,
        xlExcel5 = 39,
        xlExcel7 = 39,
        xlExcel9795 = 43,
        xlExcel4Workbook = 35,
        xlIntlAddIn = 26,
        xlIntlMacro = 25,
        xlWorkbookNormal = 0xffffefd1,
        xlSYLK = 2,
        xlTemplate = 17,
        xlCurrentPlatformText = 0xffffefc2,
        xlTextMac = 19,
        xlTextMSDOS = 21,
        xlTextPrinter = 36,
        xlTextWindows = 20,
        xlWJ2WD1 = 14,
        xlWK1 = 5,
        xlWK1ALL = 31,
        xlWK1FMT = 30,
        xlWK3 = 15,
        xlWK4 = 38,
        xlWK3FM3 = 32,
        xlWKS = 4,
        xlWorks2FarEast = 28,
        xlWQ1 = 34,
        xlWJ3 = 40,
        xlWJ3FJ3 = 41,
        xlUnicodeText = 42,
        xlHtml = 44,
        xlWebArchive = 45,
        xlXMLSpreadsheet = 46,
        xlExcel12 = 50,
        xlOpenXMLWorkbook = 51,
        xlOpenXMLWorkbookMacroEnabled = 52,
        xlOpenXMLTemplateMacroEnabled = 53,
        xlTemplate8 = 17,
        xlOpenXMLTemplate = 54,
        xlAddIn8 = 18,
        xlOpenXMLAddIn = 55,
        xlExcel8 = 56,
        xlWorkbookDefault = 51
    } XlFileFormat;

    typedef enum {
        xlMaximized = 0xffffefd7,
        xlMinimized = 0xffffefd4,
        xlNormal = 0xffffefd1
    } XlWindowState;

    typedef enum {
        xlTextQualifierDoubleQuote = 1,
        xlTextQualifierNone = 0xffffefd2,
        xlTextQualifierSingleQuote = 2
    } XlTextQualifier;

    typedef enum {
        xlReadOnly = 3,
        xlReadWrite = 2
    } XlFileAccess;

    typedef enum {
        xlLinkTypeExcelLinks = 1,
        xlLinkTypeOLELinks = 2
    } XlLinkType;

    typedef enum {
        xlLocalSessionChanges = 2,
        xlOtherSessionChanges = 3,
        xlUserResolution = 1
    } XlSaveConflictResolution;

    typedef enum {
        xlDisplayShapes = 0xffffeff8,
        xlHide = 3,
        xlPlaceholders = 2
    } XlDisplayDrawingObjects;

    typedef enum {
        xlEditionDate = 2,
        xlUpdateState = 1,
        xlLinkInfoStatus = 3
    } XlLinkInfo;

    typedef enum {
        xlAutoActivate = 3,
        xlAutoClose = 2,
        xlAutoDeactivate = 4,
        xlAutoOpen = 1
    } XlRunAutoMacro;

    typedef enum {
        xlExclusive = 3,
        xlNoChange = 1,
        xlShared = 2
    } XlSaveAsAccessMode;

    typedef enum {
        xlPriorityHigh = 0xffffefe1,
        xlPriorityLow = 0xffffefda,
        xlPriorityNormal = 0xffffefd1
    } XlPriority;

    typedef enum {
        xlUpdateLinksUserSetting = 1,
        xlUpdateLinksNever = 2,
        xlUpdateLinksAlways = 3
    } XlUpdateLinks;

    typedef enum {
        xlRDIComments = 1,
        xlRDIRemovePersonalInformation = 4,
        xlRDIEmailHeader = 5,
        xlRDIRoutingSlip = 6,
        xlRDISendForReview = 7,
        xlRDIDocumentProperties = 8,
        xlRDIDocumentWorkspace = 10,
        xlRDIInkAnnotations = 11,
        xlRDIScenarioComments = 12,
        xlRDIPublishInfo = 13,
        xlRDIDocumentServerProperties = 14,
        xlRDIDocumentManagementPolicy = 15,
        xlRDIContentType = 16,
        xlRDIDefinedNameComments = 18,
        xlRDIInactiveDataConnections = 19,
        xlRDIPrinterPath = 20,
        xlRDIAll = 99
    } XlRemoveDocInfoType;

    typedef enum {
        xlTypePDF = 0,
        xlTypeXPS = 1
    } XlFixedFormatType;

    typedef enum {
        xlScenario = 4,
        xlConsolidation = 3,
        xlDatabase = 1,
        xlExternal = 2,
        xlPivotTable = 0xffffefcc
    } XlPivotTableSourceType;

    typedef enum {
        xlFillWithAll = 0xffffeff8,
        xlFillWithContents = 2,
        xlFillWithFormats = 0xffffefe6
    } XlFillWith;

    typedef enum {
        xlCommand = 2,
        xlFunction = 1,
        xlNotXLM = 3
    } XlXLMMacroType;

    typedef enum {
        xlInsideHorizontal = 12,
        xlInsideVertical = 11,
        xlDiagonalDown = 5,
        xlDiagonalUp = 6,
        xlEdgeBottom = 9,
        xlEdgeLeft = 7,
        xlEdgeRight = 10,
        xlEdgeTop = 8
    } XlBordersIndex;

    typedef enum {
        xlSummaryAbove = 0,
        xlSummaryBelow = 1
    } XlSummaryRow;

    typedef enum {
        xlSummaryOnLeft = 0xffffefdd,
        xlSummaryOnRight = 0xffffefc8
    } XlSummaryColumn;

    typedef enum {
        xlFitToPage = 2,
        xlFullPage = 3,
        xlScreenSize = 1
    } XlObjectSize;

    typedef enum {
        xlDownThenOver = 1,
        xlOverThenDown = 2
    } XlOrder;

    typedef enum {
        xlLandscape = 2,
        xlPortrait = 1
    } XlPageOrientation;

    typedef enum {
        xlPaper10x14 = 16,
        xlPaper11x17 = 17,
        xlPaperA3 = 8,
        xlPaperA4 = 9,
        xlPaperA4Small = 10,
        xlPaperA5 = 11,
        xlPaperB4 = 12,
        xlPaperB5 = 13,
        xlPaperCsheet = 24,
        xlPaperDsheet = 25,
        xlPaperEnvelope10 = 20,
        xlPaperEnvelope11 = 21,
        xlPaperEnvelope12 = 22,
        xlPaperEnvelope14 = 23,
        xlPaperEnvelope9 = 19,
        xlPaperEnvelopeB4 = 33,
        xlPaperEnvelopeB5 = 34,
        xlPaperEnvelopeB6 = 35,
        xlPaperEnvelopeC3 = 29,
        xlPaperEnvelopeC4 = 30,
        xlPaperEnvelopeC5 = 28,
        xlPaperEnvelopeC6 = 31,
        xlPaperEnvelopeC65 = 32,
        xlPaperEnvelopeDL = 27,
        xlPaperEnvelopeItaly = 36,
        xlPaperEnvelopeMonarch = 37,
        xlPaperEnvelopePersonal = 38,
        xlPaperEsheet = 26,
        xlPaperExecutive = 7,
        xlPaperFanfoldLegalGerman = 41,
        xlPaperFanfoldStdGerman = 40,
        xlPaperFanfoldUS = 39,
        xlPaperFolio = 14,
        xlPaperLedger = 4,
        xlPaperLegal = 5,
        xlPaperLetter = 1,
        xlPaperLetterSmall = 2,
        xlPaperNote = 18,
        xlPaperQuarto = 15,
        xlPaperStatement = 6,
        xlPaperTabloid = 3,
        xlPaperUser = 256
    } XlPaperSize;

    typedef enum {
        xlPrintSheetEnd = 1,
        xlPrintInPlace = 16,
        xlPrintNoComments = 0xffffefd2
    } XlPrintLocation;

    typedef enum {
        xlPrintErrorsDisplayed = 0,
        xlPrintErrorsBlank = 1,
        xlPrintErrorsDash = 2,
        xlPrintErrorsNA = 3
    } XlPrintErrors;

    typedef enum {
        xlThemeFontNone = 0,
        xlThemeFontMajor = 1,
        xlThemeFontMinor = 2
    } XlThemeFont;

    typedef enum {
        xlFilterCopy = 2,
        xlFilterInPlace = 1
    } XlFilterAction;

    typedef enum {
        xlColumnThenRow = 2,
        xlRowThenColumn = 1
    } XlApplyNamesOrder;

    typedef enum {
        xlFillCopy = 1,
        xlFillDays = 5,
        xlFillDefault = 0,
        xlFillFormats = 3,
        xlFillMonths = 7,
        xlFillSeries = 2,
        xlFillValues = 4,
        xlFillWeekdays = 6,
        xlFillYears = 8,
        xlGrowthTrend = 10,
        xlLinearTrend = 9
    } XlAutoFillType;

    typedef enum {
        xlAnd = 1,
        xlBottom10Items = 4,
        xlBottom10Percent = 6,
        xlOr = 2,
        xlTop10Items = 3,
        xlTop10Percent = 5,
        xlFilterValues = 7,
        xlFilterCellColor = 8,
        xlFilterFontColor = 9,
        xlFilterIcon = 10,
        xlFilterDynamic = 11,
        xlFilterNoFill = 12,
        xlFilterAutomaticFontColor = 13,
        xlFilterNoIcon = 14
    } XlAutoFilterOperator;

    typedef enum {
        xlRangeAutoFormat3DEffects1 = 13,
        xlRangeAutoFormat3DEffects2 = 14,
        xlRangeAutoFormatAccounting1 = 4,
        xlRangeAutoFormatAccounting2 = 5,
        xlRangeAutoFormatAccounting3 = 6,
        xlRangeAutoFormatAccounting4 = 17,
        xlRangeAutoFormatClassic1 = 1,
        xlRangeAutoFormatClassic2 = 2,
        xlRangeAutoFormatClassic3 = 3,
        xlRangeAutoFormatColor1 = 7,
        xlRangeAutoFormatColor2 = 8,
        xlRangeAutoFormatColor3 = 9,
        xlRangeAutoFormatList1 = 10,
        xlRangeAutoFormatList2 = 11,
        xlRangeAutoFormatList3 = 12,
        xlRangeAutoFormatLocalFormat1 = 15,
        xlRangeAutoFormatLocalFormat2 = 16,
        xlRangeAutoFormatLocalFormat3 = 19,
        xlRangeAutoFormatLocalFormat4 = 20,
        xlRangeAutoFormatReport1 = 21,
        xlRangeAutoFormatReport2 = 22,
        xlRangeAutoFormatReport3 = 23,
        xlRangeAutoFormatReport4 = 24,
        xlRangeAutoFormatReport5 = 25,
        xlRangeAutoFormatReport6 = 26,
        xlRangeAutoFormatReport7 = 27,
        xlRangeAutoFormatReport8 = 28,
        xlRangeAutoFormatReport9 = 29,
        xlRangeAutoFormatReport10 = 30,
        xlRangeAutoFormatClassicPivotTable = 31,
        xlRangeAutoFormatTable1 = 32,
        xlRangeAutoFormatTable2 = 33,
        xlRangeAutoFormatTable3 = 34,
        xlRangeAutoFormatTable4 = 35,
        xlRangeAutoFormatTable5 = 36,
        xlRangeAutoFormatTable6 = 37,
        xlRangeAutoFormatTable7 = 38,
        xlRangeAutoFormatTable8 = 39,
        xlRangeAutoFormatTable9 = 40,
        xlRangeAutoFormatTable10 = 41,
        xlRangeAutoFormatPTNone = 42,
        xlRangeAutoFormatNone = 0xffffefd2,
        xlRangeAutoFormatSimple = 0xffffefc6
    } XlRangeAutoFormat;

    typedef enum {
        xlHairline = 1,
        xlMedium = 0xffffefd6,
        xlThick = 4,
        xlThin = 2
    } XlBorderWeight;

    typedef [uuid(F6BA0ED9-B530-466E-83D5-325653CC1068)]
    enum {
        xlColorIndexAutomatic = 0xffffeff7,
        xlColorIndexNone = 0xffffefd2
    } XlColorIndex;

    typedef enum {
        xlPrinter = 2,
        xlScreen = 1
    } XlPictureAppearance;

    typedef enum {
        xlBitmap = 2,
        xlPicture = 0xffffefcd
    } XlCopyPictureFormat;

    typedef enum {
        xlAutoFill = 4,
        xlChronological = 3,
        xlGrowth = 2,
        xlDataSeriesLinear = 0xffffefdc
    } XlDataSeriesType;

    typedef enum {
        xlDay = 1,
        xlMonth = 3,
        xlWeekday = 2,
        xlYear = 4
    } XlDataSeriesDate;

    typedef enum {
        xlPublisher = 1,
        xlSubscriber = 2
    } XlEditionType;

    typedef enum {
        xlAutomaticUpdate = 4,
        xlCancel = 1,
        xlChangeAttributes = 6,
        xlManualUpdate = 5,
        xlOpenSource = 3,
        xlSelect = 3,
        xlSendPublisher = 2,
        xlUpdateSubscriber = 2
    } XlEditionOptionsOption;

    typedef enum {
        xlNext = 1,
        xlPrevious = 2
    } XlSearchDirection;

    typedef enum {
        xlNoLabels = 0xffffefd2,
        xlRowLabels = 1,
        xlColumnLabels = 2,
        xlMixedLabels = 3
    } XlFormulaLabel;

    typedef enum {
        xlColumnHeader = 0xffffeff2,
        xlColumnItem = 5,
        xlDataHeader = 3,
        xlDataItem = 7,
        xlPageHeader = 2,
        xlPageItem = 6,
        xlRowHeader = 0xffffefc7,
        xlRowItem = 4,
        xlTableBody = 8
    } XlLocationInTable;

    typedef enum {
        xlPasteAll = 0xffffeff8,
        xlPasteAllUsingSourceTheme = 13,
        xlPasteAllExceptBorders = 7,
        xlPasteFormats = 0xffffefe6,
        xlPasteFormulas = 0xffffefe5,
        xlPasteComments = 0xffffefd0,
        xlPasteValues = 0xffffefbd,
        xlPasteColumnWidths = 8,
        xlPasteValidation = 6,
        xlPasteFormulasAndNumberFormats = 11,
        xlPasteValuesAndNumberFormats = 12
    } XlPasteType;

    typedef enum {
        xlPasteSpecialOperationAdd = 2,
        xlPasteSpecialOperationDivide = 5,
        xlPasteSpecialOperationMultiply = 4,
        xlPasteSpecialOperationNone = 0xffffefd2,
        xlPasteSpecialOperationSubtract = 3
    } XlPasteSpecialOperation;

    typedef enum {
        xlAscending = 1,
        xlDescending = 2
    } XlSortOrder;

    typedef enum {
        xlGuess = 0,
        xlNo = 2,
        xlYes = 1
    } XlYesNoGuess;

    typedef enum {
        xlSortRows = 2,
        xlSortColumns = 1
    } XlSortOrientation;

    typedef enum {
        xlPinYin = 1,
        xlStroke = 2
    } XlSortMethod;

    typedef enum {
        xlSortNormal = 0,
        xlSortTextAsNumbers = 1
    } XlSortDataOption;

    typedef enum {
        xlCellTypeBlanks = 4,
        xlCellTypeConstants = 2,
        xlCellTypeFormulas = 0xffffefe5,
        xlCellTypeLastCell = 11,
        xlCellTypeComments = 0xffffefd0,
        xlCellTypeVisible = 12,
        xlCellTypeAllFormatConditions = 0xffffefb4,
        xlCellTypeSameFormatConditions = 0xffffefb3,
        xlCellTypeAllValidation = 0xffffefb2,
        xlCellTypeSameValidation = 0xffffefb1
    } XlCellType;

    typedef enum {
        xlSubscribeToPicture = 0xffffefcd,
        xlSubscribeToText = 0xffffefc2
    } XlSubscribeToFormat;

    typedef enum {
        xlAverage = 0xffffeff6,
        xlCount = 0xffffeff0,
        xlCountNums = 0xffffefef,
        xlMax = 0xffffefd8,
        xlMin = 0xffffefd5,
        xlProduct = 0xffffefcb,
        xlStDev = 0xffffefc5,
        xlStDevP = 0xffffefc4,
        xlSum = 0xffffefc3,
        xlVar = 0xffffefbc,
        xlVarP = 0xffffefbb,
        xlUnknown = 1000
    } XlConsolidationFunction;

    typedef enum {
        xlDelimited = 1,
        xlFixedWidth = 2
    } XlTextParsingType;

    typedef enum {
        xlSheetVisible = 0xffffffff,
        xlSheetHidden = 0,
        xlSheetVeryHidden = 2
    } XlSheetVisibility;

    typedef enum {
        xlNoRestrictions = 0,
        xlUnlockedCells = 1,
        xlNoSelection = 0xffffefd2
    } XlEnableSelection;

    typedef enum {
        xlChart = 0xffffeff3,
        xlDialogSheet = 0xffffefec,
        xlExcel4IntlMacroSheet = 4,
        xlExcel4MacroSheet = 3,
        xlWorksheet = 0xffffefb9
    } XlSheetType;




























































    /* Interfaces descriptions  */

    [
      odl,
      uuid(000208D5-0000-0000-C000-000000000046),
      helpcontext(0x00020001),
      dual,
      oleautomation
    ]
    interface _Application : IDispatch {
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] Application** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] XlCreator* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] Application** RHS);
        [id(0x00000131), propget, helpcontext(0x00010131)]
        HRESULT ActiveCell([out, retval] Range** RHS);
        [id(0x000000b7), propget, helpcontext(0x000100b7)]
        HRESULT ActiveChart([out, retval] Chart** RHS);
        [id(0x0000032f), propget, hidden, helpcontext(0x0001032f)]
        HRESULT ActiveDialog([out, retval] DialogSheet** RHS);
        [id(0x000002f6), propget, hidden, helpcontext(0x000102f6)]
        HRESULT ActiveMenuBar([out, retval] MenuBar** RHS);
        [id(0x00000132), propget, helpcontext(0x00010132)]
        HRESULT ActivePrinter(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000132), propput, helpcontext(0x00010132)]
        HRESULT ActivePrinter(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000133), propget, helpcontext(0x00010133)]
        HRESULT ActiveSheet([out, retval] IDispatch** RHS);
        [id(0x000002f7), propget, helpcontext(0x000102f7)]
        HRESULT ActiveWindow([out, retval] Window** RHS);
        [id(0x00000134), propget, helpcontext(0x00010134)]
        HRESULT ActiveWorkbook([out, retval] Workbook** RHS);
        [id(0x00000225), propget, helpcontext(0x00010225)]
        HRESULT AddIns([out, retval] AddIns** RHS);
        [id(0x0000059e), propget, helpcontext(0x0001059e)]
        HRESULT Assistant([out, retval] Assistant** RHS);
        [id(0x00000117), helpcontext(0x00010117)]
        HRESULT Calculate([in, lcid] long lcid);
        [id(0x000000ee), propget, helpcontext(0x000100ee)]
        HRESULT Cells([out, retval] Range** RHS);
        [id(0x00000079), propget, helpcontext(0x00010079)]
        HRESULT Charts([out, retval] Sheets** RHS);
        [id(0x000000f1), propget, helpcontext(0x000100f1)]
        HRESULT Columns([out, retval] Range** RHS);
        [id(0x0000059f), propget, helpcontext(0x0001059f)]
        HRESULT CommandBars([out, retval] CommandBars** RHS);
        [id(0x0000014c), propget, helpcontext(0x0001014c)]
        HRESULT DDEAppReturnCode(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x0000014d), helpcontext(0x0001014d)]
        HRESULT DDEExecute(
                        [in] long Channel, 
                        [in] BSTR String, 
                        [in, lcid] long lcid);
        [id(0x0000014e), helpcontext(0x0001014e)]
        HRESULT DDEInitiate(
                        [in] BSTR App, 
                        [in] BSTR Topic, 
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x0000014f), helpcontext(0x0001014f)]
        HRESULT DDEPoke(
                        [in] long Channel, 
                        [in] VARIANT Item, 
                        [in] VARIANT Data, 
                        [in, lcid] long lcid);
        [id(0x00000150), helpcontext(0x00010150)]
        HRESULT DDERequest(
                        [in] long Channel, 
                        [in] BSTR Item, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000151), helpcontext(0x00010151)]
        HRESULT DDETerminate(
                        [in] long Channel, 
                        [in, lcid] long lcid);
        [id(0x000002fc), propget, hidden, helpcontext(0x000102fc)]
        HRESULT DialogSheets([out, retval] Sheets** RHS);
        [id(0x00000001), helpcontext(0x00010001)]
        HRESULT Evaluate(
                        [in] VARIANT Name, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0xfffffffb), helpcontext(0x0000fffb)]
        HRESULT _Evaluate(
                        [in] VARIANT Name, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x0000015e), helpcontext(0x0001015e)]
        HRESULT ExecuteExcel4Macro(
                        [in] BSTR String, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x000002fe), helpcontext(0x000102fe)]
        HRESULT Intersect(
                        [in] Range* Arg1, 
                        [in] Range* Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [in, lcid] long lcid, 
                        [out, retval] Range** RHS);
        [id(0x0000024d), propget, hidden, helpcontext(0x0001024d)]
        HRESULT MenuBars([out, retval] MenuBars** RHS);
        [id(0x00000246), propget, hidden, helpcontext(0x00010246)]
        HRESULT Modules([out, retval] Modules** RHS);
        [id(0x000001ba), propget, helpcontext(0x000101ba)]
        HRESULT Names([out, retval] Names** RHS);
        [id(0x000000c5), propget, helpcontext(0x000100c5)]
        HRESULT Range(
                        [in] VARIANT Cell1, 
                        [in, optional] VARIANT Cell2, 
                        [out, retval] Range** RHS);
        [id(0x00000102), propget, helpcontext(0x00010102)]
        HRESULT Rows([out, retval] Range** RHS);
        [id(0x00000103), helpcontext(0x00010103)]
        HRESULT Run(
                        [in, optional] VARIANT Macro, 
                        [in, optional] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000326), helpcontext(0x00010326)]
        HRESULT _Run2(
                        [in, optional] VARIANT Macro, 
                        [in, optional] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000093), propget, helpcontext(0x00010093)]
        HRESULT Selection(
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x0000017f), helpcontext(0x0001017f)]
        HRESULT SendKeys(
                        [in] VARIANT Keys, 
                        [in, optional] VARIANT Wait, 
                        [in, lcid] long lcid);
        [id(0x000001e5), propget, helpcontext(0x000101e5)]
        HRESULT Sheets([out, retval] Sheets** RHS);
        [id(0x00000308), propget, hidden, helpcontext(0x00010308)]
        HRESULT ShortcutMenus(
                        [in] long Index, 
                        [out, retval] Menu** RHS);
        [id(0x0000030a), propget, helpcontext(0x0001030a)]
        HRESULT ThisWorkbook(
                        [in, lcid] long lcid, 
                        [out, retval] Workbook** RHS);
        [id(0x00000228), propget, hidden, helpcontext(0x00010228)]
        HRESULT Toolbars([out, retval] Toolbars** RHS);
        [id(0x0000030b), helpcontext(0x0001030b)]
        HRESULT Union(
                        [in] Range* Arg1, 
                        [in] Range* Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [in, lcid] long lcid, 
                        [out, retval] Range** RHS);
        [id(0x000001ae), propget, helpcontext(0x000101ae)]
        HRESULT Windows([out, retval] Windows** RHS);
        [id(0x0000023c), propget, helpcontext(0x0001023c)]
        HRESULT Workbooks([out, retval] Workbooks** RHS);
        [id(0x000005a0), propget, helpcontext(0x000105a0)]
        HRESULT WorksheetFunction([out, retval] WorksheetFunction** RHS);
        [id(0x000001ee), propget, helpcontext(0x000101ee)]
        HRESULT Worksheets([out, retval] Sheets** RHS);
        [id(0x00000245), propget, helpcontext(0x00010245)]
        HRESULT Excel4IntlMacroSheets([out, retval] Sheets** RHS);
        [id(0x00000243), propget, helpcontext(0x00010243)]
        HRESULT Excel4MacroSheets([out, retval] Sheets** RHS);
        [id(0x00000447), helpcontext(0x00010447)]
        HRESULT ActivateMicrosoftApp(
                        [in] XlMSApplication Index, 
                        [in, lcid] long lcid);
        [id(0x000000d8), hidden, helpcontext(0x000100d8)]
        HRESULT AddChartAutoFormat(
                        [in] VARIANT Chart, 
                        [in] BSTR Name, 
                        [in, optional] VARIANT Description, 
                        [in, lcid] long lcid);
        [id(0x0000030c), helpcontext(0x0001030c)]
        HRESULT AddCustomList(
                        [in] VARIANT ListArray, 
                        [in, optional] VARIANT ByRow, 
                        [in, lcid] long lcid);
        [id(0x000003a2), propget, helpcontext(0x000103a2)]
        HRESULT AlertBeforeOverwriting(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000003a2), propput, helpcontext(0x000103a2)]
        HRESULT AlertBeforeOverwriting(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000139), propget, helpcontext(0x00010139)]
        HRESULT AltStartupPath(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000139), propput, helpcontext(0x00010139)]
        HRESULT AltStartupPath(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x000003e0), propget, helpcontext(0x000103e0)]
        HRESULT AskToUpdateLinks(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000003e0), propput, helpcontext(0x000103e0)]
        HRESULT AskToUpdateLinks(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000049c), propget, helpcontext(0x0001049c)]
        HRESULT EnableAnimations(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000049c), propput, helpcontext(0x0001049c)]
        HRESULT EnableAnimations(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000479), propget, helpcontext(0x00010479)]
        HRESULT AutoCorrect([out, retval] AutoCorrect** RHS);
        [id(0x0000013a), propget, helpcontext(0x0001013a)]
        HRESULT Build(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x0000013b), propget, helpcontext(0x0001013b)]
        HRESULT CalculateBeforeSave(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000013b), propput, helpcontext(0x0001013b)]
        HRESULT CalculateBeforeSave(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000013c), propget, helpcontext(0x0001013c)]
        HRESULT Calculation(
                        [in, lcid] long lcid, 
                        [out, retval] XlCalculation* RHS);
        [id(0x0000013c), propput, helpcontext(0x0001013c)]
        HRESULT Calculation(
                        [in, lcid] long lcid, 
                        [in] XlCalculation RHS);
        [id(0x0000013d), propget, helpcontext(0x0001013d)]
        HRESULT Caller(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x0000013e), propget, helpcontext(0x0001013e)]
        HRESULT CanPlaySounds(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000013f), propget, helpcontext(0x0001013f)]
        HRESULT CanRecordSounds(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000008b), propget, helpcontext(0x0001008b)]
        HRESULT Caption([out, retval] BSTR* RHS);
        [id(0x0000008b), propput, helpcontext(0x0001008b)]
        HRESULT Caption([in] BSTR RHS);
        [id(0x00000140), propget, helpcontext(0x00010140)]
        HRESULT CellDragAndDrop(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000140), propput, helpcontext(0x00010140)]
        HRESULT CellDragAndDrop(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000043e), helpcontext(0x0001043e)]
        HRESULT CentimetersToPoints(
                        [in] double Centimeters, 
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x000001f9), helpcontext(0x000101f9)]
        HRESULT CheckSpelling(
                        [in] BSTR Word, 
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000141), propget, helpcontext(0x00010141)]
        HRESULT ClipboardFormats(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000142), propget, helpcontext(0x00010142)]
        HRESULT DisplayClipboardWindow(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000142), propput, helpcontext(0x00010142)]
        HRESULT DisplayClipboardWindow(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000016d), propget, hidden, helpcontext(0x0001016d)]
        HRESULT ColorButtons([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000016d), propput, hidden, helpcontext(0x0001016d)]
        HRESULT ColorButtons([in] VARIANT_BOOL RHS);
        [id(0x00000143), propget, helpcontext(0x00010143)]
        HRESULT CommandUnderlines(
                        [in, lcid] long lcid, 
                        [out, retval] XlCommandUnderlines* RHS);
        [id(0x00000143), propput, helpcontext(0x00010143)]
        HRESULT CommandUnderlines(
                        [in, lcid] long lcid, 
                        [in] XlCommandUnderlines RHS);
        [id(0x00000144), propget, helpcontext(0x00010144)]
        HRESULT ConstrainNumeric(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000144), propput, helpcontext(0x00010144)]
        HRESULT ConstrainNumeric(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000145), helpcontext(0x00010145)]
        HRESULT ConvertFormula(
                        [in] VARIANT Formula, 
                        [in] XlReferenceStyle FromReferenceStyle, 
                        [in, optional] VARIANT ToReferenceStyle, 
                        [in, optional] VARIANT ToAbsolute, 
                        [in, optional] VARIANT RelativeTo, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x000003df), propget, helpcontext(0x000103df)]
        HRESULT CopyObjectsWithCells(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000003df), propput, helpcontext(0x000103df)]
        HRESULT CopyObjectsWithCells(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000489), propget, helpcontext(0x00010489)]
        HRESULT Cursor(
                        [in, lcid] long lcid, 
                        [out, retval] XlMousePointer* RHS);
        [id(0x00000489), propput, helpcontext(0x00010489)]
        HRESULT Cursor(
                        [in, lcid] long lcid, 
                        [in] XlMousePointer RHS);
        [id(0x00000313), propget, helpcontext(0x00010313)]
        HRESULT CustomListCount(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x0000014a), propget, helpcontext(0x0001014a)]
        HRESULT CutCopyMode(
                        [in, lcid] long lcid, 
                        [out, retval] XlCutCopyMode* RHS);
        [id(0x0000014a), propput, helpcontext(0x0001014a)]
        HRESULT CutCopyMode(
                        [in, lcid] long lcid, 
                        [in] XlCutCopyMode RHS);
        [id(0x0000014b), propget, helpcontext(0x0001014b)]
        HRESULT DataEntryMode(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x0000014b), propput, helpcontext(0x0001014b)]
        HRESULT DataEntryMode(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x000006f6), hidden, helpcontext(0x000106f6)]
        HRESULT Dummy1(
                        [in, optional] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [out, retval] VARIANT* RHS);
        [id(0x000006f7), hidden, helpcontext(0x000106f7)]
        HRESULT Dummy2(
                        [in, optional] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [out, retval] VARIANT* RHS);
        [id(0x000006f8), hidden, helpcontext(0x000106f8)]
        HRESULT Dummy3([out, retval] VARIANT* RHS);
        [id(0x000006f9), hidden, helpcontext(0x000106f9)]
        HRESULT Dummy4(
                        [in, optional] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [out, retval] VARIANT* RHS);
        [id(0x000006fa), hidden, helpcontext(0x000106fa)]
        HRESULT Dummy5(
                        [in, optional] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [out, retval] VARIANT* RHS);
        [id(0x000006fb), hidden, helpcontext(0x000106fb)]
        HRESULT Dummy6([out, retval] VARIANT* RHS);
        [id(0x000006fc), hidden, helpcontext(0x000106fc)]
        HRESULT Dummy7([out, retval] VARIANT* RHS);
        [id(0x000006fd), hidden, helpcontext(0x000106fd)]
        HRESULT Dummy8(
                        [in, optional] VARIANT Arg1, 
                        [out, retval] VARIANT* RHS);
        [id(0x000006fe), hidden, helpcontext(0x000106fe)]
        HRESULT Dummy9([out, retval] VARIANT* RHS);
        [id(0x000006ff), hidden, helpcontext(0x000106ff)]
        HRESULT Dummy10(
                        [in, optional] VARIANT arg, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000700), hidden, helpcontext(0x00010700)]
        HRESULT Dummy11();
        [id(00000000), propget, helpcontext(0x00010000)]
        HRESULT _Default([out, retval] BSTR* RHS);
        [id(0x0000040e), propget, helpcontext(0x0001040e)]
        HRESULT DefaultFilePath(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x0000040e), propput, helpcontext(0x0001040e)]
        HRESULT DefaultFilePath(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x000000d9), hidden, helpcontext(0x000100d9)]
        HRESULT DeleteChartAutoFormat(
                        [in] BSTR Name, 
                        [in, lcid] long lcid);
        [id(0x0000030f), helpcontext(0x0001030f)]
        HRESULT DeleteCustomList(
                        [in] long ListNum, 
                        [in, lcid] long lcid);
        [id(0x000002f9), propget, helpcontext(0x000102f9)]
        HRESULT Dialogs([out, retval] Dialogs** RHS);
        [id(0x00000157), propget, helpcontext(0x00010157)]
        HRESULT DisplayAlerts(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000157), propput, helpcontext(0x00010157)]
        HRESULT DisplayAlerts(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000158), propget, helpcontext(0x00010158)]
        HRESULT DisplayFormulaBar(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000158), propput, helpcontext(0x00010158)]
        HRESULT DisplayFormulaBar(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000425), propget, helpcontext(0x00010425)]
        HRESULT DisplayFullScreen(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000425), propput, helpcontext(0x00010425)]
        HRESULT DisplayFullScreen(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000159), propget, helpcontext(0x00010159)]
        HRESULT DisplayNoteIndicator([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000159), propput, helpcontext(0x00010159)]
        HRESULT DisplayNoteIndicator([in] VARIANT_BOOL RHS);
        [id(0x000004ac), propget, helpcontext(0x000104ac)]
        HRESULT DisplayCommentIndicator([out, retval] XlCommentDisplayMode* RHS);
        [id(0x000004ac), propput, helpcontext(0x000104ac)]
        HRESULT DisplayCommentIndicator([in] XlCommentDisplayMode RHS);
        [id(0x0000039f), propget, helpcontext(0x0001039f)]
        HRESULT DisplayExcel4Menus(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000039f), propput, helpcontext(0x0001039f)]
        HRESULT DisplayExcel4Menus(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000039e), propget, helpcontext(0x0001039e)]
        HRESULT DisplayRecentFiles([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000039e), propput, helpcontext(0x0001039e)]
        HRESULT DisplayRecentFiles([in] VARIANT_BOOL RHS);
        [id(0x0000015a), propget, helpcontext(0x0001015a)]
        HRESULT DisplayScrollBars(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000015a), propput, helpcontext(0x0001015a)]
        HRESULT DisplayScrollBars(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000015b), propget, helpcontext(0x0001015b)]
        HRESULT DisplayStatusBar(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000015b), propput, helpcontext(0x0001015b)]
        HRESULT DisplayStatusBar(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000015d), helpcontext(0x0001015d)]
        HRESULT DoubleClick([in, lcid] long lcid);
        [id(0x000003a1), propget, helpcontext(0x000103a1)]
        HRESULT EditDirectlyInCell(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000003a1), propput, helpcontext(0x000103a1)]
        HRESULT EditDirectlyInCell(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000049b), propget, helpcontext(0x0001049b)]
        HRESULT EnableAutoComplete([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000049b), propput, helpcontext(0x0001049b)]
        HRESULT EnableAutoComplete([in] VARIANT_BOOL RHS);
        [id(0x00000448), propget, helpcontext(0x00010448)]
        HRESULT EnableCancelKey(
                        [in, lcid] long lcid, 
                        [out, retval] XlEnableCancelKey* RHS);
        [id(0x00000448), propput, helpcontext(0x00010448)]
        HRESULT EnableCancelKey(
                        [in, lcid] long lcid, 
                        [in] XlEnableCancelKey RHS);
        [id(0x000004ad), propget, helpcontext(0x000104ad)]
        HRESULT EnableSound([out, retval] VARIANT_BOOL* RHS);
        [id(0x000004ad), propput, helpcontext(0x000104ad)]
        HRESULT EnableSound([in] VARIANT_BOOL RHS);
        [id(0x00000428), propget, hidden, helpcontext(0x00010428)]
        HRESULT EnableTipWizard(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000428), propput, hidden, helpcontext(0x00010428)]
        HRESULT EnableTipWizard(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x000003a3), propget, helpcontext(0x000103a3)]
        HRESULT FileConverters(
                        [in, optional] VARIANT Index1, 
                        [in, optional] VARIANT Index2, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x000004b0), propget, hidden, helpcontext(0x000104b0)]
        HRESULT FileSearch([out, retval] FileSearch** RHS);
        [id(0x000004b1), propget, hidden, helpcontext(0x000104b1)]
        HRESULT FileFind([out, retval] IFind** RHS);
        [id(0x0000042c), hidden, helpcontext(0x0001042c)]
        HRESULT _FindFile([in, lcid] long lcid);
        [id(0x0000015f), propget, helpcontext(0x0001015f)]
        HRESULT FixedDecimal(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000015f), propput, helpcontext(0x0001015f)]
        HRESULT FixedDecimal(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000160), propget, helpcontext(0x00010160)]
        HRESULT FixedDecimalPlaces(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000160), propput, helpcontext(0x00010160)]
        HRESULT FixedDecimalPlaces(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x00000312), helpcontext(0x00010312)]
        HRESULT GetCustomListContents(
                        [in] long ListNum, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000311), helpcontext(0x00010311)]
        HRESULT GetCustomListNum(
                        [in] VARIANT ListArray, 
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000433), helpcontext(0x00010433)]
        HRESULT GetOpenFilename(
                        [in, optional] VARIANT FileFilter, 
                        [in, optional] VARIANT FilterIndex, 
                        [in, optional] VARIANT Title, 
                        [in, optional] VARIANT ButtonText, 
                        [in, optional] VARIANT MultiSelect, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000434), helpcontext(0x00010434)]
        HRESULT GetSaveAsFilename(
                        [in, optional] VARIANT InitialFilename, 
                        [in, optional] VARIANT FileFilter, 
                        [in, optional] VARIANT FilterIndex, 
                        [in, optional] VARIANT Title, 
                        [in, optional] VARIANT ButtonText, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x000001db), helpcontext(0x000101db)]
        HRESULT Goto(
                        [in, optional] VARIANT Reference, 
                        [in, optional] VARIANT Scroll, 
                        [in, lcid] long lcid);
        [id(0x0000007b), propget, helpcontext(0x0001007b)]
        HRESULT Height(
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x0000007b), propput, helpcontext(0x0001007b)]
        HRESULT Height(
                        [in, lcid] long lcid, 
                        [in] double RHS);
        [id(0x00000162), helpcontext(0x00010162)]
        HRESULT Help(
                        [in, optional] VARIANT HelpFile, 
                        [in, optional] VARIANT HelpContextID, 
                        [in, lcid] long lcid);
        [id(0x00000164), propget, helpcontext(0x00010164)]
        HRESULT IgnoreRemoteRequests(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000164), propput, helpcontext(0x00010164)]
        HRESULT IgnoreRemoteRequests(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000043f), helpcontext(0x0001043f)]
        HRESULT InchesToPoints(
                        [in] double Inches, 
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x00000165), helpcontext(0x00010165)]
        HRESULT InputBox(
                        [in] BSTR Prompt, 
                        [in, optional] VARIANT Title, 
                        [in, optional] VARIANT Default, 
                        [in, optional] VARIANT Left, 
                        [in, optional] VARIANT Top, 
                        [in, optional] VARIANT HelpFile, 
                        [in, optional] VARIANT HelpContextID, 
                        [in, optional] VARIANT Type, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000169), propget, helpcontext(0x00010169)]
        HRESULT Interactive(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000169), propput, helpcontext(0x00010169)]
        HRESULT Interactive(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000016a), propget, helpcontext(0x0001016a)]
        HRESULT International(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x0000016b), propget, helpcontext(0x0001016b)]
        HRESULT Iteration(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000016b), propput, helpcontext(0x0001016b)]
        HRESULT Iteration(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000016c), propget, hidden, helpcontext(0x0001016c)]
        HRESULT LargeButtons([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000016c), propput, hidden, helpcontext(0x0001016c)]
        HRESULT LargeButtons([in] VARIANT_BOOL RHS);
        [id(0x0000007f), propget, helpcontext(0x0001007f)]
        HRESULT Left(
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x0000007f), propput, helpcontext(0x0001007f)]
        HRESULT Left(
                        [in, lcid] long lcid, 
                        [in] double RHS);
        [id(0x0000016e), propget, helpcontext(0x0001016e)]
        HRESULT LibraryPath(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x0000046f), helpcontext(0x0001046f)]
        HRESULT MacroOptions(
                        [in, optional] VARIANT Macro, 
                        [in, optional] VARIANT Description, 
                        [in, optional] VARIANT HasMenu, 
                        [in, optional] VARIANT MenuText, 
                        [in, optional] VARIANT HasShortcutKey, 
                        [in, optional] VARIANT ShortcutKey, 
                        [in, optional] VARIANT Category, 
                        [in, optional] VARIANT StatusBar, 
                        [in, optional] VARIANT HelpContextID, 
                        [in, optional] VARIANT HelpFile, 
                        [in, lcid] long lcid);
        [id(0x000003b1), helpcontext(0x000103b1)]
        HRESULT MailLogoff([in, lcid] long lcid);
        [id(0x000003af), helpcontext(0x000103af)]
        HRESULT MailLogon(
                        [in, optional] VARIANT Name, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT DownloadNewMail, 
                        [in, lcid] long lcid);
        [id(0x000003ae), propget, helpcontext(0x000103ae)]
        HRESULT MailSession(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x000003cb), propget, helpcontext(0x000103cb)]
        HRESULT MailSystem(
                        [in, lcid] long lcid, 
                        [out, retval] XlMailSystem* RHS);
        [id(0x0000016f), propget, helpcontext(0x0001016f)]
        HRESULT MathCoprocessorAvailable(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000170), propget, helpcontext(0x00010170)]
        HRESULT MaxChange(
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x00000170), propput, helpcontext(0x00010170)]
        HRESULT MaxChange(
                        [in, lcid] long lcid, 
                        [in] double RHS);
        [id(0x00000171), propget, helpcontext(0x00010171)]
        HRESULT MaxIterations(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000171), propput, helpcontext(0x00010171)]
        HRESULT MaxIterations(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x00000172), propget, hidden, helpcontext(0x00010172)]
        HRESULT MemoryFree(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000173), propget, hidden, helpcontext(0x00010173)]
        HRESULT MemoryTotal(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000174), propget, hidden, helpcontext(0x00010174)]
        HRESULT MemoryUsed(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000175), propget, helpcontext(0x00010175)]
        HRESULT MouseAvailable(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000176), propget, helpcontext(0x00010176)]
        HRESULT MoveAfterReturn(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000176), propput, helpcontext(0x00010176)]
        HRESULT MoveAfterReturn(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000478), propget, helpcontext(0x00010478)]
        HRESULT MoveAfterReturnDirection(
                        [in, lcid] long lcid, 
                        [out, retval] XlDirection* RHS);
        [id(0x00000478), propput, helpcontext(0x00010478)]
        HRESULT MoveAfterReturnDirection(
                        [in, lcid] long lcid, 
                        [in] XlDirection RHS);
        [id(0x000004b2), propget, helpcontext(0x000104b2)]
        HRESULT RecentFiles([out, retval] RecentFiles** RHS);
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x000003cc), helpcontext(0x000103cc)]
        HRESULT NextLetter(
                        [in, lcid] long lcid, 
                        [out, retval] Workbook** RHS);
        [id(0x00000184), propget, helpcontext(0x00010184)]
        HRESULT NetworkTemplatesPath(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x000004b3), propget, helpcontext(0x000104b3)]
        HRESULT ODBCErrors([out, retval] ODBCErrors** RHS);
        [id(0x000004b4), propget, helpcontext(0x000104b4)]
        HRESULT ODBCTimeout([out, retval] long* RHS);
        [id(0x000004b4), propput, helpcontext(0x000104b4)]
        HRESULT ODBCTimeout([in] long RHS);
        [id(0x00000271), propget, hidden, helpcontext(0x00010271)]
        HRESULT OnCalculate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000271), propput, hidden, helpcontext(0x00010271)]
        HRESULT OnCalculate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000275), propget, hidden, helpcontext(0x00010275)]
        HRESULT OnData(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000275), propput, hidden, helpcontext(0x00010275)]
        HRESULT OnData(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000274), propget, hidden, helpcontext(0x00010274)]
        HRESULT OnDoubleClick(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000274), propput, hidden, helpcontext(0x00010274)]
        HRESULT OnDoubleClick(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000273), propget, hidden, helpcontext(0x00010273)]
        HRESULT OnEntry(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000273), propput, hidden, helpcontext(0x00010273)]
        HRESULT OnEntry(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000272), helpcontext(0x00010272)]
        HRESULT OnKey(
                        [in] BSTR Key, 
                        [in, optional] VARIANT Procedure, 
                        [in, lcid] long lcid);
        [id(0x00000301), helpcontext(0x00010301)]
        HRESULT OnRepeat(
                        [in] BSTR Text, 
                        [in] BSTR Procedure, 
                        [in, lcid] long lcid);
        [id(0x00000407), propget, hidden, helpcontext(0x00010407)]
        HRESULT OnSheetActivate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000407), propput, hidden, helpcontext(0x00010407)]
        HRESULT OnSheetActivate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000439), propget, hidden, helpcontext(0x00010439)]
        HRESULT OnSheetDeactivate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000439), propput, hidden, helpcontext(0x00010439)]
        HRESULT OnSheetDeactivate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000270), helpcontext(0x00010270)]
        HRESULT OnTime(
                        [in] VARIANT EarliestTime, 
                        [in] BSTR Procedure, 
                        [in, optional] VARIANT LatestTime, 
                        [in, optional] VARIANT Schedule, 
                        [in, lcid] long lcid);
        [id(0x00000302), helpcontext(0x00010302)]
        HRESULT OnUndo(
                        [in] BSTR Text, 
                        [in] BSTR Procedure, 
                        [in, lcid] long lcid);
        [id(0x0000026f), propget, helpcontext(0x0001026f)]
        HRESULT OnWindow(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x0000026f), propput, helpcontext(0x0001026f)]
        HRESULT OnWindow(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000177), propget, helpcontext(0x00010177)]
        HRESULT OperatingSystem(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000178), propget, helpcontext(0x00010178)]
        HRESULT OrganizationName(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000123), propget, helpcontext(0x00010123)]
        HRESULT Path(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000179), propget, helpcontext(0x00010179)]
        HRESULT PathSeparator(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x0000017a), propget, helpcontext(0x0001017a)]
        HRESULT PreviousSelections(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x000004b5), propget, helpcontext(0x000104b5)]
        HRESULT PivotTableSelection([out, retval] VARIANT_BOOL* RHS);
        [id(0x000004b5), propput, helpcontext(0x000104b5)]
        HRESULT PivotTableSelection([in] VARIANT_BOOL RHS);
        [id(0x00000426), propget, helpcontext(0x00010426)]
        HRESULT PromptForSummaryInfo(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000426), propput, helpcontext(0x00010426)]
        HRESULT PromptForSummaryInfo(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000012e), helpcontext(0x0001012e)]
        HRESULT Quit();
        [id(0x00000305), helpcontext(0x00010305)]
        HRESULT RecordMacro(
                        [in, optional] VARIANT BasicCode, 
                        [in, optional] VARIANT XlmCode, 
                        [in, lcid] long lcid);
        [id(0x0000017b), propget, helpcontext(0x0001017b)]
        HRESULT RecordRelative(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000017c), propget, helpcontext(0x0001017c)]
        HRESULT ReferenceStyle(
                        [in, lcid] long lcid, 
                        [out, retval] XlReferenceStyle* RHS);
        [id(0x0000017c), propput, helpcontext(0x0001017c)]
        HRESULT ReferenceStyle(
                        [in, lcid] long lcid, 
                        [in] XlReferenceStyle RHS);
        [id(0x00000307), propget, helpcontext(0x00010307)]
        HRESULT RegisteredFunctions(
                        [in, optional] VARIANT Index1, 
                        [in, optional] VARIANT Index2, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x0000001e), helpcontext(0x0001001e)]
        HRESULT RegisterXLL(
                        [in] BSTR Filename, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000012d), helpcontext(0x0001012d)]
        HRESULT Repeat([in, lcid] long lcid);
        [id(0x000003a0), hidden, helpcontext(0x000103a0)]
        HRESULT ResetTipWizard([in, lcid] long lcid);
        [id(0x000004b6), propget, helpcontext(0x000104b6)]
        HRESULT RollZoom([out, retval] VARIANT_BOOL* RHS);
        [id(0x000004b6), propput, helpcontext(0x000104b6)]
        HRESULT RollZoom([in] VARIANT_BOOL RHS);
        [id(0x0000011b), hidden, helpcontext(0x0001011b)]
        HRESULT Save(
                        [in, optional] VARIANT Filename, 
                        [in, lcid] long lcid);
        [id(0x000000d4), helpcontext(0x000100d4)]
        HRESULT SaveWorkspace(
                        [in, optional] VARIANT Filename, 
                        [in, lcid] long lcid);
        [id(0x0000017e), propget, helpcontext(0x0001017e)]
        HRESULT ScreenUpdating(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000017e), propput, helpcontext(0x0001017e)]
        HRESULT ScreenUpdating(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x000000db), hidden, helpcontext(0x000100db)]
        HRESULT SetDefaultChart(
                        [in, optional] VARIANT FormatName, 
                        [in, optional] VARIANT Gallery);
        [id(0x000003e1), propget, helpcontext(0x000103e1)]
        HRESULT SheetsInNewWorkbook(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x000003e1), propput, helpcontext(0x000103e1)]
        HRESULT SheetsInNewWorkbook(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x000004b7), propget, helpcontext(0x000104b7)]
        HRESULT ShowChartTipNames([out, retval] VARIANT_BOOL* RHS);
        [id(0x000004b7), propput, helpcontext(0x000104b7)]
        HRESULT ShowChartTipNames([in] VARIANT_BOOL RHS);
        [id(0x000004b8), propget, helpcontext(0x000104b8)]
        HRESULT ShowChartTipValues([out, retval] VARIANT_BOOL* RHS);
        [id(0x000004b8), propput, helpcontext(0x000104b8)]
        HRESULT ShowChartTipValues([in] VARIANT_BOOL RHS);
        [id(0x0000039c), propget, helpcontext(0x0001039c)]
        HRESULT StandardFont(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x0000039c), propput, helpcontext(0x0001039c)]
        HRESULT StandardFont(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x0000039d), propget, helpcontext(0x0001039d)]
        HRESULT StandardFontSize(
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x0000039d), propput, helpcontext(0x0001039d)]
        HRESULT StandardFontSize(
                        [in, lcid] long lcid, 
                        [in] double RHS);
        [id(0x00000181), propget, helpcontext(0x00010181)]
        HRESULT StartupPath(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000182), propget, helpcontext(0x00010182)]
        HRESULT StatusBar(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000182), propput, helpcontext(0x00010182)]
        HRESULT StatusBar(
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [id(0x0000017d), propget, helpcontext(0x0001017d)]
        HRESULT TemplatesPath(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000183), propget, helpcontext(0x00010183)]
        HRESULT ShowToolTips([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000183), propput, helpcontext(0x00010183)]
        HRESULT ShowToolTips([in] VARIANT_BOOL RHS);
        [id(0x0000007e), propget, helpcontext(0x0001007e)]
        HRESULT Top(
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x0000007e), propput, helpcontext(0x0001007e)]
        HRESULT Top(
                        [in, lcid] long lcid, 
                        [in] double RHS);
        [id(0x000004b9), propget, helpcontext(0x000104b9)]
        HRESULT DefaultSaveFormat([out, retval] XlFileFormat* RHS);
        [id(0x000004b9), propput, helpcontext(0x000104b9)]
        HRESULT DefaultSaveFormat([in] XlFileFormat RHS);
        [id(0x00000136), propget, helpcontext(0x00010136)]
        HRESULT TransitionMenuKey(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000136), propput, helpcontext(0x00010136)]
        HRESULT TransitionMenuKey(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000137), propget, helpcontext(0x00010137)]
        HRESULT TransitionMenuKeyAction(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000137), propput, helpcontext(0x00010137)]
        HRESULT TransitionMenuKeyAction(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x00000138), propget, helpcontext(0x00010138)]
        HRESULT TransitionNavigKeys(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000138), propput, helpcontext(0x00010138)]
        HRESULT TransitionNavigKeys(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000012f), helpcontext(0x0001012f)]
        HRESULT Undo([in, lcid] long lcid);
        [id(0x00000185), propget, helpcontext(0x00010185)]
        HRESULT UsableHeight(
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x00000186), propget, helpcontext(0x00010186)]
        HRESULT UsableWidth(
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x000004ba), propget, helpcontext(0x000104ba)]
        HRESULT UserControl([out, retval] VARIANT_BOOL* RHS);
        [id(0x000004ba), propput, helpcontext(0x000104ba)]
        HRESULT UserControl([in] VARIANT_BOOL RHS);
        [id(0x00000187), propget, helpcontext(0x00010187)]
        HRESULT UserName(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000187), propput, helpcontext(0x00010187)]
        HRESULT UserName(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000006), propget, helpcontext(0x00010006)]
        HRESULT Value([out, retval] BSTR* RHS);
        [id(0x000004bb), propget, helpcontext(0x000104bb)]
        HRESULT VBE([out, retval] IDispatch** /* VBE** */ RHS);
        [id(0x00000188), propget, helpcontext(0x00010188)]
        HRESULT Version(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x0000022e), propget, helpcontext(0x0001022e)]
        HRESULT Visible(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000022e), propput, helpcontext(0x0001022e)]
        HRESULT Visible(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000314), helpcontext(0x00010314)]
        HRESULT Volatile(
                        [in, optional] VARIANT Volatile, 
                        [in, lcid] long lcid);
        [id(0x00000189), hidden, helpcontext(0x00010189)]
        HRESULT _Wait(
                        [in] VARIANT Time, 
                        [in, lcid] long lcid);
        [id(0x0000007a), propget, helpcontext(0x0001007a)]
        HRESULT Width(
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x0000007a), propput, helpcontext(0x0001007a)]
        HRESULT Width(
                        [in, lcid] long lcid, 
                        [in] double RHS);
        [id(0x0000018b), propget, helpcontext(0x0001018b)]
        HRESULT WindowsForPens(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000018c), propget, helpcontext(0x0001018c)]
        HRESULT WindowState(
                        [in, lcid] long lcid, 
                        [out, retval] XlWindowState* RHS);
        [id(0x0000018c), propput, helpcontext(0x0001018c)]
        HRESULT WindowState(
                        [in, lcid] long lcid, 
                        [in] XlWindowState RHS);
        [id(0x00000002), propget, hidden, helpcontext(0x00010002)]
        HRESULT UILanguage(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000002), propput, hidden, helpcontext(0x00010002)]
        HRESULT UILanguage(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x000000e5), propget, helpcontext(0x000100e5)]
        HRESULT DefaultSheetDirection(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x000000e5), propput, helpcontext(0x000100e5)]
        HRESULT DefaultSheetDirection(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x000000e8), propget, helpcontext(0x000100e8)]
        HRESULT CursorMovement(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x000000e8), propput, helpcontext(0x000100e8)]
        HRESULT CursorMovement(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x000000e9), propget, helpcontext(0x000100e9)]
        HRESULT ControlCharacters(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000000e9), propput, helpcontext(0x000100e9)]
        HRESULT ControlCharacters(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x000000a9), hidden, helpcontext(0x000100a9)]
        HRESULT _WSFunction(
                        [in, optional] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x000004bc), propget, helpcontext(0x000104bc)]
        HRESULT EnableEvents([out, retval] VARIANT_BOOL* RHS);
        [id(0x000004bc), propput, helpcontext(0x000104bc)]
        HRESULT EnableEvents([in] VARIANT_BOOL RHS);
        [id(0x000004bd), propget, hidden, helpcontext(0x000104bd)]
        HRESULT DisplayInfoWindow([out, retval] VARIANT_BOOL* RHS);
        [id(0x000004bd), propput, hidden, helpcontext(0x000104bd)]
        HRESULT DisplayInfoWindow([in] VARIANT_BOOL RHS);
        [id(0x000006ea), helpcontext(0x000106ea)]
        HRESULT Wait(
                        [in] VARIANT Time, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000701), propget, helpcontext(0x00010701)]
        HRESULT ExtendList([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000701), propput, helpcontext(0x00010701)]
        HRESULT ExtendList([in] VARIANT_BOOL RHS);
        [id(0x00000702), propget, helpcontext(0x00010702)]
        HRESULT OLEDBErrors([out, retval] OLEDBErrors** RHS);
        [id(0x00000703), helpcontext(0x00010703)]
        HRESULT GetPhonetic(
                        [in, optional] VARIANT Text, 
                        [out, retval] BSTR* RHS);
        [id(0x00000704), propget, helpcontext(0x00010704)]
        HRESULT COMAddIns([out, retval] COMAddIns** RHS);
        [id(0x00000705), propget, helpcontext(0x00010705)]
        HRESULT DefaultWebOptions([out, retval] DefaultWebOptions** RHS);
        [id(0x00000706), propget, helpcontext(0x00010706)]
        HRESULT ProductCode([out, retval] BSTR* RHS);
        [id(0x00000707), propget, helpcontext(0x00010707)]
        HRESULT UserLibraryPath([out, retval] BSTR* RHS);
        [id(0x00000708), propget, helpcontext(0x00010708)]
        HRESULT AutoPercentEntry([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000708), propput, helpcontext(0x00010708)]
        HRESULT AutoPercentEntry([in] VARIANT_BOOL RHS);
        [id(0x00000709), propget, helpcontext(0x00010709)]
        HRESULT LanguageSettings([out, retval] LanguageSettings** RHS);
        [id(0x0000070a), propget, hidden, helpcontext(0x0001070a)]
        HRESULT Dummy101([out, retval] IDispatch** RHS);
        [id(0x0000070b), hidden, helpcontext(0x0001070b)]
        HRESULT Dummy12(
                        [in] PivotTable* p1, 
                        [in] PivotTable* p2);
        [id(0x0000070c), propget, helpcontext(0x0001070c)]
        HRESULT AnswerWizard([out, retval] AnswerWizard** RHS);
        [id(0x0000070d), helpcontext(0x0001070d)]
        HRESULT CalculateFull();
        [id(0x000006eb), helpcontext(0x000106eb)]
        HRESULT FindFile(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000070e), propget, helpcontext(0x0001070e)]
        HRESULT CalculationVersion([out, retval] long* RHS);
        [id(0x0000070f), propget, helpcontext(0x0001070f)]
        HRESULT ShowWindowsInTaskbar([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000070f), propput, helpcontext(0x0001070f)]
        HRESULT ShowWindowsInTaskbar([in] VARIANT_BOOL RHS);
        [id(0x00000710), propget, helpcontext(0x00010710)]
        HRESULT FeatureInstall([out, retval] MsoFeatureInstall* RHS);
        [id(0x00000710), propput, helpcontext(0x00010710)]
        HRESULT FeatureInstall([in] MsoFeatureInstall RHS);
        [id(0x0000078c), propget, helpcontext(0x0001078c)]
        HRESULT Ready([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000078d), hidden, helpcontext(0x0001078d)]
        HRESULT Dummy13(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] VARIANT* RHS);
        [id(0x0000078e), propget, helpcontext(0x0001078e)]
        HRESULT FindFormat([out, retval] CellFormat** RHS);
        [id(0x0000078e), propputref, helpcontext(0x0001078e)]
        HRESULT FindFormat([in] CellFormat* RHS);
        [id(0x0000078f), propget, helpcontext(0x0001078f)]
        HRESULT ReplaceFormat([out, retval] CellFormat** RHS);
        [id(0x0000078f), propputref, helpcontext(0x0001078f)]
        HRESULT ReplaceFormat([in] CellFormat* RHS);
        [id(0x00000790), propget, helpcontext(0x00010790)]
        HRESULT UsedObjects([out, retval] UsedObjects** RHS);
        [id(0x00000791), propget, helpcontext(0x00010791)]
        HRESULT CalculationState([out, retval] XlCalculationState* RHS);
        [id(0x00000792), propget, helpcontext(0x00010792)]
        HRESULT CalculationInterruptKey([out, retval] XlCalculationInterruptKey* RHS);
        [id(0x00000792), propput, helpcontext(0x00010792)]
        HRESULT CalculationInterruptKey([in] XlCalculationInterruptKey RHS);
        [id(0x00000793), propget, helpcontext(0x00010793)]
        HRESULT Watches([out, retval] Watches** RHS);
        [id(0x00000794), propget, helpcontext(0x00010794)]
        HRESULT DisplayFunctionToolTips([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000794), propput, helpcontext(0x00010794)]
        HRESULT DisplayFunctionToolTips([in] VARIANT_BOOL RHS);
        [id(0x00000795), propget, helpcontext(0x00010795)]
        HRESULT AutomationSecurity([out, retval] MsoAutomationSecurity* RHS);
        [id(0x00000795), propput, helpcontext(0x00010795)]
        HRESULT AutomationSecurity([in] MsoAutomationSecurity RHS);
        [id(0x00000796), propget, helpcontext(0x00010796)]
        HRESULT FileDialog(
                        [in] MsoFileDialogType fileDialogType, 
                        [out, retval] FileDialog** RHS);
        [id(0x00000798), hidden, helpcontext(0x00010798)]
        HRESULT Dummy14();
        [id(0x00000799), helpcontext(0x00010799)]
        HRESULT CalculateFullRebuild();
        [id(0x0000079a), propget, helpcontext(0x0001079a)]
        HRESULT DisplayPasteOptions([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000079a), propput, helpcontext(0x0001079a)]
        HRESULT DisplayPasteOptions([in] VARIANT_BOOL RHS);
        [id(0x0000079b), propget, helpcontext(0x0001079b)]
        HRESULT DisplayInsertOptions([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000079b), propput, helpcontext(0x0001079b)]
        HRESULT DisplayInsertOptions([in] VARIANT_BOOL RHS);
        [id(0x0000079c), propget, helpcontext(0x0001079c)]
        HRESULT GenerateGetPivotData([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000079c), propput, helpcontext(0x0001079c)]
        HRESULT GenerateGetPivotData([in] VARIANT_BOOL RHS);
        [id(0x0000079d), propget, helpcontext(0x0001079d)]
        HRESULT AutoRecover([out, retval] AutoRecover** RHS);
        [id(0x0000079e), propget, helpcontext(0x0001079e)]
        HRESULT Hwnd([out, retval] long* RHS);
        [id(0x0000079f), propget, helpcontext(0x0001079f)]
        HRESULT Hinstance([out, retval] long* RHS);
        [id(0x000007a0), helpcontext(0x000107a0)]
        HRESULT CheckAbort([in, optional] VARIANT KeepAbort);
        [id(0x000007a2), propget, helpcontext(0x000107a2)]
        HRESULT ErrorCheckingOptions([out, retval] ErrorCheckingOptions** RHS);
        [id(0x000007a3), propget, helpcontext(0x000107a3)]
        HRESULT AutoFormatAsYouTypeReplaceHyperlinks([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007a3), propput, helpcontext(0x000107a3)]
        HRESULT AutoFormatAsYouTypeReplaceHyperlinks([in] VARIANT_BOOL RHS);
        [id(0x000007a4), propget, helpcontext(0x000107a4)]
        HRESULT SmartTagRecognizers([out, retval] SmartTagRecognizers** RHS);
        [id(0x0000061d), propget, helpcontext(0x0001061d)]
        HRESULT NewWorkbook([out, retval] NewFile** RHS);
        [id(0x000007a5), propget, helpcontext(0x000107a5)]
        HRESULT SpellingOptions([out, retval] SpellingOptions** RHS);
        [id(0x000007a6), propget, helpcontext(0x000107a6)]
        HRESULT Speech([out, retval] Speech** RHS);
        [id(0x000007a7), propget, helpcontext(0x000107a7)]
        HRESULT MapPaperSize([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007a7), propput, helpcontext(0x000107a7)]
        HRESULT MapPaperSize([in] VARIANT_BOOL RHS);
        [id(0x000007a8), propget, helpcontext(0x000107a8)]
        HRESULT ShowStartupDialog([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007a8), propput, helpcontext(0x000107a8)]
        HRESULT ShowStartupDialog([in] VARIANT_BOOL RHS);
        [id(0x00000711), propget, helpcontext(0x00010711)]
        HRESULT DecimalSeparator([out, retval] BSTR* RHS);
        [id(0x00000711), propput, helpcontext(0x00010711)]
        HRESULT DecimalSeparator([in] BSTR RHS);
        [id(0x00000712), propget, helpcontext(0x00010712)]
        HRESULT ThousandsSeparator([out, retval] BSTR* RHS);
        [id(0x00000712), propput, helpcontext(0x00010712)]
        HRESULT ThousandsSeparator([in] BSTR RHS);
        [id(0x000007a9), propget, helpcontext(0x000107a9)]
        HRESULT UseSystemSeparators([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007a9), propput, helpcontext(0x000107a9)]
        HRESULT UseSystemSeparators([in] VARIANT_BOOL RHS);
        [id(0x000007aa), propget, helpcontext(0x000107aa)]
        HRESULT ThisCell([out, retval] Range** RHS);
        [id(0x000007ab), propget, helpcontext(0x000107ab)]
        HRESULT RTD([out, retval] RTD** RHS);
        [id(0x000008cb), propget, helpcontext(0x000108cb)]
        HRESULT DisplayDocumentActionTaskPane([out, retval] VARIANT_BOOL* RHS);
        [id(0x000008cb), propput, helpcontext(0x000108cb)]
        HRESULT DisplayDocumentActionTaskPane([in] VARIANT_BOOL RHS);
        [id(0x000008cc), helpcontext(0x000108cc)]
        HRESULT DisplayXMLSourcePane([in, optional] VARIANT XmlMap);
        [id(0x000008ce), propget, helpcontext(0x000108ce)]
        HRESULT ArbitraryXMLSupportAvailable([out, retval] VARIANT_BOOL* RHS);
        [id(0x000008cf), hidden, helpcontext(0x000108cf)]
        HRESULT Support(
                        [in] IDispatch* Object, 
                        [in] long ID, 
                        [in, optional] VARIANT arg, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000945), hidden, helpcontext(0x00010945)]
        HRESULT Dummy20(
                        [in] long grfCompareFunctions, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000947), propget, helpcontext(0x00010947)]
        HRESULT MeasurementUnit([out, retval] long* RHS);
        [id(0x00000947), propput, helpcontext(0x00010947)]
        HRESULT MeasurementUnit([in] long RHS);
        [id(0x00000948), propget, helpcontext(0x00010948)]
        HRESULT ShowSelectionFloaties([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000948), propput, helpcontext(0x00010948)]
        HRESULT ShowSelectionFloaties([in] VARIANT_BOOL RHS);
        [id(0x00000949), propget, helpcontext(0x00010949)]
        HRESULT ShowMenuFloaties([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000949), propput, helpcontext(0x00010949)]
        HRESULT ShowMenuFloaties([in] VARIANT_BOOL RHS);
        [id(0x0000094a), propget, helpcontext(0x0001094a)]
        HRESULT ShowDevTools([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000094a), propput, helpcontext(0x0001094a)]
        HRESULT ShowDevTools([in] VARIANT_BOOL RHS);
        [id(0x0000094b), propget, helpcontext(0x0001094b)]
        HRESULT EnableLivePreview([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000094b), propput, helpcontext(0x0001094b)]
        HRESULT EnableLivePreview([in] VARIANT_BOOL RHS);
        [id(0x0000094c), propget, helpcontext(0x0001094c)]
        HRESULT DisplayDocumentInformationPanel([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000094c), propput, helpcontext(0x0001094c)]
        HRESULT DisplayDocumentInformationPanel([in] VARIANT_BOOL RHS);
        [id(0x0000094d), propget, helpcontext(0x0001094d)]
        HRESULT AlwaysUseClearType([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000094d), propput, helpcontext(0x0001094d)]
        HRESULT AlwaysUseClearType([in] VARIANT_BOOL RHS);
        [id(0x0000094e), propget, helpcontext(0x0001094e)]
        HRESULT WarnOnFunctionNameConflict([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000094e), propput, helpcontext(0x0001094e)]
        HRESULT WarnOnFunctionNameConflict([in] VARIANT_BOOL RHS);
        [id(0x0000094f), propget, helpcontext(0x0001094f)]
        HRESULT FormulaBarHeight([out, retval] long* RHS);
        [id(0x0000094f), propput, helpcontext(0x0001094f)]
        HRESULT FormulaBarHeight([in] long RHS);
        [id(0x00000950), propget, helpcontext(0x00010950)]
        HRESULT DisplayFormulaAutoComplete([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000950), propput, helpcontext(0x00010950)]
        HRESULT DisplayFormulaAutoComplete([in] VARIANT_BOOL RHS);
        [id(0x00000951), propget, helpcontext(0x00010951)]
        HRESULT GenerateTableRefs(
                        [in, lcid] long lcid, 
                        [out, retval] XlGenerateTableRefs* RHS);
        [id(0x00000951), propput, helpcontext(0x00010951)]
        HRESULT GenerateTableRefs(
                        [in, lcid] long lcid, 
                        [in] XlGenerateTableRefs RHS);
        [id(0x00000952), propget, helpcontext(0x00010952)]
        HRESULT Assistance([out, retval] IAssistance** RHS);
        [id(0x00000953), helpcontext(0x00010953)]
        HRESULT CalculateUntilAsyncQueriesDone();
        [id(0x00000954), propget, helpcontext(0x00010954)]
        HRESULT EnableLargeOperationAlert([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000954), propput, helpcontext(0x00010954)]
        HRESULT EnableLargeOperationAlert([in] VARIANT_BOOL RHS);
        [id(0x00000955), propget, helpcontext(0x00010955)]
        HRESULT LargeOperationCellThousandCount([out, retval] long* RHS);
        [id(0x00000955), propput, helpcontext(0x00010955)]
        HRESULT LargeOperationCellThousandCount([in] long RHS);
        [id(0x00000956), propget, helpcontext(0x00010956)]
        HRESULT DeferAsyncQueries([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000956), propput, helpcontext(0x00010956)]
        HRESULT DeferAsyncQueries([in] VARIANT_BOOL RHS);
        [id(0x00000957), propget, helpcontext(0x00010957)]
        HRESULT MultiThreadedCalculation([out, retval] MultiThreadedCalculation** RHS);
        [id(0x00000958), helpcontext(0x00010958)]
        HRESULT SharePointVersion(
                        [in] BSTR bstrUrl, 
                        [out, retval] long* RHS);
        [id(0x0000095a), propget, helpcontext(0x0001095a)]
        HRESULT ActiveEncryptionSession([out, retval] long* RHS);
        [id(0x0000095b), propget, helpcontext(0x0001095b)]
        HRESULT HighQualityModeForGraphics([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000095b), propput, helpcontext(0x0001095b)]
        HRESULT HighQualityModeForGraphics([in] VARIANT_BOOL RHS);
    };


    [
      odl,
      uuid(000208DB-0000-0000-C000-000000000046),
      helpcontext(0x00020022),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Workbooks : IDispatch {
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] Application** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] XlCreator* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000000b5), helpcontext(0x000100b5)]
        HRESULT Add(
                        [in, optional] VARIANT Template, 
                        [in, lcid] long lcid, 
                        [out, retval] Workbook** RHS);
        [id(0x00000115), helpcontext(0x00010115)]
        HRESULT Close([in, lcid] long lcid);
        [id(0x00000076), propget, helpcontext(0x00010076)]
        HRESULT Count([out, retval] long* RHS);
        [id(0x000000aa), propget, helpcontext(0x000100aa)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] Workbook** RHS);
        [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** RHS);
        [id(0x000002aa), hidden, helpcontext(0x000102aa)]
        HRESULT _Open(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT UpdateLinks, 
                        [in, optional] VARIANT ReadOnly, 
                        [in, optional] VARIANT Format, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT IgnoreReadOnlyRecommended, 
                        [in, optional] VARIANT Origin, 
                        [in, optional] VARIANT Delimiter, 
                        [in, optional] VARIANT Editable, 
                        [in, optional] VARIANT Notify, 
                        [in, optional] VARIANT Converter, 
                        [in, optional] VARIANT AddToMru, 
                        [in, lcid] long lcid, 
                        [out, retval] Workbook** RHS);
        [id(0x000002ab), hidden, helpcontext(0x000102ab)]
        HRESULT __OpenText(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT Origin, 
                        [in, optional] VARIANT StartRow, 
                        [in, optional] VARIANT DataType, 
                        [in, optional, defaultvalue(1)] XlTextQualifier TextQualifier, 
                        [in, optional] VARIANT ConsecutiveDelimiter, 
                        [in, optional] VARIANT Tab, 
                        [in, optional] VARIANT Semicolon, 
                        [in, optional] VARIANT Comma, 
                        [in, optional] VARIANT Space, 
                        [in, optional] VARIANT Other, 
                        [in, optional] VARIANT OtherChar, 
                        [in, optional] VARIANT FieldInfo, 
                        [in, optional] VARIANT TextVisualLayout, 
                        [in, lcid] long lcid);
        [id(00000000), propget, helpcontext(0x00010000)]
        HRESULT _Default(
                        [in] VARIANT Index, 
                        [out, retval] Workbook** RHS);
        [id(0x000006ed), hidden, helpcontext(0x000106ed)]
        HRESULT _OpenText(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT Origin, 
                        [in, optional] VARIANT StartRow, 
                        [in, optional] VARIANT DataType, 
                        [in, optional, defaultvalue(1)] XlTextQualifier TextQualifier, 
                        [in, optional] VARIANT ConsecutiveDelimiter, 
                        [in, optional] VARIANT Tab, 
                        [in, optional] VARIANT Semicolon, 
                        [in, optional] VARIANT Comma, 
                        [in, optional] VARIANT Space, 
                        [in, optional] VARIANT Other, 
                        [in, optional] VARIANT OtherChar, 
                        [in, optional] VARIANT FieldInfo, 
                        [in, optional] VARIANT TextVisualLayout, 
                        [in, optional] VARIANT DecimalSeparator, 
                        [in, optional] VARIANT ThousandsSeparator, 
                        [in, lcid] long lcid);
        [id(0x00000783), helpcontext(0x00010783)]
        HRESULT Open(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT UpdateLinks, 
                        [in, optional] VARIANT ReadOnly, 
                        [in, optional] VARIANT Format, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT IgnoreReadOnlyRecommended, 
                        [in, optional] VARIANT Origin, 
                        [in, optional] VARIANT Delimiter, 
                        [in, optional] VARIANT Editable, 
                        [in, optional] VARIANT Notify, 
                        [in, optional] VARIANT Converter, 
                        [in, optional] VARIANT AddToMru, 
                        [in, optional] VARIANT Local, 
                        [in, optional] VARIANT CorruptLoad, 
                        [in, lcid] long lcid, 
                        [out, retval] Workbook** RHS);
        [id(0x00000784), helpcontext(0x00010784)]
        HRESULT OpenText(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT Origin, 
                        [in, optional] VARIANT StartRow, 
                        [in, optional] VARIANT DataType, 
                        [in, optional, defaultvalue(1)] XlTextQualifier TextQualifier, 
                        [in, optional] VARIANT ConsecutiveDelimiter, 
                        [in, optional] VARIANT Tab, 
                        [in, optional] VARIANT Semicolon, 
                        [in, optional] VARIANT Comma, 
                        [in, optional] VARIANT Space, 
                        [in, optional] VARIANT Other, 
                        [in, optional] VARIANT OtherChar, 
                        [in, optional] VARIANT FieldInfo, 
                        [in, optional] VARIANT TextVisualLayout, 
                        [in, optional] VARIANT DecimalSeparator, 
                        [in, optional] VARIANT ThousandsSeparator, 
                        [in, optional] VARIANT TrailingMinusNumbers, 
                        [in, optional] VARIANT Local, 
                        [in, lcid] long lcid);
        [id(0x00000813), helpcontext(0x00010813)]
        HRESULT OpenDatabase(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT CommandText, 
                        [in, optional] VARIANT CommandType, 
                        [in, optional] VARIANT BackgroundQuery, 
                        [in, optional] VARIANT ImportDataAs, 
                        [out, retval] Workbook** RHS);
        [id(0x00000815), helpcontext(0x00010815)]
        HRESULT CheckOut([in] BSTR Filename);
        [id(0x00000816), helpcontext(0x00010816)]
        HRESULT CanCheckOut(
                        [in] BSTR Filename, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000817), hidden, helpcontext(0x00010817)]
        HRESULT _OpenXML(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT Stylesheets, 
                        [out, retval] Workbook** RHS);
        [id(0x000008e8), helpcontext(0x000108e8)]
        HRESULT OpenXML(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT Stylesheets, 
                        [in, optional] VARIANT LoadOption, 
                        [out, retval] Workbook** RHS);
    };

    [
      odl,
      uuid(000208DA-0000-0000-C000-000000000046),
      helpcontext(0x00020021),
      dual,
      oleautomation
    ]
    interface _Workbook : IDispatch {
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] Application** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] XlCreator* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000005a1), propget, hidden, helpcontext(0x000105a1)]
        HRESULT AcceptLabelsInFormulas([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005a1), propput, hidden, helpcontext(0x000105a1)]
        HRESULT AcceptLabelsInFormulas([in] VARIANT_BOOL RHS);
        [id(0x00000130), helpcontext(0x00010130)]
        HRESULT Activate([in, lcid] long lcid);
        [id(0x000000b7), propget, helpcontext(0x000100b7)]
        HRESULT ActiveChart([out, retval] Chart** RHS);
        [id(0x00000133), propget, helpcontext(0x00010133)]
        HRESULT ActiveSheet([out, retval] IDispatch** RHS);
        [id(0x0000023e), propget, hidden, helpcontext(0x0001023e)]
        HRESULT Author(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x0000023e), propput, hidden, helpcontext(0x0001023e)]
        HRESULT Author(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x000005a2), propget, helpcontext(0x000105a2)]
        HRESULT AutoUpdateFrequency([out, retval] long* RHS);
        [id(0x000005a2), propput, helpcontext(0x000105a2)]
        HRESULT AutoUpdateFrequency([in] long RHS);
        [id(0x000005a3), propget, helpcontext(0x000105a3)]
        HRESULT AutoUpdateSaveChanges([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005a3), propput, helpcontext(0x000105a3)]
        HRESULT AutoUpdateSaveChanges([in] VARIANT_BOOL RHS);
        [id(0x000005a4), propget, helpcontext(0x000105a4)]
        HRESULT ChangeHistoryDuration([out, retval] long* RHS);
        [id(0x000005a4), propput, helpcontext(0x000105a4)]
        HRESULT ChangeHistoryDuration([in] long RHS);
        [id(0x00000498), propget, helpcontext(0x00010498)]
        HRESULT BuiltinDocumentProperties([out, retval] IDispatch** RHS);
        [id(0x000003dd), helpcontext(0x000103dd)]
        HRESULT ChangeFileAccess(
                        [in] XlFileAccess Mode, 
                        [in, optional] VARIANT WritePassword, 
                        [in, optional] VARIANT Notify, 
                        [in, lcid] long lcid);
        [id(0x00000322), helpcontext(0x00010322)]
        HRESULT ChangeLink(
                        [in] BSTR Name, 
                        [in] BSTR NewName, 
                        [in, optional, defaultvalue(1)] XlLinkType Type, 
                        [in, lcid] long lcid);
        [id(0x00000079), propget, helpcontext(0x00010079)]
        HRESULT Charts([out, retval] Sheets** RHS);
        [id(0x00000115), helpcontext(0x00010115)]
        HRESULT Close(
                        [in, optional] VARIANT SaveChanges, 
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT RouteWorkbook, 
                        [in, lcid] long lcid);
        [id(0x0000055d), propget, helpcontext(0x0001055d)]
        HRESULT CodeName([out, retval] BSTR* RHS);
        [id(0x80010000), propget, helpcontext(0x80020000)]
        HRESULT _CodeName([out, retval] BSTR* RHS);
        [id(0x80010000), propput, helpcontext(0x80020000)]
        HRESULT _CodeName([in] BSTR RHS);
        [id(0x0000011e), propget, helpcontext(0x0001011e)]
        HRESULT Colors(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x0000011e), propput, helpcontext(0x0001011e)]
        HRESULT Colors(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [id(0x0000059f), propget, helpcontext(0x0001059f)]
        HRESULT CommandBars([out, retval] CommandBars** RHS);
        [id(0x0000023f), propget, hidden, helpcontext(0x0001023f)]
        HRESULT Comments(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x0000023f), propput, hidden, helpcontext(0x0001023f)]
        HRESULT Comments(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000497), propget, helpcontext(0x00010497)]
        HRESULT ConflictResolution([out, retval] XlSaveConflictResolution* RHS);
        [id(0x00000497), propput, helpcontext(0x00010497)]
        HRESULT ConflictResolution([in] XlSaveConflictResolution RHS);
        [id(0x000004a6), propget, helpcontext(0x000104a6)]
        HRESULT Container([out, retval] IDispatch** RHS);
        [id(0x0000011f), propget, helpcontext(0x0001011f)]
        HRESULT CreateBackup(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000499), propget, helpcontext(0x00010499)]
        HRESULT CustomDocumentProperties([out, retval] IDispatch** RHS);
        [id(0x00000193), propget, helpcontext(0x00010193)]
        HRESULT Date1904(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000193), propput, helpcontext(0x00010193)]
        HRESULT Date1904(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000018d), helpcontext(0x0001018d)]
        HRESULT DeleteNumberFormat(
                        [in] BSTR NumberFormat, 
                        [in, lcid] long lcid);
        [id(0x000002fc), propget, hidden, helpcontext(0x000102fc)]
        HRESULT DialogSheets([out, retval] Sheets** RHS);
        [id(0x00000194), propget, helpcontext(0x00010194)]
        HRESULT DisplayDrawingObjects(
                        [in, lcid] long lcid, 
                        [out, retval] XlDisplayDrawingObjects* RHS);
        [id(0x00000194), propput, helpcontext(0x00010194)]
        HRESULT DisplayDrawingObjects(
                        [in, lcid] long lcid, 
                        [in] XlDisplayDrawingObjects RHS);
        [id(0x00000490), helpcontext(0x00010490)]
        HRESULT ExclusiveAccess(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000120), propget, helpcontext(0x00010120)]
        HRESULT FileFormat(
                        [in, lcid] long lcid, 
                        [out, retval] XlFileFormat* RHS);
        [id(0x000003cd), helpcontext(0x000103cd)]
        HRESULT ForwardMailer([in, lcid] long lcid);
        [id(0x00000121), propget, helpcontext(0x00010121)]
        HRESULT FullName(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x000003d0), propget, hidden, helpcontext(0x000103d0)]
        HRESULT HasMailer(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000003d0), propput, hidden, helpcontext(0x000103d0)]
        HRESULT HasMailer(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000122), propget, helpcontext(0x00010122)]
        HRESULT HasPassword(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000003b6), propget, hidden, helpcontext(0x000103b6)]
        HRESULT HasRoutingSlip(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000003b6), propput, hidden, helpcontext(0x000103b6)]
        HRESULT HasRoutingSlip(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x000005a5), propget, helpcontext(0x000105a5)]
        HRESULT IsAddin([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005a5), propput, helpcontext(0x000105a5)]
        HRESULT IsAddin([in] VARIANT_BOOL RHS);
        [id(0x00000241), propget, hidden, helpcontext(0x00010241)]
        HRESULT Keywords(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000241), propput, hidden, helpcontext(0x00010241)]
        HRESULT Keywords(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000327), helpcontext(0x00010327)]
        HRESULT LinkInfo(
                        [in] BSTR Name, 
                        [in] XlLinkInfo LinkInfo, 
                        [in, optional] VARIANT Type, 
                        [in, optional] VARIANT EditionRef, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000328), helpcontext(0x00010328)]
        HRESULT LinkSources(
                        [in, optional] VARIANT Type, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x000003d3), propget, helpcontext(0x000103d3)]
        HRESULT Mailer([out, retval] Mailer** RHS);
        [id(0x000005a6), helpcontext(0x000105a6)]
        HRESULT MergeWorkbook([in] VARIANT Filename);
        [id(0x00000246), propget, hidden, helpcontext(0x00010246)]
        HRESULT Modules([out, retval] Sheets** RHS);
        [id(0x00000491), propget, helpcontext(0x00010491)]
        HRESULT MultiUserEditing(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x000001ba), propget, helpcontext(0x000101ba)]
        HRESULT Names([out, retval] Names** RHS);
        [id(0x00000118), helpcontext(0x00010118)]
        HRESULT NewWindow(
                        [in, lcid] long lcid, 
                        [out, retval] Window** RHS);
        [id(0x0000049a), propget, hidden, helpcontext(0x0001049a)]
        HRESULT OnSave(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x0000049a), propput, hidden, helpcontext(0x0001049a)]
        HRESULT OnSave(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000407), propget, hidden, helpcontext(0x00010407)]
        HRESULT OnSheetActivate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000407), propput, hidden, helpcontext(0x00010407)]
        HRESULT OnSheetActivate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000439), propget, hidden, helpcontext(0x00010439)]
        HRESULT OnSheetDeactivate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000439), propput, hidden, helpcontext(0x00010439)]
        HRESULT OnSheetDeactivate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000323), helpcontext(0x00010323)]
        HRESULT OpenLinks(
                        [in] BSTR Name, 
                        [in, optional] VARIANT ReadOnly, 
                        [in, optional] VARIANT Type, 
                        [in, lcid] long lcid);
        [id(0x00000123), propget, helpcontext(0x00010123)]
        HRESULT Path(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x000005a7), propget, helpcontext(0x000105a7)]
        HRESULT PersonalViewListSettings([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005a7), propput, helpcontext(0x000105a7)]
        HRESULT PersonalViewListSettings([in] VARIANT_BOOL RHS);
        [id(0x000005a8), propget, helpcontext(0x000105a8)]
        HRESULT PersonalViewPrintSettings([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005a8), propput, helpcontext(0x000105a8)]
        HRESULT PersonalViewPrintSettings([in] VARIANT_BOOL RHS);
        [id(0x000005a9), helpcontext(0x000105a9)]
        HRESULT Pivotcaches([out, retval] PivotCaches** RHS);
        [id(0x0000048e), helpcontext(0x0001048e)]
        HRESULT Post(
                        [in, optional] VARIANT DestName, 
                        [in, lcid] long lcid);
        [id(0x00000195), propget, helpcontext(0x00010195)]
        HRESULT PrecisionAsDisplayed(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000195), propput, helpcontext(0x00010195)]
        HRESULT PrecisionAsDisplayed(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000389), hidden, helpcontext(0x00010389)]
        HRESULT __PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, lcid] long lcid);
        [id(0x00000119), helpcontext(0x00010119)]
        HRESULT PrintPreview(
                        [in, optional] VARIANT EnableChanges, 
                        [in, lcid] long lcid);
        [id(0x0000011a), hidden, helpcontext(0x0001011a)]
        HRESULT _Protect(
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT Structure, 
                        [in, optional] VARIANT Windows);
        [id(0x000005aa), hidden, helpcontext(0x000105aa)]
        HRESULT _ProtectSharing(
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT ReadOnlyRecommended, 
                        [in, optional] VARIANT CreateBackup, 
                        [in, optional] VARIANT SharingPassword);
        [id(0x0000024c), propget, helpcontext(0x0001024c)]
        HRESULT ProtectStructure([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000127), propget, helpcontext(0x00010127)]
        HRESULT ProtectWindows([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000128), propget, helpcontext(0x00010128)]
        HRESULT ReadOnly(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000129), propget, hidden, helpcontext(0x00010129)]
        HRESULT _ReadOnlyRecommended(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000005ac), helpcontext(0x000105ac)]
        HRESULT RefreshAll();
        [id(0x000003d1), helpcontext(0x000103d1)]
        HRESULT Reply([in, lcid] long lcid);
        [id(0x000003d2), helpcontext(0x000103d2)]
        HRESULT ReplyAll([in, lcid] long lcid);
        [id(0x000005ad), helpcontext(0x000105ad)]
        HRESULT RemoveUser([in] long Index);
        [id(0x00000494), propget, helpcontext(0x00010494)]
        HRESULT RevisionNumber(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x000003b2), hidden, helpcontext(0x000103b2)]
        HRESULT Route([in, lcid] long lcid);
        [id(0x000003b7), propget, hidden, helpcontext(0x000103b7)]
        HRESULT Routed(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000003b5), propget, hidden, helpcontext(0x000103b5)]
        HRESULT RoutingSlip([out, retval] RoutingSlip** RHS);
        [id(0x0000027a), helpcontext(0x0001027a)]
        HRESULT RunAutoMacros(
                        [in] XlRunAutoMacro Which, 
                        [in, lcid] long lcid);
        [id(0x0000011b), helpcontext(0x0001011b)]
        HRESULT Save([in, lcid] long lcid);
        [id(0x0000011c), hidden, helpcontext(0x0001011c)]
        HRESULT _SaveAs(
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT FileFormat, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT ReadOnlyRecommended, 
                        [in, optional] VARIANT CreateBackup, 
                        [in, optional, defaultvalue(1)] XlSaveAsAccessMode AccessMode, 
                        [in, optional] VARIANT ConflictResolution, 
                        [in, optional] VARIANT AddToMru, 
                        [in, optional] VARIANT TextCodepage, 
                        [in, optional] VARIANT TextVisualLayout, 
                        [in, lcid] long lcid);
        [id(0x000000af), helpcontext(0x000100af)]
        HRESULT SaveCopyAs(
                        [in, optional] VARIANT Filename, 
                        [in, lcid] long lcid);
        [id(0x0000012a), propget, helpcontext(0x0001012a)]
        HRESULT Saved(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000012a), propput, helpcontext(0x0001012a)]
        HRESULT Saved(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000196), propget, helpcontext(0x00010196)]
        HRESULT SaveLinkValues(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000196), propput, helpcontext(0x00010196)]
        HRESULT SaveLinkValues(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x000003b3), helpcontext(0x000103b3)]
        HRESULT SendMail(
                        [in] VARIANT Recipients, 
                        [in, optional] VARIANT Subject, 
                        [in, optional] VARIANT ReturnReceipt, 
                        [in, lcid] long lcid);
        [id(0x000003d4), helpcontext(0x000103d4)]
        HRESULT SendMailer(
                        [in, optional] VARIANT FileFormat, 
                        [in, optional, defaultvalue(-4143)] XlPriority Priority, 
                        [in, lcid] long lcid);
        [id(0x00000329), helpcontext(0x00010329)]
        HRESULT SetLinkOnData(
                        [in] BSTR Name, 
                        [in, optional] VARIANT Procedure, 
                        [in, lcid] long lcid);
        [id(0x000001e5), propget, helpcontext(0x000101e5)]
        HRESULT Sheets([out, retval] Sheets** RHS);
        [id(0x00000493), propget, helpcontext(0x00010493)]
        HRESULT ShowConflictHistory(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000493), propput, helpcontext(0x00010493)]
        HRESULT ShowConflictHistory(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x000001ed), propget, helpcontext(0x000101ed)]
        HRESULT Styles([out, retval] Styles** RHS);
        [id(0x000003b9), propget, hidden, helpcontext(0x000103b9)]
        HRESULT Subject(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x000003b9), propput, hidden, helpcontext(0x000103b9)]
        HRESULT Subject(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x000000c7), propget, hidden, helpcontext(0x000100c7)]
        HRESULT Title(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x000000c7), propput, hidden, helpcontext(0x000100c7)]
        HRESULT Title(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x0000011d), helpcontext(0x0001011d)]
        HRESULT Unprotect(
                        [in, optional] VARIANT Password, 
                        [in, lcid] long lcid);
        [id(0x000005af), helpcontext(0x000105af)]
        HRESULT UnprotectSharing([in, optional] VARIANT SharingPassword);
        [id(0x000003e3), helpcontext(0x000103e3)]
        HRESULT UpdateFromFile([in, lcid] long lcid);
        [id(0x00000324), helpcontext(0x00010324)]
        HRESULT UpdateLink(
                        [in, optional] VARIANT Name, 
                        [in, optional] VARIANT Type, 
                        [in, lcid] long lcid);
        [id(0x0000019b), propget, helpcontext(0x0001019b)]
        HRESULT UpdateRemoteReferences(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000019b), propput, helpcontext(0x0001019b)]
        HRESULT UpdateRemoteReferences(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x000004ba), propget, hidden, helpcontext(0x000104ba)]
        HRESULT UserControl([out, retval] VARIANT_BOOL* RHS);
        [id(0x000004ba), propput, hidden, helpcontext(0x000104ba)]
        HRESULT UserControl([in] VARIANT_BOOL RHS);
        [id(0x00000495), propget, helpcontext(0x00010495)]
        HRESULT UserStatus(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x000005b0), propget, helpcontext(0x000105b0)]
        HRESULT CustomViews([out, retval] CustomViews** RHS);
        [id(0x000001ae), propget, helpcontext(0x000101ae)]
        HRESULT Windows([out, retval] Windows** RHS);
        [id(0x000001ee), propget, helpcontext(0x000101ee)]
        HRESULT Worksheets([out, retval] Sheets** RHS);
        [id(0x0000012b), propget, helpcontext(0x0001012b)]
        HRESULT WriteReserved(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000012c), propget, helpcontext(0x0001012c)]
        HRESULT WriteReservedBy(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000245), propget, helpcontext(0x00010245)]
        HRESULT Excel4IntlMacroSheets([out, retval] Sheets** RHS);
        [id(0x00000243), propget, helpcontext(0x00010243)]
        HRESULT Excel4MacroSheets([out, retval] Sheets** RHS);
        [id(0x000005b1), propget, helpcontext(0x000105b1)]
        HRESULT TemplateRemoveExtData([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005b1), propput, helpcontext(0x000105b1)]
        HRESULT TemplateRemoveExtData([in] VARIANT_BOOL RHS);
        [id(0x000005b2), helpcontext(0x000105b2)]
        HRESULT HighlightChangesOptions(
                        [in, optional] VARIANT When, 
                        [in, optional] VARIANT Who, 
                        [in, optional] VARIANT Where);
        [id(0x000005b5), propget, helpcontext(0x000105b5)]
        HRESULT HighlightChangesOnScreen([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005b5), propput, helpcontext(0x000105b5)]
        HRESULT HighlightChangesOnScreen([in] VARIANT_BOOL RHS);
        [id(0x000005b6), propget, helpcontext(0x000105b6)]
        HRESULT KeepChangeHistory([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005b6), propput, helpcontext(0x000105b6)]
        HRESULT KeepChangeHistory([in] VARIANT_BOOL RHS);
        [id(0x000005b7), propget, helpcontext(0x000105b7)]
        HRESULT ListChangesOnNewSheet([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005b7), propput, helpcontext(0x000105b7)]
        HRESULT ListChangesOnNewSheet([in] VARIANT_BOOL RHS);
        [id(0x000005b8), helpcontext(0x000105b8)]
        HRESULT PurgeChangeHistoryNow(
                        [in] long Days, 
                        [in, optional] VARIANT SharingPassword);
        [id(0x000005ba), helpcontext(0x000105ba)]
        HRESULT AcceptAllChanges(
                        [in, optional] VARIANT When, 
                        [in, optional] VARIANT Who, 
                        [in, optional] VARIANT Where);
        [id(0x000005bb), helpcontext(0x000105bb)]
        HRESULT RejectAllChanges(
                        [in, optional] VARIANT When, 
                        [in, optional] VARIANT Who, 
                        [in, optional] VARIANT Where);
        [id(0x000002ac), hidden, helpcontext(0x000102ac)]
        HRESULT PivotTableWizard(
                        [in, optional] VARIANT SourceType, 
                        [in, optional] VARIANT SourceData, 
                        [in, optional] VARIANT TableDestination, 
                        [in, optional] VARIANT TableName, 
                        [in, optional] VARIANT RowGrand, 
                        [in, optional] VARIANT ColumnGrand, 
                        [in, optional] VARIANT SaveData, 
                        [in, optional] VARIANT HasAutoFormat, 
                        [in, optional] VARIANT AutoPage, 
                        [in, optional] VARIANT Reserved, 
                        [in, optional] VARIANT BackgroundQuery, 
                        [in, optional] VARIANT OptimizeCache, 
                        [in, optional] VARIANT PageFieldOrder, 
                        [in, optional] VARIANT PageFieldWrapCount, 
                        [in, optional] VARIANT ReadData, 
                        [in, optional] VARIANT Connection, 
                        [in, lcid] long lcid);
        [id(0x000005bc), helpcontext(0x000105bc)]
        HRESULT ResetColors();
        [id(0x000005bd), propget, helpcontext(0x000105bd)]
        HRESULT VBProject([out, retval] IDispatch** /* VBProject** */ RHS);
        [id(0x000005be), helpcontext(0x000105be)]
        HRESULT FollowHyperlink(
                        [in] BSTR Address, 
                        [in, optional] VARIANT SubAddress, 
                        [in, optional] VARIANT NewWindow, 
                        [in, optional] VARIANT AddHistory, 
                        [in, optional] VARIANT ExtraInfo, 
                        [in, optional] VARIANT Method, 
                        [in, optional] VARIANT HeaderInfo);
        [id(0x000005c4), helpcontext(0x000105c4)]
        HRESULT AddToFavorites();
        [id(0x000006e9), propget, helpcontext(0x000106e9)]
        HRESULT IsInplace([out, retval] VARIANT_BOOL* RHS);
        [id(0x000006ec), hidden, helpcontext(0x000106ec)]
        HRESULT _PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, lcid] long lcid);
        [id(0x0000071a), helpcontext(0x0001071a)]
        HRESULT WebPagePreview();
        [id(0x0000071b), propget, helpcontext(0x0001071b)]
        HRESULT PublishObjects([out, retval] PublishObjects** RHS);
        [id(0x0000071c), propget, helpcontext(0x0001071c)]
        HRESULT WebOptions([out, retval] WebOptions** RHS);
        [id(0x0000071d), helpcontext(0x0001071d)]
        HRESULT ReloadAs([in] MsoEncoding Encoding);
        [id(0x0000071f), propget, hidden, helpcontext(0x0001071f)]
        HRESULT HTMLProject([out, retval] HTMLProject** RHS);
        [id(0x00000720), propget, helpcontext(0x00010720)]
        HRESULT EnvelopeVisible([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000720), propput, helpcontext(0x00010720)]
        HRESULT EnvelopeVisible([in] VARIANT_BOOL RHS);
        [id(0x0000070e), propget, helpcontext(0x0001070e)]
        HRESULT CalculationVersion([out, retval] long* RHS);
        [id(0x000007fc), hidden, helpcontext(0x000107fc)]
        HRESULT Dummy17([in] long calcid);
        [id(0x00000722), hidden, helpcontext(0x00010722)]
        HRESULT sblt([in] BSTR s);
        [id(0x00000724), propget, helpcontext(0x00010724)]
        HRESULT VBASigned([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007fe), propget, helpcontext(0x000107fe)]
        HRESULT ShowPivotTableFieldList([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007fe), propput, helpcontext(0x000107fe)]
        HRESULT ShowPivotTableFieldList([in] VARIANT_BOOL RHS);
        [id(0x00000360), propget, helpcontext(0x00010360)]
        HRESULT UpdateLinks([out, retval] XlUpdateLinks* RHS);
        [id(0x00000360), propput, helpcontext(0x00010360)]
        HRESULT UpdateLinks([in] XlUpdateLinks RHS);
        [id(0x000007ff), helpcontext(0x000107ff)]
        HRESULT BreakLink(
                        [in] BSTR Name, 
                        [in] XlLinkType Type);
        [id(0x00000800), hidden, helpcontext(0x00010800)]
        HRESULT Dummy16();
        [id(0x00000785), helpcontext(0x00010785)]
        HRESULT SaveAs(
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT FileFormat, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT ReadOnlyRecommended, 
                        [in, optional] VARIANT CreateBackup, 
                        [in, optional, defaultvalue(1)] XlSaveAsAccessMode AccessMode, 
                        [in, optional] VARIANT ConflictResolution, 
                        [in, optional] VARIANT AddToMru, 
                        [in, optional] VARIANT TextCodepage, 
                        [in, optional] VARIANT TextVisualLayout, 
                        [in, optional] VARIANT Local, 
                        [in, lcid] long lcid);
        [id(0x00000801), propget, helpcontext(0x00010801)]
        HRESULT EnableAutoRecover([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000801), propput, helpcontext(0x00010801)]
        HRESULT EnableAutoRecover([in] VARIANT_BOOL RHS);
        [id(0x00000802), propget, helpcontext(0x00010802)]
        HRESULT RemovePersonalInformation([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000802), propput, helpcontext(0x00010802)]
        HRESULT RemovePersonalInformation([in] VARIANT_BOOL RHS);
        [id(0x00000787), propget, helpcontext(0x00010787)]
        HRESULT FullNameURLEncoded(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000803), helpcontext(0x00010803)]
        HRESULT CheckIn(
                        [in, optional] VARIANT SaveChanges, 
                        [in, optional] VARIANT Comments, 
                        [in, optional] VARIANT MakePublic);
        [id(0x00000805), helpcontext(0x00010805)]
        HRESULT CanCheckIn([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000806), helpcontext(0x00010806)]
        HRESULT SendForReview(
                        [in, optional] VARIANT Recipients, 
                        [in, optional] VARIANT Subject, 
                        [in, optional] VARIANT ShowMessage, 
                        [in, optional] VARIANT IncludeAttachment);
        [id(0x00000809), helpcontext(0x00010809)]
        HRESULT ReplyWithChanges([in, optional] VARIANT ShowMessage);
        [id(0x0000080a), helpcontext(0x0001080a)]
        HRESULT EndReview();
        [id(0x000001ad), propget, helpcontext(0x000101ad)]
        HRESULT Password([out, retval] BSTR* RHS);
        [id(0x000001ad), propput, helpcontext(0x000101ad)]
        HRESULT Password([in] BSTR RHS);
        [id(0x00000468), propget, helpcontext(0x00010468)]
        HRESULT WritePassword([out, retval] BSTR* RHS);
        [id(0x00000468), propput, helpcontext(0x00010468)]
        HRESULT WritePassword([in] BSTR RHS);
        [id(0x0000080b), propget, helpcontext(0x0001080b)]
        HRESULT PasswordEncryptionProvider([out, retval] BSTR* RHS);
        [id(0x0000080c), propget, helpcontext(0x0001080c)]
        HRESULT PasswordEncryptionAlgorithm([out, retval] BSTR* RHS);
        [id(0x0000080d), propget, helpcontext(0x0001080d)]
        HRESULT PasswordEncryptionKeyLength([out, retval] long* RHS);
        [id(0x0000080e), helpcontext(0x0001080e)]
        HRESULT SetPasswordEncryptionOptions(
                        [in, optional] VARIANT PasswordEncryptionProvider, 
                        [in, optional] VARIANT PasswordEncryptionAlgorithm, 
                        [in, optional] VARIANT PasswordEncryptionKeyLength, 
                        [in, optional] VARIANT PasswordEncryptionFileProperties);
        [id(0x0000080f), propget, helpcontext(0x0001080f)]
        HRESULT PasswordEncryptionFileProperties([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007d5), propget, helpcontext(0x000107d5)]
        HRESULT ReadOnlyRecommended([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007d5), propput, helpcontext(0x000107d5)]
        HRESULT ReadOnlyRecommended([in] VARIANT_BOOL RHS);
        [id(0x000007ed), helpcontext(0x000107ed)]
        HRESULT Protect(
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT Structure, 
                        [in, optional] VARIANT Windows);
        [id(0x00000810), propget, helpcontext(0x00010810)]
        HRESULT SmartTagOptions([out, retval] SmartTagOptions** RHS);
        [id(0x00000811), helpcontext(0x00010811)]
        HRESULT RecheckSmartTags();
        [id(0x000008d8), propget, helpcontext(0x000108d8)]
        HRESULT Permission([out, retval] Permission** RHS);
        [id(0x000008d9), propget, helpcontext(0x000108d9)]
        HRESULT SharedWorkspace([out, retval] SharedWorkspace** RHS);
        [id(0x000008da), propget, helpcontext(0x000108da)]
        HRESULT Sync([out, retval] Sync** RHS);
        [id(0x000008db), helpcontext(0x000108db)]
        HRESULT SendFaxOverInternet(
                        [in, optional] VARIANT Recipients, 
                        [in, optional] VARIANT Subject, 
                        [in, optional] VARIANT ShowMessage);
        [id(0x000008dc), propget, helpcontext(0x000108dc)]
        HRESULT XmlNamespaces([out, retval] XmlNamespaces** RHS);
        [id(0x000008dd), propget, helpcontext(0x000108dd)]
        HRESULT XmlMaps([out, retval] XmlMaps** RHS);
        [id(0x000008de), helpcontext(0x000108de)]
        HRESULT XmlImport(
                        [in] BSTR Url, 
                        [out] XmlMap** ImportMap, 
                        [in, optional] VARIANT Overwrite, 
                        [in, optional] VARIANT Destination, 
                        [out, retval] XlXmlImportResult* RHS);
        [id(0x000008e1), propget, helpcontext(0x000108e1)]
        HRESULT SmartDocument([out, retval] SmartDocument** RHS);
        [id(0x000008e2), propget, helpcontext(0x000108e2)]
        HRESULT DocumentLibraryVersions([out, retval] DocumentLibraryVersions** RHS);
        [id(0x000008e3), propget, helpcontext(0x000108e3)]
        HRESULT InactiveListBorderVisible([out, retval] VARIANT_BOOL* RHS);
        [id(0x000008e3), propput, helpcontext(0x000108e3)]
        HRESULT InactiveListBorderVisible([in] VARIANT_BOOL RHS);
        [id(0x000008e4), propget, helpcontext(0x000108e4)]
        HRESULT DisplayInkComments([out, retval] VARIANT_BOOL* RHS);
        [id(0x000008e4), propput, helpcontext(0x000108e4)]
        HRESULT DisplayInkComments([in] VARIANT_BOOL RHS);
        [id(0x000008e5), helpcontext(0x000108e5)]
        HRESULT XmlImportXml(
                        [in] BSTR Data, 
                        [out] XmlMap** ImportMap, 
                        [in, optional] VARIANT Overwrite, 
                        [in, optional] VARIANT Destination, 
                        [out, retval] XlXmlImportResult* RHS);
        [id(0x000008e6), helpcontext(0x000108e6)]
        HRESULT SaveAsXMLData(
                        [in] BSTR Filename, 
                        [in] XmlMap* Map);
        [id(0x000008e7), helpcontext(0x000108e7)]
        HRESULT ToggleFormsDesign();
        [id(0x000009d0), propget, helpcontext(0x000109d0)]
        HRESULT ContentTypeProperties([out, retval] MetaProperties** RHS);
        [id(0x000009d1), propget, helpcontext(0x000109d1)]
        HRESULT Connections([out, retval] Connections** RHS);
        [id(0x000009d2), helpcontext(0x000109d2)]
        HRESULT RemoveDocumentInformation([in] XlRemoveDocInfoType RemoveDocInfoType);
        [id(0x000009d4), propget, helpcontext(0x000109d4)]
        HRESULT Signatures([out, retval] SignatureSet** RHS);
        [id(0x000009d5), helpcontext(0x000109d5)]
        HRESULT CheckInWithVersion(
                        [in, optional] VARIANT SaveChanges, 
                        [in, optional] VARIANT Comments, 
                        [in, optional] VARIANT MakePublic, 
                        [in, optional] VARIANT VersionType);
        [id(0x000009d7), propget, helpcontext(0x000109d7)]
        HRESULT ServerPolicy([out, retval] ServerPolicy** RHS);
        [id(0x000009d8), helpcontext(0x000109d8)]
        HRESULT LockServerFile();
        [id(0x000009d9), propget, helpcontext(0x000109d9)]
        HRESULT DocumentInspectors([out, retval] DocumentInspectors** RHS);
        [id(0x000009da), helpcontext(0x000109da)]
        HRESULT GetWorkflowTasks([out, retval] WorkflowTasks** RHS);
        [id(0x000009db), helpcontext(0x000109db)]
        HRESULT GetWorkflowTemplates([out, retval] WorkflowTemplates** RHS);
        [id(0x00000939), helpcontext(0x00010939)]
        HRESULT PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, optional] VARIANT IgnorePrintAreas, 
                        [in, lcid] long lcid);
        [id(0x000009dc), propget, helpcontext(0x000109dc)]
        HRESULT ServerViewableItems([out, retval] ServerViewableItems** RHS);
        [id(0x000009dd), propget, helpcontext(0x000109dd)]
        HRESULT TableStyles([out, retval] TableStyles** RHS);
        [id(0x000009de), propget, helpcontext(0x000109de)]
        HRESULT DefaultTableStyle([out, retval] VARIANT* RHS);
        [id(0x000009de), propput, helpcontext(0x000109de)]
        HRESULT DefaultTableStyle([in] VARIANT RHS);
        [id(0x000009df), propget, helpcontext(0x000109df)]
        HRESULT DefaultPivotTableStyle([out, retval] VARIANT* RHS);
        [id(0x000009df), propput, helpcontext(0x000109df)]
        HRESULT DefaultPivotTableStyle([in] VARIANT RHS);
        [id(0x000009e0), propget, helpcontext(0x000109e0)]
        HRESULT CheckCompatibility([out, retval] VARIANT_BOOL* RHS);
        [id(0x000009e0), propput, helpcontext(0x000109e0)]
        HRESULT CheckCompatibility([in] VARIANT_BOOL RHS);
        [id(0x000009e1), propget, helpcontext(0x000109e1)]
        HRESULT HasVBProject([out, retval] VARIANT_BOOL* RHS);
        [id(0x000009e2), propget, helpcontext(0x000109e2)]
        HRESULT CustomXMLParts([out, retval] CustomXMLParts** RHS);
        [id(0x000009e3), propget, helpcontext(0x000109e3)]
        HRESULT Final([out, retval] VARIANT_BOOL* RHS);
        [id(0x000009e3), propput, helpcontext(0x000109e3)]
        HRESULT Final([in] VARIANT_BOOL RHS);
        [id(0x000009e4), propget, helpcontext(0x000109e4)]
        HRESULT Research([out, retval] Research** RHS);
        [id(0x000009e5), propget, helpcontext(0x000109e5)]
        HRESULT Theme([out, retval] OfficeTheme** RHS);
        [id(0x000009e6), helpcontext(0x000109e6)]
        HRESULT ApplyTheme([in] BSTR Filename);
        [id(0x000009e7), propget, helpcontext(0x000109e7)]
        HRESULT Excel8CompatibilityMode([out, retval] VARIANT_BOOL* RHS);
        [id(0x000009e8), propget, helpcontext(0x000109e8)]
        HRESULT ConnectionsDisabled([out, retval] VARIANT_BOOL* RHS);
        [id(0x000009e9), helpcontext(0x000109e9)]
        HRESULT EnableConnections();
        [id(0x000009ea), propget, helpcontext(0x000109ea)]
        HRESULT ShowPivotChartActiveFields([out, retval] VARIANT_BOOL* RHS);
        [id(0x000009ea), propput, helpcontext(0x000109ea)]
        HRESULT ShowPivotChartActiveFields([in] VARIANT_BOOL RHS);
        [id(0x000009bd), helpcontext(0x000109bd)]
        HRESULT ExportAsFixedFormat(
                        [in] XlFixedFormatType Type, 
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT Quality, 
                        [in, optional] VARIANT IncludeDocProperties, 
                        [in, optional] VARIANT IgnorePrintAreas, 
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT OpenAfterPublish, 
                        [in, optional] VARIANT FixedFormatExtClassPtr);
        [id(0x000009eb), propget, helpcontext(0x000109eb)]
        HRESULT IconSets([out, retval] IconSets** RHS);
        [id(0x000009ec), propget, helpcontext(0x000109ec)]
        HRESULT EncryptionProvider([out, retval] BSTR* RHS);
        [id(0x000009ec), propput, helpcontext(0x000109ec)]
        HRESULT EncryptionProvider([in] BSTR RHS);
        [id(0x000009ed), propget, helpcontext(0x000109ed)]
        HRESULT DoNotPromptForConvert([out, retval] VARIANT_BOOL* RHS);
        [id(0x000009ed), propput, helpcontext(0x000109ed)]
        HRESULT DoNotPromptForConvert([in] VARIANT_BOOL RHS);
        [id(0x000009ee), propget, helpcontext(0x000109ee)]
        HRESULT ForceFullCalculation([out, retval] VARIANT_BOOL* RHS);
        [id(0x000009ee), propput, helpcontext(0x000109ee)]
        HRESULT ForceFullCalculation([in] VARIANT_BOOL RHS);
        [id(0x000009ef), helpcontext(0x000109ef)]
        HRESULT ProtectSharing(
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT ReadOnlyRecommended, 
                        [in, optional] VARIANT CreateBackup, 
                        [in, optional] VARIANT SharingPassword, 
                        [in, optional] VARIANT FileFormat);
    };

    [
      odl,
      uuid(00024412-0001-0000-C000-000000000046),
      helpcontext(0x000200a8),
      hidden
    ]
    interface IWorkbookEvents : IDispatch {
        [helpcontext(0x00010783)]
        HRESULT _stdcall Open();
        [helpcontext(0x00010130)]
        HRESULT _stdcall Activate();
        [helpcontext(0x000105fa)]
        HRESULT _stdcall Deactivate();
        [helpcontext(0x0001060a)]
        HRESULT _stdcall BeforeClose([in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x0001060b)]
        HRESULT _stdcall BeforeSave(
                        [in] VARIANT_BOOL SaveAsUI, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x0001060d)]
        HRESULT _stdcall BeforePrint([in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x0001060e)]
        HRESULT _stdcall NewSheet([in] IDispatch* Sh);
        [helpcontext(0x00010610)]
        HRESULT _stdcall AddinInstall();
        [helpcontext(0x00010611)]
        HRESULT _stdcall AddinUninstall();
        [helpcontext(0x00010612)]
        HRESULT _stdcall WindowResize([in] Window* Wn);
        [helpcontext(0x00010614)]
        HRESULT _stdcall WindowActivate([in] Window* Wn);
        [helpcontext(0x00010615)]
        HRESULT _stdcall WindowDeactivate([in] Window* Wn);
        [helpcontext(0x00010616)]
        HRESULT _stdcall SheetSelectionChange(
                        [in] IDispatch* Sh, 
                        [in] Range* Target);
        [helpcontext(0x00010617)]
        HRESULT _stdcall SheetBeforeDoubleClick(
                        [in] IDispatch* Sh, 
                        [in] Range* Target, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x00010618)]
        HRESULT _stdcall SheetBeforeRightClick(
                        [in] IDispatch* Sh, 
                        [in] Range* Target, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x00010619)]
        HRESULT _stdcall SheetActivate([in] IDispatch* Sh);
        [helpcontext(0x0001061a)]
        HRESULT _stdcall SheetDeactivate([in] IDispatch* Sh);
        [helpcontext(0x0001061b)]
        HRESULT _stdcall SheetCalculate([in] IDispatch* Sh);
        [helpcontext(0x0001061c)]
        HRESULT _stdcall SheetChange(
                        [in] IDispatch* Sh, 
                        [in] Range* Target);
        [helpcontext(0x0001073e)]
        HRESULT _stdcall SheetFollowHyperlink(
                        [in] IDispatch* Sh, 
                        [in] Hyperlink* Target);
        [helpcontext(0x0001086d)]
        HRESULT _stdcall SheetPivotTableUpdate(
                        [in] IDispatch* Sh, 
                        [in] PivotTable* Target);
        [helpcontext(0x0001086e)]
        HRESULT _stdcall PivotTableCloseConnection([in] PivotTable* Target);
        [helpcontext(0x0001086f)]
        HRESULT _stdcall PivotTableOpenConnection([in] PivotTable* Target);
        [helpcontext(0x000108da)]
        HRESULT _stdcall Sync([in] MsoSyncEventType SyncEventType);
        [helpcontext(0x000108eb)]
        HRESULT _stdcall BeforeXmlImport(
                        [in] XmlMap* Map, 
                        [in] BSTR Url, 
                        [in] VARIANT_BOOL IsRefresh, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x000108ed)]
        HRESULT _stdcall AfterXmlImport(
                        [in] XmlMap* Map, 
                        [in] VARIANT_BOOL IsRefresh, 
                        [in] XlXmlImportResult Result);
        [helpcontext(0x000108ef)]
        HRESULT _stdcall BeforeXmlExport(
                        [in] XmlMap* Map, 
                        [in] BSTR Url, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x000108f0)]
        HRESULT _stdcall AfterXmlExport(
                        [in] XmlMap* Map, 
                        [in] BSTR Url, 
                        [in] XlXmlExportResult Result);
        [helpcontext(0x00010a32)]
        HRESULT _stdcall RowsetComplete(
                        [in] BSTR Description, 
                        [in] BSTR Sheet, 
                        [in] VARIANT_BOOL Success);
    };

    [
      odl,
      uuid(000208D7-0000-0000-C000-000000000046),
      helpcontext(0x0002000c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Sheets : IDispatch {
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] Application** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] XlCreator* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000000b5), helpcontext(0x000100b5)]
        HRESULT Add(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, optional] VARIANT Count, 
                        [in, optional] VARIANT Type, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000227), helpcontext(0x00010227)]
        HRESULT Copy(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [id(0x00000076), propget, helpcontext(0x00010076)]
        HRESULT Count([out, retval] long* RHS);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([in, lcid] long lcid);
        [id(0x000001d5), helpcontext(0x000101d5)]
        HRESULT FillAcrossSheets(
                        [in] Range* Range, 
                        [in, optional, defaultvalue(-4104)] XlFillWith Type, 
                        [in, lcid] long lcid);
        [id(0x000000aa), propget, helpcontext(0x000100aa)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [id(0x0000027d), helpcontext(0x0001027d)]
        HRESULT Move(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** RHS);
        [id(0x00000389), hidden, helpcontext(0x00010389)]
        HRESULT __PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, lcid] long lcid);
        [id(0x00000119), helpcontext(0x00010119)]
        HRESULT PrintPreview(
                        [in, optional] VARIANT EnableChanges, 
                        [in, lcid] long lcid);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select(
                        [in, optional] VARIANT Replace, 
                        [in, lcid] long lcid);
        [id(0x0000058a), propget, helpcontext(0x0001058a)]
        HRESULT HPageBreaks([out, retval] HPageBreaks** RHS);
        [id(0x0000058b), propget, helpcontext(0x0001058b)]
        HRESULT VPageBreaks([out, retval] VPageBreaks** RHS);
        [id(0x0000022e), propget, helpcontext(0x0001022e)]
        HRESULT Visible(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x0000022e), propput, helpcontext(0x0001022e)]
        HRESULT Visible(
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [id(00000000), propget, helpcontext(0x00010000)]
        HRESULT _Default(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [id(0x000006ec), hidden, helpcontext(0x000106ec)]
        HRESULT _PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, lcid] long lcid);
        [id(0x00000939), helpcontext(0x00010939)]
        HRESULT PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, optional] VARIANT IgnorePrintAreas, 
                        [in, lcid] long lcid);
    };

    [
      odl,
      uuid(000208B8-0001-0000-C000-000000000046),
      helpcontext(0x00020078),
      hidden
    ]
    interface INames : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in, optional] VARIANT Name, 
                        [in, optional] VARIANT RefersTo, 
                        [in, optional] VARIANT Visible, 
                        [in, optional] VARIANT MacroType, 
                        [in, optional] VARIANT ShortcutKey, 
                        [in, optional] VARIANT Category, 
                        [in, optional] VARIANT NameLocal, 
                        [in, optional] VARIANT RefersToLocal, 
                        [in, optional] VARIANT CategoryLocal, 
                        [in, optional] VARIANT RefersToR1C1, 
                        [in, optional] VARIANT RefersToR1C1Local, 
                        [out, retval] Name** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in, optional] VARIANT Index, 
                        [in, optional] VARIANT IndexLocal, 
                        [in, optional] VARIANT RefersTo, 
                        [in, lcid] long lcid, 
                        [out, retval] Name** RHS);
        [helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in, optional] VARIANT Index, 
                        [in, optional] VARIANT IndexLocal, 
                        [in, optional] VARIANT RefersTo, 
                        [in, lcid] long lcid, 
                        [out, retval] Name** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(000208B9-0001-0000-C000-000000000046),
      helpcontext(0x00020079),
      hidden
    ]
    interface IName : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x000103a6)]
        HRESULT _stdcall Category(
                        [in, lcid] long lcidIn, 
                        [out, retval] BSTR* RHS);
        [propput, helpcontext(0x000103a6)]
        HRESULT _stdcall Category(
                        [in, lcid] long lcidIn, 
                        [in] BSTR RHS);
        [propget, helpcontext(0x000103a7)]
        HRESULT _stdcall CategoryLocal([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000103a7)]
        HRESULT _stdcall CategoryLocal([in] BSTR RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [propget, helpcontext(0x000103a8)]
        HRESULT _stdcall MacroType([out, retval] XlXLMMacroType* RHS);
        [propput, helpcontext(0x000103a8)]
        HRESULT _stdcall MacroType([in] XlXLMMacroType RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name(
                        [in, lcid] long lcidIn, 
                        [out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name(
                        [in, lcid] long lcidIn, 
                        [in] BSTR RHS);
        [propget, helpcontext(0x000103aa)]
        HRESULT _stdcall RefersTo(
                        [in, lcid] long lcidIn, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103aa)]
        HRESULT _stdcall RefersTo(
                        [in, lcid] long lcidIn, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x00010255)]
        HRESULT _stdcall ShortcutKey([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010255)]
        HRESULT _stdcall ShortcutKey([in] BSTR RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] BSTR RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000103a9)]
        HRESULT _stdcall NameLocal([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000103a9)]
        HRESULT _stdcall NameLocal([in] BSTR RHS);
        [propget, helpcontext(0x000103ab)]
        HRESULT _stdcall RefersToLocal([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103ab)]
        HRESULT _stdcall RefersToLocal([in] VARIANT RHS);
        [propget, helpcontext(0x000103ac)]
        HRESULT _stdcall RefersToR1C1(
                        [in, lcid] long lcidIn, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103ac)]
        HRESULT _stdcall RefersToR1C1(
                        [in, lcid] long lcidIn, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x000103ad)]
        HRESULT _stdcall RefersToR1C1Local([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103ad)]
        HRESULT _stdcall RefersToR1C1Local([in] VARIANT RHS);
        [propget, helpcontext(0x00010488)]
        HRESULT _stdcall RefersToRange([out, retval] Range** RHS);
        [propget, helpcontext(0x0001038e)]
        HRESULT _stdcall Comment([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001038e)]
        HRESULT _stdcall Comment([in] BSTR RHS);
        [propget, helpcontext(0x00010a2f)]
        HRESULT _stdcall WorkbookParameter([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a2f)]
        HRESULT _stdcall WorkbookParameter([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a30)]
        HRESULT _stdcall ValidWorkbookParameter([out, retval] VARIANT_BOOL* RHS);
    };

    [
      odl,
      uuid(00020855-0001-0000-C000-000000000046),
      helpcontext(0x00020015),
      hidden
    ]
    interface IBorders : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010063)]
        HRESULT _stdcall Color([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010063)]
        HRESULT _stdcall Color([in] VARIANT RHS);
        [propget, helpcontext(0x00010061)]
        HRESULT _stdcall ColorIndex([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010061)]
        HRESULT _stdcall ColorIndex([in] VARIANT RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] XlBordersIndex Index, 
                        [out, retval] Border** RHS);
        [propget, helpcontext(0x00010077)]
        HRESULT _stdcall LineStyle([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010077)]
        HRESULT _stdcall LineStyle([in] VARIANT RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] VARIANT RHS);
        [propget, helpcontext(0x00010078)]
        HRESULT _stdcall Weight([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010078)]
        HRESULT _stdcall Weight([in] VARIANT RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] XlBordersIndex Index, 
                        [out, retval] Border** RHS);
        [propget, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([in] VARIANT RHS);
        [propget, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([in] VARIANT RHS);
    };

    [
      odl,
      uuid(00020854-0001-0000-C000-000000000046),
      helpcontext(0x00020014),
      hidden
    ]
    interface IBorder : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010063)]
        HRESULT _stdcall Color([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010063)]
        HRESULT _stdcall Color([in] VARIANT RHS);
        [propget, helpcontext(0x00010061)]
        HRESULT _stdcall ColorIndex([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010061)]
        HRESULT _stdcall ColorIndex([in] VARIANT RHS);
        [propget, helpcontext(0x00010077)]
        HRESULT _stdcall LineStyle([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010077)]
        HRESULT _stdcall LineStyle([in] VARIANT RHS);
        [propget, helpcontext(0x00010078)]
        HRESULT _stdcall Weight([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010078)]
        HRESULT _stdcall Weight([in] VARIANT RHS);
        [propget, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([in] VARIANT RHS);
        [propget, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([in] VARIANT RHS);
    };

    [
      odl,
      uuid(00020870-0001-0000-C000-000000000046),
      helpcontext(0x00020030),
      hidden
    ]
    interface IInterior : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010063)]
        HRESULT _stdcall Color([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010063)]
        HRESULT _stdcall Color([in] VARIANT RHS);
        [propget, helpcontext(0x00010061)]
        HRESULT _stdcall ColorIndex([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010061)]
        HRESULT _stdcall ColorIndex([in] VARIANT RHS);
        [propget, helpcontext(0x00010084)]
        HRESULT _stdcall InvertIfNegative([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010084)]
        HRESULT _stdcall InvertIfNegative([in] VARIANT RHS);
        [propget, helpcontext(0x0001005f)]
        HRESULT _stdcall Pattern([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001005f)]
        HRESULT _stdcall Pattern([in] VARIANT RHS);
        [propget, helpcontext(0x00010064)]
        HRESULT _stdcall PatternColor([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010064)]
        HRESULT _stdcall PatternColor([in] VARIANT RHS);
        [propget, helpcontext(0x00010062)]
        HRESULT _stdcall PatternColorIndex([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010062)]
        HRESULT _stdcall PatternColorIndex([in] VARIANT RHS);
        [propget, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([in] VARIANT RHS);
        [propget, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([in] VARIANT RHS);
        [propget, helpcontext(0x00010a53)]
        HRESULT _stdcall PatternThemeColor([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010a53)]
        HRESULT _stdcall PatternThemeColor([in] VARIANT RHS);
        [propget, helpcontext(0x00010a54)]
        HRESULT _stdcall PatternTintAndShade([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010a54)]
        HRESULT _stdcall PatternTintAndShade([in] VARIANT RHS);
        [propget, helpcontext(0x00010a55)]
        HRESULT _stdcall Gradient([out, retval] IDispatch** RHS);
    };

    [
      odl,
      uuid(000208AB-0001-0000-C000-000000000046),
      helpcontext(0x0002006b),
      hidden
    ]
    interface IOutline : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000103bf)]
        HRESULT _stdcall AutomaticStyles([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000103bf)]
        HRESULT _stdcall AutomaticStyles([in] VARIANT_BOOL RHS);
        [helpcontext(0x000103c0)]
        HRESULT _stdcall ShowLevels(
                        [in, optional] VARIANT RowLevels, 
                        [in, optional] VARIANT ColumnLevels, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000103c1)]
        HRESULT _stdcall SummaryColumn([out, retval] XlSummaryColumn* RHS);
        [propput, helpcontext(0x000103c1)]
        HRESULT _stdcall SummaryColumn([in] XlSummaryColumn RHS);
        [propget, helpcontext(0x00010386)]
        HRESULT _stdcall SummaryRow([out, retval] XlSummaryRow* RHS);
        [propput, helpcontext(0x00010386)]
        HRESULT _stdcall SummaryRow([in] XlSummaryRow RHS);
    };

    [
      odl,
      uuid(000208B4-0001-0000-C000-000000000046),
      helpcontext(0x00020074),
      hidden
    ]
    interface IPageSetup : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000103f1)]
        HRESULT _stdcall BlackAndWhite([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000103f1)]
        HRESULT _stdcall BlackAndWhite([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000103ea)]
        HRESULT _stdcall BottomMargin([out, retval] double* RHS);
        [propput, helpcontext(0x000103ea)]
        HRESULT _stdcall BottomMargin([in] double RHS);
        [propget, helpcontext(0x000103f2)]
        HRESULT _stdcall CenterFooter([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000103f2)]
        HRESULT _stdcall CenterFooter([in] BSTR RHS);
        [propget, helpcontext(0x000103f3)]
        HRESULT _stdcall CenterHeader([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000103f3)]
        HRESULT _stdcall CenterHeader([in] BSTR RHS);
        [propget, helpcontext(0x000103ed)]
        HRESULT _stdcall CenterHorizontally([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000103ed)]
        HRESULT _stdcall CenterHorizontally([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000103ee)]
        HRESULT _stdcall CenterVertically([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000103ee)]
        HRESULT _stdcall CenterVertically([in] VARIANT_BOOL RHS);
        [propget, hidden, helpcontext(0x000103f4)]
        HRESULT _stdcall ChartSize([out, retval] XlObjectSize* RHS);
        [propput, hidden, helpcontext(0x000103f4)]
        HRESULT _stdcall ChartSize([in] XlObjectSize RHS);
        [propget, helpcontext(0x000103fc)]
        HRESULT _stdcall Draft([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000103fc)]
        HRESULT _stdcall Draft([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000103f0)]
        HRESULT _stdcall FirstPageNumber([out, retval] long* RHS);
        [propput, helpcontext(0x000103f0)]
        HRESULT _stdcall FirstPageNumber([in] long RHS);
        [propget, helpcontext(0x000103f5)]
        HRESULT _stdcall FitToPagesTall([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103f5)]
        HRESULT _stdcall FitToPagesTall([in] VARIANT RHS);
        [propget, helpcontext(0x000103f6)]
        HRESULT _stdcall FitToPagesWide([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103f6)]
        HRESULT _stdcall FitToPagesWide([in] VARIANT RHS);
        [propget, helpcontext(0x000103f7)]
        HRESULT _stdcall FooterMargin([out, retval] double* RHS);
        [propput, helpcontext(0x000103f7)]
        HRESULT _stdcall FooterMargin([in] double RHS);
        [propget, helpcontext(0x000103f8)]
        HRESULT _stdcall HeaderMargin([out, retval] double* RHS);
        [propput, helpcontext(0x000103f8)]
        HRESULT _stdcall HeaderMargin([in] double RHS);
        [propget, helpcontext(0x000103f9)]
        HRESULT _stdcall LeftFooter([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000103f9)]
        HRESULT _stdcall LeftFooter([in] BSTR RHS);
        [propget, helpcontext(0x000103fa)]
        HRESULT _stdcall LeftHeader([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000103fa)]
        HRESULT _stdcall LeftHeader([in] BSTR RHS);
        [propget, helpcontext(0x000103e7)]
        HRESULT _stdcall LeftMargin([out, retval] double* RHS);
        [propput, helpcontext(0x000103e7)]
        HRESULT _stdcall LeftMargin([in] double RHS);
        [propget, helpcontext(0x000100c0)]
        HRESULT _stdcall Order([out, retval] XlOrder* RHS);
        [propput, helpcontext(0x000100c0)]
        HRESULT _stdcall Order([in] XlOrder RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] XlPageOrientation* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] XlPageOrientation RHS);
        [propget, helpcontext(0x000103ef)]
        HRESULT _stdcall PaperSize([out, retval] XlPaperSize* RHS);
        [propput, helpcontext(0x000103ef)]
        HRESULT _stdcall PaperSize([in] XlPaperSize RHS);
        [propget, helpcontext(0x000103fb)]
        HRESULT _stdcall PrintArea([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000103fb)]
        HRESULT _stdcall PrintArea([in] BSTR RHS);
        [propget, helpcontext(0x000103ec)]
        HRESULT _stdcall PrintGridlines([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000103ec)]
        HRESULT _stdcall PrintGridlines([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000103eb)]
        HRESULT _stdcall PrintHeadings([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000103eb)]
        HRESULT _stdcall PrintHeadings([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000103fd)]
        HRESULT _stdcall PrintNotes([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000103fd)]
        HRESULT _stdcall PrintNotes([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000103fe)]
        HRESULT _stdcall PrintQuality(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103fe)]
        HRESULT _stdcall PrintQuality(
                        [in, optional] VARIANT Index, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x000103ff)]
        HRESULT _stdcall PrintTitleColumns([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000103ff)]
        HRESULT _stdcall PrintTitleColumns([in] BSTR RHS);
        [propget, helpcontext(0x00010400)]
        HRESULT _stdcall PrintTitleRows([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010400)]
        HRESULT _stdcall PrintTitleRows([in] BSTR RHS);
        [propget, helpcontext(0x00010401)]
        HRESULT _stdcall RightFooter([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010401)]
        HRESULT _stdcall RightFooter([in] BSTR RHS);
        [propget, helpcontext(0x00010402)]
        HRESULT _stdcall RightHeader([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010402)]
        HRESULT _stdcall RightHeader([in] BSTR RHS);
        [propget, helpcontext(0x000103e8)]
        HRESULT _stdcall RightMargin([out, retval] double* RHS);
        [propput, helpcontext(0x000103e8)]
        HRESULT _stdcall RightMargin([in] double RHS);
        [propget, helpcontext(0x000103e9)]
        HRESULT _stdcall TopMargin([out, retval] double* RHS);
        [propput, helpcontext(0x000103e9)]
        HRESULT _stdcall TopMargin([in] double RHS);
        [propget, helpcontext(0x00010297)]
        HRESULT _stdcall Zoom([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010297)]
        HRESULT _stdcall Zoom([in] VARIANT RHS);
        [propget, helpcontext(0x000105f4)]
        HRESULT _stdcall PrintComments([out, retval] XlPrintLocation* RHS);
        [propput, helpcontext(0x000105f4)]
        HRESULT _stdcall PrintComments([in] XlPrintLocation RHS);
        [propget, helpcontext(0x00010865)]
        HRESULT _stdcall PrintErrors([out, retval] XlPrintErrors* RHS);
        [propput, helpcontext(0x00010865)]
        HRESULT _stdcall PrintErrors([in] XlPrintErrors RHS);
        [propget, helpcontext(0x00010866)]
        HRESULT _stdcall CenterHeaderPicture([out, retval] Graphic** RHS);
        [propget, helpcontext(0x00010867)]
        HRESULT _stdcall CenterFooterPicture([out, retval] Graphic** RHS);
        [propget, helpcontext(0x00010868)]
        HRESULT _stdcall LeftHeaderPicture([out, retval] Graphic** RHS);
        [propget, helpcontext(0x00010869)]
        HRESULT _stdcall LeftFooterPicture([out, retval] Graphic** RHS);
        [propget, helpcontext(0x0001086a)]
        HRESULT _stdcall RightHeaderPicture([out, retval] Graphic** RHS);
        [propget, helpcontext(0x0001086b)]
        HRESULT _stdcall RightFooterPicture([out, retval] Graphic** RHS);
        [propget, helpcontext(0x00010a28)]
        HRESULT _stdcall OddAndEvenPagesHeaderFooter([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a28)]
        HRESULT _stdcall OddAndEvenPagesHeaderFooter([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a29)]
        HRESULT _stdcall DifferentFirstPageHeaderFooter([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a29)]
        HRESULT _stdcall DifferentFirstPageHeaderFooter([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a2a)]
        HRESULT _stdcall ScaleWithDocHeaderFooter([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a2a)]
        HRESULT _stdcall ScaleWithDocHeaderFooter([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a2b)]
        HRESULT _stdcall AlignMarginsHeaderFooter([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a2b)]
        HRESULT _stdcall AlignMarginsHeaderFooter([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a2c)]
        HRESULT _stdcall Pages([out, retval] Pages** RHS);
        [propget, helpcontext(0x00010a2d)]
        HRESULT _stdcall EvenPage([out, retval] Page** RHS);
        [propget, helpcontext(0x00010a2e)]
        HRESULT _stdcall FirstPage([out, retval] Page** RHS);
    };

    [
      odl,
      uuid(0002084D-0001-0000-C000-000000000046),
      helpcontext(0x0002000d),
      hidden
    ]
    interface _IFont : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000100b4)]
        HRESULT _stdcall Background([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100b4)]
        HRESULT _stdcall Background([in] VARIANT RHS);
        [propget, helpcontext(0x00010060)]
        HRESULT _stdcall Bold([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010060)]
        HRESULT _stdcall Bold([in] VARIANT RHS);
        [propget, helpcontext(0x00010063)]
        HRESULT _stdcall Color([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010063)]
        HRESULT _stdcall Color([in] VARIANT RHS);
        [propget, helpcontext(0x00010061)]
        HRESULT _stdcall ColorIndex([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010061)]
        HRESULT _stdcall ColorIndex([in] VARIANT RHS);
        [propget, helpcontext(0x000100b1)]
        HRESULT _stdcall FontStyle([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100b1)]
        HRESULT _stdcall FontStyle([in] VARIANT RHS);
        [propget, helpcontext(0x00010065)]
        HRESULT _stdcall Italic([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010065)]
        HRESULT _stdcall Italic([in] VARIANT RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] VARIANT RHS);
        [propget, hidden, helpcontext(0x000100dd)]
        HRESULT _stdcall OutlineFont([out, retval] VARIANT* RHS);
        [propput, hidden, helpcontext(0x000100dd)]
        HRESULT _stdcall OutlineFont([in] VARIANT RHS);
        [propget, hidden, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT* RHS);
        [propput, hidden, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT RHS);
        [propget, helpcontext(0x00010068)]
        HRESULT _stdcall Size([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010068)]
        HRESULT _stdcall Size([in] VARIANT RHS);
        [propget, helpcontext(0x00010069)]
        HRESULT _stdcall Strikethrough([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010069)]
        HRESULT _stdcall Strikethrough([in] VARIANT RHS);
        [propget, helpcontext(0x000100b3)]
        HRESULT _stdcall Subscript([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100b3)]
        HRESULT _stdcall Subscript([in] VARIANT RHS);
        [propget, helpcontext(0x000100b2)]
        HRESULT _stdcall Superscript([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100b2)]
        HRESULT _stdcall Superscript([in] VARIANT RHS);
        [propget, helpcontext(0x0001006a)]
        HRESULT _stdcall Underline([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001006a)]
        HRESULT _stdcall Underline([in] VARIANT RHS);
        [propget, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([in] VARIANT RHS);
        [propget, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([in] VARIANT RHS);
        [propget, helpcontext(0x0001093f)]
        HRESULT _stdcall ThemeFont([out, retval] XlThemeFont* RHS);
        [propput, helpcontext(0x0001093f)]
        HRESULT _stdcall ThemeFont([in] XlThemeFont RHS);
    };

    [
      odl,
      uuid(00020846-0001-0000-C000-000000000046),
      helpcontext(0x00020006),
      hidden
    ]
    interface IRange : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010130)]
        HRESULT _stdcall Activate([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([in] VARIANT RHS);
        [propget, helpcontext(0x000100ec)]
        HRESULT _stdcall Address(
                        [in, optional] VARIANT RowAbsolute, 
                        [in, optional] VARIANT ColumnAbsolute, 
                        [in, optional, defaultvalue(1)] XlReferenceStyle ReferenceStyle, 
                        [in, optional] VARIANT External, 
                        [in, optional] VARIANT RelativeTo, 
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [propget, helpcontext(0x000101b5)]
        HRESULT _stdcall AddressLocal(
                        [in, optional] VARIANT RowAbsolute, 
                        [in, optional] VARIANT ColumnAbsolute, 
                        [in, optional, defaultvalue(1)] XlReferenceStyle ReferenceStyle, 
                        [in, optional] VARIANT External, 
                        [in, optional] VARIANT RelativeTo, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x0001036c)]
        HRESULT _stdcall AdvancedFilter(
                        [in] XlFilterAction Action, 
                        [in, optional] VARIANT CriteriaRange, 
                        [in, optional] VARIANT CopyToRange, 
                        [in, optional] VARIANT Unique, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x000101b9)]
        HRESULT _stdcall ApplyNames(
                        [in, optional] VARIANT Names, 
                        [in, optional] VARIANT IgnoreRelativeAbsolute, 
                        [in, optional] VARIANT UseRowColumnNames, 
                        [in, optional] VARIANT OmitColumn, 
                        [in, optional] VARIANT OmitRow, 
                        [in, optional, defaultvalue(1)] XlApplyNamesOrder Order, 
                        [in, optional] VARIANT AppendLast, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x000101c0)]
        HRESULT _stdcall ApplyOutlineStyles([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010238)]
        HRESULT _stdcall Areas([out, retval] Areas** RHS);
        [helpcontext(0x000104a1)]
        HRESULT _stdcall AutoComplete(
                        [in] BSTR String, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x000101c1)]
        HRESULT _stdcall AutoFill(
                        [in] Range* Destination, 
                        [in, optional, defaultvalue(0)] XlAutoFillType Type, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010319)]
        HRESULT _stdcall AutoFilter(
                        [in, optional] VARIANT Field, 
                        [in, optional] VARIANT Criteria1, 
                        [in, optional, defaultvalue(1)] XlAutoFilterOperator Operator, 
                        [in, optional] VARIANT Criteria2, 
                        [in, optional] VARIANT VisibleDropDown, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x000100ed)]
        HRESULT _stdcall AutoFit([out, retval] VARIANT* RHS);
        [hidden, helpcontext(0x00010072)]
        HRESULT _stdcall AutoFormat(
                        [in, optional, defaultvalue(1)] XlRangeAutoFormat Format, 
                        [in, optional] VARIANT Number, 
                        [in, optional] VARIANT Font, 
                        [in, optional] VARIANT Alignment, 
                        [in, optional] VARIANT Border, 
                        [in, optional] VARIANT Pattern, 
                        [in, optional] VARIANT Width, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001040c)]
        HRESULT _stdcall AutoOutline([out, retval] VARIANT* RHS);
        [helpcontext(0x0001042b)]
        HRESULT _stdcall BorderAround(
                        [in, optional] VARIANT LineStyle, 
                        [in, optional, defaultvalue(2)] XlBorderWeight Weight, 
                        [in, optional, defaultvalue(-4105)] XlColorIndex ColorIndex, 
                        [in, optional] VARIANT Color, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000101b3)]
        HRESULT _stdcall Borders([out, retval] Borders** RHS);
        [helpcontext(0x00010117)]
        HRESULT _stdcall Calculate([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000100ee)]
        HRESULT _stdcall Cells([out, retval] Range** RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001006f)]
        HRESULT _stdcall Clear([out, retval] VARIANT* RHS);
        [helpcontext(0x00010071)]
        HRESULT _stdcall ClearContents([out, retval] VARIANT* RHS);
        [helpcontext(0x00010070)]
        HRESULT _stdcall ClearFormats([out, retval] VARIANT* RHS);
        [helpcontext(0x000100ef)]
        HRESULT _stdcall ClearNotes([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040d)]
        HRESULT _stdcall ClearOutline([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000100f0)]
        HRESULT _stdcall Column([out, retval] long* RHS);
        [helpcontext(0x000101fe)]
        HRESULT _stdcall ColumnDifferences(
                        [in] VARIANT Comparison, 
                        [out, retval] Range** RHS);
        [propget, helpcontext(0x000100f1)]
        HRESULT _stdcall Columns([out, retval] Range** RHS);
        [propget, helpcontext(0x000100f2)]
        HRESULT _stdcall ColumnWidth([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100f2)]
        HRESULT _stdcall ColumnWidth([in] VARIANT RHS);
        [helpcontext(0x000101e2)]
        HRESULT _stdcall Consolidate(
                        [in, optional] VARIANT Sources, 
                        [in, optional] VARIANT Function, 
                        [in, optional] VARIANT TopRow, 
                        [in, optional] VARIANT LeftColumn, 
                        [in, optional] VARIANT CreateLinks, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy(
                        [in, optional] VARIANT Destination, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010480)]
        HRESULT _stdcall CopyFromRecordset(
                        [in] IUnknown* Data, 
                        [in, optional] VARIANT MaxRows, 
                        [in, optional] VARIANT MaxColumns, 
                        [out, retval] long* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(1)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000101c9)]
        HRESULT _stdcall CreateNames(
                        [in, optional] VARIANT Top, 
                        [in, optional] VARIANT Left, 
                        [in, optional] VARIANT Bottom, 
                        [in, optional] VARIANT Right, 
                        [out, retval] VARIANT* RHS);
        [hidden, helpcontext(0x000101ca)]
        HRESULT _stdcall CreatePublisher(
                        [in, optional] VARIANT Edition, 
                        [in, optional, defaultvalue(1)] XlPictureAppearance Appearance, 
                        [in, optional] VARIANT ContainsPICT, 
                        [in, optional] VARIANT ContainsBIFF, 
                        [in, optional] VARIANT ContainsRTF, 
                        [in, optional] VARIANT ContainsVALU, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000101f5)]
        HRESULT _stdcall CurrentArray([out, retval] Range** RHS);
        [propget, helpcontext(0x000100f3)]
        HRESULT _stdcall CurrentRegion([out, retval] Range** RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut(
                        [in, optional] VARIANT Destination, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x000101d0)]
        HRESULT _stdcall DataSeries(
                        [in, optional] VARIANT Rowcol, 
                        [in, optional, defaultvalue(-4132)] XlDataSeriesType Type, 
                        [in, optional, defaultvalue(1)] XlDataSeriesDate Date, 
                        [in, optional] VARIANT Step, 
                        [in, optional] VARIANT Stop, 
                        [in, optional] VARIANT Trend, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in, optional] VARIANT RowIndex, 
                        [in, optional] VARIANT ColumnIndex, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in, optional] VARIANT RowIndex, 
                        [in, optional] VARIANT ColumnIndex, 
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete(
                        [in, optional] VARIANT Shift, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001021f)]
        HRESULT _stdcall Dependents([out, retval] Range** RHS);
        [helpcontext(0x000100f5)]
        HRESULT _stdcall DialogBox([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010221)]
        HRESULT _stdcall DirectDependents([out, retval] Range** RHS);
        [propget, helpcontext(0x00010222)]
        HRESULT _stdcall DirectPrecedents([out, retval] Range** RHS);
        [helpcontext(0x0001046b)]
        HRESULT _stdcall EditionOptions(
                        [in] XlEditionType Type, 
                        [in] XlEditionOptionsOption Option, 
                        [in, optional] VARIANT Name, 
                        [in, optional] VARIANT Reference, 
                        [in, optional, defaultvalue(1)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(1)] XlPictureAppearance ChartSize, 
                        [in, optional] VARIANT Format, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000101f4)]
        HRESULT _stdcall End(
                        [in] XlDirection Direction, 
                        [out, retval] Range** RHS);
        [propget, helpcontext(0x000100f6)]
        HRESULT _stdcall EntireColumn([out, retval] Range** RHS);
        [propget, helpcontext(0x000100f7)]
        HRESULT _stdcall EntireRow([out, retval] Range** RHS);
        [helpcontext(0x000100f8)]
        HRESULT _stdcall FillDown([out, retval] VARIANT* RHS);
        [helpcontext(0x000100f9)]
        HRESULT _stdcall FillLeft([out, retval] VARIANT* RHS);
        [helpcontext(0x000100fa)]
        HRESULT _stdcall FillRight([out, retval] VARIANT* RHS);
        [helpcontext(0x000100fb)]
        HRESULT _stdcall FillUp([out, retval] VARIANT* RHS);
        [helpcontext(0x0001018e)]
        HRESULT _stdcall Find(
                        [in] VARIANT What, 
                        [in, optional] VARIANT After, 
                        [in, optional] VARIANT LookIn, 
                        [in, optional] VARIANT LookAt, 
                        [in, optional] VARIANT SearchOrder, 
                        [in, optional, defaultvalue(1)] XlSearchDirection SearchDirection, 
                        [in, optional] VARIANT MatchCase, 
                        [in, optional] VARIANT MatchByte, 
                        [in, optional] VARIANT SearchFormat, 
                        [out, retval] Range** RHS);
        [helpcontext(0x0001018f)]
        HRESULT _stdcall FindNext(
                        [in, optional] VARIANT After, 
                        [out, retval] Range** RHS);
        [helpcontext(0x00010190)]
        HRESULT _stdcall FindPrevious(
                        [in, optional] VARIANT After, 
                        [out, retval] Range** RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula(
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x0001024a)]
        HRESULT _stdcall FormulaArray([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001024a)]
        HRESULT _stdcall FormulaArray([in] VARIANT RHS);
        [propget, hidden, helpcontext(0x00010564)]
        HRESULT _stdcall FormulaLabel([out, retval] XlFormulaLabel* RHS);
        [propput, hidden, helpcontext(0x00010564)]
        HRESULT _stdcall FormulaLabel([in] XlFormulaLabel RHS);
        [propget, helpcontext(0x00010106)]
        HRESULT _stdcall FormulaHidden([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010106)]
        HRESULT _stdcall FormulaHidden([in] VARIANT RHS);
        [propget, helpcontext(0x00010107)]
        HRESULT _stdcall FormulaLocal([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010107)]
        HRESULT _stdcall FormulaLocal([in] VARIANT RHS);
        [propget, helpcontext(0x00010108)]
        HRESULT _stdcall FormulaR1C1(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010108)]
        HRESULT _stdcall FormulaR1C1(
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x00010109)]
        HRESULT _stdcall FormulaR1C1Local([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010109)]
        HRESULT _stdcall FormulaR1C1Local([in] VARIANT RHS);
        [helpcontext(0x0001023b)]
        HRESULT _stdcall FunctionWizard([out, retval] VARIANT* RHS);
        [hidden, helpcontext(0x000101d8)]
        HRESULT _stdcall GoalSeek(
                        [in] VARIANT Goal, 
                        [in] Range* ChangingCell, 
                        [out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT End, 
                        [in, optional] VARIANT By, 
                        [in, optional] VARIANT Periods, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001010a)]
        HRESULT _stdcall HasArray([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001010b)]
        HRESULT _stdcall HasFormula([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001010c)]
        HRESULT _stdcall Hidden([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001010c)]
        HRESULT _stdcall Hidden([in] VARIANT RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000100c9)]
        HRESULT _stdcall IndentLevel([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100c9)]
        HRESULT _stdcall IndentLevel([in] VARIANT RHS);
        [helpcontext(0x00010565)]
        HRESULT _stdcall InsertIndent([in] long InsertAmount);
        [helpcontext(0x000100fc)]
        HRESULT _stdcall Insert(
                        [in, optional] VARIANT Shift, 
                        [in, optional] VARIANT CopyOrigin, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT RowIndex, 
                        [in, optional] VARIANT ColumnIndex, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT RowIndex, 
                        [in, optional] VARIANT ColumnIndex, 
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [helpcontext(0x000101ef)]
        HRESULT _stdcall Justify([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000104a3)]
        HRESULT _stdcall ListHeaderRows([out, retval] long* RHS);
        [helpcontext(0x000100fd)]
        HRESULT _stdcall ListNames([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000102b3)]
        HRESULT _stdcall LocationInTable([out, retval] XlLocationInTable* RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT RHS);
        [helpcontext(0x00010234)]
        HRESULT _stdcall Merge([in, optional] VARIANT Across);
        [helpcontext(0x00010568)]
        HRESULT _stdcall UnMerge();
        [propget, helpcontext(0x00010569)]
        HRESULT _stdcall MergeArea([out, retval] Range** RHS);
        [propget, helpcontext(0x000100d0)]
        HRESULT _stdcall MergeCells([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100d0)]
        HRESULT _stdcall MergeCells([in] VARIANT RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] VARIANT RHS);
        [helpcontext(0x00010408)]
        HRESULT _stdcall NavigateArrow(
                        [in, optional] VARIANT TowardPrecedent, 
                        [in, optional] VARIANT ArrowNumber, 
                        [in, optional] VARIANT LinkNumber, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x000101f6)]
        HRESULT _stdcall Next([out, retval] Range** RHS);
        [helpcontext(0x00010467)]
        HRESULT _stdcall NoteText(
                        [in, optional] VARIANT Text, 
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] BSTR* RHS);
        [propget, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([in] VARIANT RHS);
        [propget, helpcontext(0x00010449)]
        HRESULT _stdcall NumberFormatLocal([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010449)]
        HRESULT _stdcall NumberFormatLocal([in] VARIANT RHS);
        [propget, helpcontext(0x000100fe)]
        HRESULT _stdcall Offset(
                        [in, optional] VARIANT RowOffset, 
                        [in, optional] VARIANT ColumnOffset, 
                        [out, retval] Range** RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x0001010f)]
        HRESULT _stdcall OutlineLevel([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001010f)]
        HRESULT _stdcall OutlineLevel([in] VARIANT RHS);
        [propget, helpcontext(0x000100ff)]
        HRESULT _stdcall PageBreak([out, retval] long* RHS);
        [propput, helpcontext(0x000100ff)]
        HRESULT _stdcall PageBreak([in] long RHS);
        [helpcontext(0x000101dd)]
        HRESULT _stdcall Parse(
                        [in, optional] VARIANT ParseLine, 
                        [in, optional] VARIANT Destination, 
                        [out, retval] VARIANT* RHS);
        [hidden, helpcontext(0x00010403)]
        HRESULT _stdcall _PasteSpecial(
                        [in, optional, defaultvalue(-4104)] XlPasteType Paste, 
                        [in, optional, defaultvalue(-4142)] XlPasteSpecialOperation Operation, 
                        [in, optional] VARIANT SkipBlanks, 
                        [in, optional] VARIANT Transpose, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000102db)]
        HRESULT _stdcall PivotField([out, retval] PivotField** RHS);
        [propget, helpcontext(0x000102e4)]
        HRESULT _stdcall PivotItem([out, retval] PivotItem** RHS);
        [propget, helpcontext(0x000102cc)]
        HRESULT _stdcall PivotTable([out, retval] PivotTable** RHS);
        [propget, helpcontext(0x00010220)]
        HRESULT _stdcall Precedents([out, retval] Range** RHS);
        [propget, helpcontext(0x000101f8)]
        HRESULT _stdcall PrefixCharacter([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000101f7)]
        HRESULT _stdcall Previous([out, retval] Range** RHS);
        [hidden, helpcontext(0x00010389)]
        HRESULT _stdcall __PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010119)]
        HRESULT _stdcall PrintPreview(
                        [in, optional] VARIANT EnableChanges, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001056a)]
        HRESULT _stdcall QueryTable([out, retval] QueryTable** RHS);
        [propget, helpcontext(0x000100c5)]
        HRESULT _stdcall Range(
                        [in] VARIANT Cell1, 
                        [in, optional] VARIANT Cell2, 
                        [out, retval] Range** RHS);
        [helpcontext(0x00010373)]
        HRESULT _stdcall RemoveSubtotal([out, retval] VARIANT* RHS);
        [helpcontext(0x000100e2)]
        HRESULT _stdcall Replace(
                        [in] VARIANT What, 
                        [in] VARIANT Replacement, 
                        [in, optional] VARIANT LookAt, 
                        [in, optional] VARIANT SearchOrder, 
                        [in, optional] VARIANT MatchCase, 
                        [in, optional] VARIANT MatchByte, 
                        [in, optional] VARIANT SearchFormat, 
                        [in, optional] VARIANT ReplaceFormat, 
                        [out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010100)]
        HRESULT _stdcall Resize(
                        [in, optional] VARIANT RowSize, 
                        [in, optional] VARIANT ColumnSize, 
                        [out, retval] Range** RHS);
        [propget, helpcontext(0x00010101)]
        HRESULT _stdcall Row([out, retval] long* RHS);
        [helpcontext(0x000101ff)]
        HRESULT _stdcall RowDifferences(
                        [in] VARIANT Comparison, 
                        [out, retval] Range** RHS);
        [propget, helpcontext(0x00010110)]
        HRESULT _stdcall RowHeight([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010110)]
        HRESULT _stdcall RowHeight([in] VARIANT RHS);
        [propget, helpcontext(0x00010102)]
        HRESULT _stdcall Rows([out, retval] Range** RHS);
        [helpcontext(0x00010103)]
        HRESULT _stdcall Run(
                        [in, optional] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [helpcontext(0x000101f0)]
        HRESULT _stdcall Show([out, retval] VARIANT* RHS);
        [helpcontext(0x0001036d)]
        HRESULT _stdcall ShowDependents(
                        [in, optional] VARIANT Remove, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010249)]
        HRESULT _stdcall ShowDetail([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010249)]
        HRESULT _stdcall ShowDetail([in] VARIANT RHS);
        [helpcontext(0x0001036e)]
        HRESULT _stdcall ShowErrors([out, retval] VARIANT* RHS);
        [helpcontext(0x0001036f)]
        HRESULT _stdcall ShowPrecedents(
                        [in, optional] VARIANT Remove, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000100d1)]
        HRESULT _stdcall ShrinkToFit([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100d1)]
        HRESULT _stdcall ShrinkToFit([in] VARIANT RHS);
        [helpcontext(0x00010370)]
        HRESULT _stdcall Sort(
                        [in, optional] VARIANT Key1, 
                        [in, optional, defaultvalue(1)] XlSortOrder Order1, 
                        [in, optional] VARIANT Key2, 
                        [in, optional] VARIANT Type, 
                        [in, optional, defaultvalue(1)] XlSortOrder Order2, 
                        [in, optional] VARIANT Key3, 
                        [in, optional, defaultvalue(1)] XlSortOrder Order3, 
                        [in, optional, defaultvalue(2)] XlYesNoGuess Header, 
                        [in, optional] VARIANT OrderCustom, 
                        [in, optional] VARIANT MatchCase, 
                        [in, optional, defaultvalue(2)] XlSortOrientation Orientation, 
                        [in, optional, defaultvalue(1)] XlSortMethod SortMethod, 
                        [in, optional, defaultvalue(0)] XlSortDataOption DataOption1, 
                        [in, optional, defaultvalue(0)] XlSortDataOption DataOption2, 
                        [in, optional, defaultvalue(0)] XlSortDataOption DataOption3, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010371)]
        HRESULT _stdcall SortSpecial(
                        [in, optional, defaultvalue(1)] XlSortMethod SortMethod, 
                        [in, optional] VARIANT Key1, 
                        [in, optional, defaultvalue(1)] XlSortOrder Order1, 
                        [in, optional] VARIANT Type, 
                        [in, optional] VARIANT Key2, 
                        [in, optional, defaultvalue(1)] XlSortOrder Order2, 
                        [in, optional] VARIANT Key3, 
                        [in, optional, defaultvalue(1)] XlSortOrder Order3, 
                        [in, optional, defaultvalue(2)] XlYesNoGuess Header, 
                        [in, optional] VARIANT OrderCustom, 
                        [in, optional] VARIANT MatchCase, 
                        [in, optional, defaultvalue(2)] XlSortOrientation Orientation, 
                        [in, optional, defaultvalue(0)] XlSortDataOption DataOption1, 
                        [in, optional, defaultvalue(0)] XlSortDataOption DataOption2, 
                        [in, optional, defaultvalue(0)] XlSortDataOption DataOption3, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010394)]
        HRESULT _stdcall SoundNote([out, retval] SoundNote** RHS);
        [helpcontext(0x0001019a)]
        HRESULT _stdcall SpecialCells(
                        [in] XlCellType Type, 
                        [in, optional] VARIANT Value, 
                        [out, retval] Range** RHS);
        [propget, helpcontext(0x00010104)]
        HRESULT _stdcall Style([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010104)]
        HRESULT _stdcall Style([in] VARIANT RHS);
        [helpcontext(0x000101e1)]
        HRESULT _stdcall SubscribeTo(
                        [in] BSTR Edition, 
                        [in, optional, defaultvalue(-4158)] XlSubscribeToFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010372)]
        HRESULT _stdcall Subtotal(
                        [in] long GroupBy, 
                        [in] XlConsolidationFunction Function, 
                        [in] VARIANT TotalList, 
                        [in, optional] VARIANT Replace, 
                        [in, optional] VARIANT PageBreaks, 
                        [in, optional, defaultvalue(1)] XlSummaryRow SummaryBelowData, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010111)]
        HRESULT _stdcall Summary([out, retval] VARIANT* RHS);
        [helpcontext(0x000101f1)]
        HRESULT _stdcall Table(
                        [in, optional] VARIANT RowInput, 
                        [in, optional] VARIANT ColumnInput, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] VARIANT* RHS);
        [helpcontext(0x00010410)]
        HRESULT _stdcall TextToColumns(
                        [in, optional] VARIANT Destination, 
                        [in, optional, defaultvalue(1)] XlTextParsingType DataType, 
                        [in, optional, defaultvalue(1)] XlTextQualifier TextQualifier, 
                        [in, optional] VARIANT ConsecutiveDelimiter, 
                        [in, optional] VARIANT Tab, 
                        [in, optional] VARIANT Semicolon, 
                        [in, optional] VARIANT Comma, 
                        [in, optional] VARIANT Space, 
                        [in, optional] VARIANT Other, 
                        [in, optional] VARIANT OtherChar, 
                        [in, optional] VARIANT FieldInfo, 
                        [in, optional] VARIANT DecimalSeparator, 
                        [in, optional] VARIANT ThousandsSeparator, 
                        [in, optional] VARIANT TrailingMinusNumbers, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] VARIANT* RHS);
        [helpcontext(0x000100f4)]
        HRESULT _stdcall Ungroup([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010112)]
        HRESULT _stdcall UseStandardHeight([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010112)]
        HRESULT _stdcall UseStandardHeight([in] VARIANT RHS);
        [propget, helpcontext(0x00010113)]
        HRESULT _stdcall UseStandardWidth([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010113)]
        HRESULT _stdcall UseStandardWidth([in] VARIANT RHS);
        [propget, helpcontext(0x0001056b)]
        HRESULT _stdcall Validation([out, retval] Validation** RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value(
                        [in, optional] VARIANT RangeValueDataType, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value(
                        [in, optional] VARIANT RangeValueDataType, 
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x0001056c)]
        HRESULT _stdcall Value2(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001056c)]
        HRESULT _stdcall Value2(
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001015c)]
        HRESULT _stdcall Worksheet([out, retval] Worksheet** RHS);
        [propget, helpcontext(0x00010114)]
        HRESULT _stdcall WrapText([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010114)]
        HRESULT _stdcall WrapText([in] VARIANT RHS);
        [helpcontext(0x0001056d)]
        HRESULT _stdcall AddComment(
                        [in, optional] VARIANT Text, 
                        [out, retval] Comment** RHS);
        [propget, helpcontext(0x0001038e)]
        HRESULT _stdcall Comment([out, retval] Comment** RHS);
        [helpcontext(0x0001056e)]
        HRESULT _stdcall ClearComments();
        [propget, helpcontext(0x0001056f)]
        HRESULT _stdcall Phonetic([out, retval] Phonetic** RHS);
        [propget, helpcontext(0x00010570)]
        HRESULT _stdcall FormatConditions([out, retval] FormatConditions** RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, helpcontext(0x00010571)]
        HRESULT _stdcall Hyperlinks([out, retval] Hyperlinks** RHS);
        [propget, helpcontext(0x00010713)]
        HRESULT _stdcall Phonetics([out, retval] Phonetics** RHS);
        [helpcontext(0x00010714)]
        HRESULT _stdcall SetPhonetic();
        [propget, helpcontext(0x00010715)]
        HRESULT _stdcall ID([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010715)]
        HRESULT _stdcall ID([in] BSTR RHS);
        [hidden, helpcontext(0x000106ec)]
        HRESULT _stdcall _PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000107dd)]
        HRESULT _stdcall PivotCell([out, retval] PivotCell** RHS);
        [helpcontext(0x000107de)]
        HRESULT _stdcall Dirty();
        [propget, helpcontext(0x000107df)]
        HRESULT _stdcall Errors([out, retval] Errors** RHS);
        [propget, helpcontext(0x000107e0)]
        HRESULT _stdcall SmartTags([out, retval] SmartTags** RHS);
        [helpcontext(0x000107e1)]
        HRESULT _stdcall Speak(
                        [in, optional] VARIANT SpeakDirection, 
                        [in, optional] VARIANT SpeakFormulas);
        [helpcontext(0x00010788)]
        HRESULT _stdcall PasteSpecial(
                        [in, optional, defaultvalue(-4104)] XlPasteType Paste, 
                        [in, optional, defaultvalue(-4142)] XlPasteSpecialOperation Operation, 
                        [in, optional] VARIANT SkipBlanks, 
                        [in, optional] VARIANT Transpose, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000107e4)]
        HRESULT _stdcall AllowEdit([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000108d1)]
        HRESULT _stdcall ListObject([out, retval] ListObject** RHS);
        [propget, helpcontext(0x000108d2)]
        HRESULT _stdcall XPath([out, retval] XPath** RHS);
        [propget, helpcontext(0x000109bb)]
        HRESULT _stdcall ServerActions([out, retval] Actions** RHS);
        [helpcontext(0x000109bc)]
        HRESULT _stdcall RemoveDuplicates(
                        [in, optional] VARIANT Columns, 
                        [in, optional, defaultvalue(2)] XlYesNoGuess Header);
        [helpcontext(0x00010939)]
        HRESULT _stdcall PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001084b)]
        HRESULT _stdcall MDX([out, retval] BSTR* RHS);
        [helpcontext(0x000109bd)]
        HRESULT _stdcall ExportAsFixedFormat(
                        [in] XlFixedFormatType Type, 
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT Quality, 
                        [in, optional] VARIANT IncludeDocProperties, 
                        [in, optional] VARIANT IgnorePrintAreas, 
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT OpenAfterPublish, 
                        [in, optional] VARIANT FixedFormatExtClassPtr);
        [propget, helpcontext(0x000109c3)]
        HRESULT _stdcall CountLarge([out, retval] VARIANT* RHS);
        [helpcontext(0x0001093c)]
        HRESULT _stdcall CalculateRowMajorOrder([out, retval] VARIANT* RHS);
    };

    [
      odl,
      uuid(000208D8-0000-0000-C000-000000000046),
      helpcontext(0x00020010),
      dual,
      nonextensible,
      oleautomation
    ]
    interface _Worksheet : IDispatch {
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] Application** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] XlCreator* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x00000130), helpcontext(0x00010130)]
        HRESULT Activate([in, lcid] long lcid);
        [id(0x00000227), helpcontext(0x00010227)]
        HRESULT Copy(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([in, lcid] long lcid);
        [id(0x0000055d), propget, helpcontext(0x0001055d)]
        HRESULT CodeName([out, retval] BSTR* RHS);
        [id(0x80010000), propget, helpcontext(0x80020000)]
        HRESULT _CodeName([out, retval] BSTR* RHS);
        [id(0x80010000), propput, helpcontext(0x80020000)]
        HRESULT _CodeName([in] BSTR RHS);
        [id(0x000001e6), propget, helpcontext(0x000101e6)]
        HRESULT Index(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x0000027d), helpcontext(0x0001027d)]
        HRESULT Move(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x0000006e), propput, helpcontext(0x0001006e)]
        HRESULT Name([in] BSTR RHS);
        [id(0x000001f6), propget, helpcontext(0x000101f6)]
        HRESULT Next([out, retval] IDispatch** RHS);
        [id(0x00000274), propget, hidden, helpcontext(0x00010274)]
        HRESULT OnDoubleClick(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000274), propput, hidden, helpcontext(0x00010274)]
        HRESULT OnDoubleClick(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000407), propget, hidden, helpcontext(0x00010407)]
        HRESULT OnSheetActivate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000407), propput, hidden, helpcontext(0x00010407)]
        HRESULT OnSheetActivate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000439), propget, hidden, helpcontext(0x00010439)]
        HRESULT OnSheetDeactivate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000439), propput, hidden, helpcontext(0x00010439)]
        HRESULT OnSheetDeactivate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x000003e6), propget, helpcontext(0x000103e6)]
        HRESULT PageSetup([out, retval] PageSetup** RHS);
        [id(0x000001f7), propget, helpcontext(0x000101f7)]
        HRESULT Previous([out, retval] IDispatch** RHS);
        [id(0x00000389), hidden, helpcontext(0x00010389)]
        HRESULT __PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, lcid] long lcid);
        [id(0x00000119), helpcontext(0x00010119)]
        HRESULT PrintPreview(
                        [in, optional] VARIANT EnableChanges, 
                        [in, lcid] long lcid);
        [id(0x0000011a), hidden, helpcontext(0x0001011a)]
        HRESULT _Protect(
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT DrawingObjects, 
                        [in, optional] VARIANT Contents, 
                        [in, optional] VARIANT Scenarios, 
                        [in, optional] VARIANT UserInterfaceOnly, 
                        [in, lcid] long lcid);
        [id(0x00000124), propget, helpcontext(0x00010124)]
        HRESULT ProtectContents(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000125), propget, helpcontext(0x00010125)]
        HRESULT ProtectDrawingObjects(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000487), propget, helpcontext(0x00010487)]
        HRESULT ProtectionMode(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000126), propget, helpcontext(0x00010126)]
        HRESULT ProtectScenarios(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000011c), hidden, helpcontext(0x0001011c)]
        HRESULT _SaveAs(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT FileFormat, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT ReadOnlyRecommended, 
                        [in, optional] VARIANT CreateBackup, 
                        [in, optional] VARIANT AddToMru, 
                        [in, optional] VARIANT TextCodepage, 
                        [in, optional] VARIANT TextVisualLayout, 
                        [in, lcid] long lcid);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select(
                        [in, optional] VARIANT Replace, 
                        [in, lcid] long lcid);
        [id(0x0000011d), helpcontext(0x0001011d)]
        HRESULT Unprotect(
                        [in, optional] VARIANT Password, 
                        [in, lcid] long lcid);
        [id(0x0000022e), propget, helpcontext(0x0001022e)]
        HRESULT Visible(
                        [in, lcid] long lcid, 
                        [out, retval] XlSheetVisibility* RHS);
        [id(0x0000022e), propput, helpcontext(0x0001022e)]
        HRESULT Visible(
                        [in, lcid] long lcid, 
                        [in] XlSheetVisibility RHS);
        [id(0x00000561), propget, helpcontext(0x00010561)]
        HRESULT Shapes([out, retval] Shapes** RHS);
        [id(0x00000191), propget, helpcontext(0x00010191)]
        HRESULT TransitionExpEval(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000191), propput, helpcontext(0x00010191)]
        HRESULT TransitionExpEval(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x000002f8), hidden, helpcontext(0x000102f8)]
        HRESULT Arcs(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000318), propget, helpcontext(0x00010318)]
        HRESULT AutoFilterMode(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000318), propput, helpcontext(0x00010318)]
        HRESULT AutoFilterMode(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x000004a4), helpcontext(0x000104a4)]
        HRESULT SetBackgroundPicture([in] BSTR Filename);
        [id(0x0000022d), hidden, helpcontext(0x0001022d)]
        HRESULT Buttons(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000117), helpcontext(0x00010117)]
        HRESULT Calculate([in, lcid] long lcid);
        [id(0x00000590), propget, helpcontext(0x00010590)]
        HRESULT EnableCalculation([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000590), propput, helpcontext(0x00010590)]
        HRESULT EnableCalculation([in] VARIANT_BOOL RHS);
        [id(0x000000ee), propget, helpcontext(0x000100ee)]
        HRESULT Cells([out, retval] Range** RHS);
        [id(0x00000424), helpcontext(0x00010424)]
        HRESULT ChartObjects(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000338), hidden, helpcontext(0x00010338)]
        HRESULT CheckBoxes(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x000001f9), helpcontext(0x000101f9)]
        HRESULT CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [in, lcid] long lcid);
        [id(0x0000042d), propget, helpcontext(0x0001042d)]
        HRESULT CircularReference(
                        [in, lcid] long lcid, 
                        [out, retval] Range** RHS);
        [id(0x000003ca), helpcontext(0x000103ca)]
        HRESULT ClearArrows([in, lcid] long lcid);
        [id(0x000000f1), propget, helpcontext(0x000100f1)]
        HRESULT Columns([out, retval] Range** RHS);
        [id(0x00000315), propget, helpcontext(0x00010315)]
        HRESULT ConsolidationFunction(
                        [in, lcid] long lcid, 
                        [out, retval] XlConsolidationFunction* RHS);
        [id(0x00000316), propget, helpcontext(0x00010316)]
        HRESULT ConsolidationOptions(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000317), propget, helpcontext(0x00010317)]
        HRESULT ConsolidationSources(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000283), propget, hidden, helpcontext(0x00010283)]
        HRESULT DisplayAutomaticPageBreaks(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000283), propput, hidden, helpcontext(0x00010283)]
        HRESULT DisplayAutomaticPageBreaks(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000304), hidden, helpcontext(0x00010304)]
        HRESULT Drawings(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000058), hidden, helpcontext(0x00010058)]
        HRESULT DrawingObjects(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000344), hidden, helpcontext(0x00010344)]
        HRESULT DropDowns(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000484), propget, helpcontext(0x00010484)]
        HRESULT EnableAutoFilter(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000484), propput, helpcontext(0x00010484)]
        HRESULT EnableAutoFilter(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000591), propget, helpcontext(0x00010591)]
        HRESULT EnableSelection([out, retval] XlEnableSelection* RHS);
        [id(0x00000591), propput, helpcontext(0x00010591)]
        HRESULT EnableSelection([in] XlEnableSelection RHS);
        [id(0x00000485), propget, helpcontext(0x00010485)]
        HRESULT EnableOutlining(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000485), propput, helpcontext(0x00010485)]
        HRESULT EnableOutlining(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000486), propget, helpcontext(0x00010486)]
        HRESULT EnablePivotTable(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000486), propput, helpcontext(0x00010486)]
        HRESULT EnablePivotTable(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000001), helpcontext(0x00010001)]
        HRESULT Evaluate(
                        [in] VARIANT Name, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0xfffffffb), helpcontext(0x0000fffb)]
        HRESULT _Evaluate(
                        [in] VARIANT Name, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000320), propget, helpcontext(0x00010320)]
        HRESULT FilterMode(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000592), helpcontext(0x00010592)]
        HRESULT ResetAllPageBreaks();
        [id(0x00000342), hidden, helpcontext(0x00010342)]
        HRESULT GroupBoxes(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000459), hidden, helpcontext(0x00010459)]
        HRESULT GroupObjects(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000349), hidden, helpcontext(0x00010349)]
        HRESULT Labels(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x000002ff), hidden, helpcontext(0x000102ff)]
        HRESULT Lines(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000340), hidden, helpcontext(0x00010340)]
        HRESULT ListBoxes(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x000001ba), propget, helpcontext(0x000101ba)]
        HRESULT Names([out, retval] Names** RHS);
        [id(0x0000031f), helpcontext(0x0001031f)]
        HRESULT OLEObjects(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000271), propget, hidden, helpcontext(0x00010271)]
        HRESULT OnCalculate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000271), propput, hidden, helpcontext(0x00010271)]
        HRESULT OnCalculate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000275), propget, hidden, helpcontext(0x00010275)]
        HRESULT OnData(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000275), propput, hidden, helpcontext(0x00010275)]
        HRESULT OnData(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000273), propget, hidden, helpcontext(0x00010273)]
        HRESULT OnEntry(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000273), propput, hidden, helpcontext(0x00010273)]
        HRESULT OnEntry(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x0000033a), hidden, helpcontext(0x0001033a)]
        HRESULT OptionButtons(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000066), propget, helpcontext(0x00010066)]
        HRESULT Outline([out, retval] Outline** RHS);
        [id(0x00000321), hidden, helpcontext(0x00010321)]
        HRESULT Ovals(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x000000d3), helpcontext(0x000100d3)]
        HRESULT Paste(
                        [in, optional] VARIANT Destination, 
                        [in, optional] VARIANT Link, 
                        [in, lcid] long lcid);
        [id(0x00000403), hidden, helpcontext(0x00010403)]
        HRESULT _PasteSpecial(
                        [in, optional] VARIANT Format, 
                        [in, optional] VARIANT Link, 
                        [in, optional] VARIANT DisplayAsIcon, 
                        [in, optional] VARIANT IconFileName, 
                        [in, optional] VARIANT IconIndex, 
                        [in, optional] VARIANT IconLabel, 
                        [in, lcid] long lcid);
        [id(0x00000303), hidden, helpcontext(0x00010303)]
        HRESULT Pictures(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x000002b2), helpcontext(0x000102b2)]
        HRESULT PivotTables(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x000002ac), helpcontext(0x000102ac)]
        HRESULT PivotTableWizard(
                        [in, optional] VARIANT SourceType, 
                        [in, optional] VARIANT SourceData, 
                        [in, optional] VARIANT TableDestination, 
                        [in, optional] VARIANT TableName, 
                        [in, optional] VARIANT RowGrand, 
                        [in, optional] VARIANT ColumnGrand, 
                        [in, optional] VARIANT SaveData, 
                        [in, optional] VARIANT HasAutoFormat, 
                        [in, optional] VARIANT AutoPage, 
                        [in, optional] VARIANT Reserved, 
                        [in, optional] VARIANT BackgroundQuery, 
                        [in, optional] VARIANT OptimizeCache, 
                        [in, optional] VARIANT PageFieldOrder, 
                        [in, optional] VARIANT PageFieldWrapCount, 
                        [in, optional] VARIANT ReadData, 
                        [in, optional] VARIANT Connection, 
                        [in, lcid] long lcid, 
                        [out, retval] PivotTable** RHS);
        [id(0x000000c5), propget, helpcontext(0x000100c5)]
        HRESULT Range(
                        [in] VARIANT Cell1, 
                        [in, optional] VARIANT Cell2, 
                        [out, retval] Range** RHS);
        [id(0x00000306), hidden, helpcontext(0x00010306)]
        HRESULT Rectangles(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000102), propget, helpcontext(0x00010102)]
        HRESULT Rows([out, retval] Range** RHS);
        [id(0x0000038c), helpcontext(0x0001038c)]
        HRESULT Scenarios(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000599), propget, helpcontext(0x00010599)]
        HRESULT ScrollArea([out, retval] BSTR* RHS);
        [id(0x00000599), propput, helpcontext(0x00010599)]
        HRESULT ScrollArea([in] BSTR RHS);
        [id(0x0000033e), hidden, helpcontext(0x0001033e)]
        HRESULT ScrollBars(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x0000031a), helpcontext(0x0001031a)]
        HRESULT ShowAllData([in, lcid] long lcid);
        [id(0x00000199), helpcontext(0x00010199)]
        HRESULT ShowDataForm([in, lcid] long lcid);
        [id(0x00000346), hidden, helpcontext(0x00010346)]
        HRESULT Spinners(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000197), propget, helpcontext(0x00010197)]
        HRESULT StandardHeight(
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x00000198), propget, helpcontext(0x00010198)]
        HRESULT StandardWidth(
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x00000198), propput, helpcontext(0x00010198)]
        HRESULT StandardWidth(
                        [in, lcid] long lcid, 
                        [in] double RHS);
        [id(0x00000309), hidden, helpcontext(0x00010309)]
        HRESULT TextBoxes(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000192), propget, helpcontext(0x00010192)]
        HRESULT TransitionFormEntry(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000192), propput, helpcontext(0x00010192)]
        HRESULT TransitionFormEntry(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000006c), propget, helpcontext(0x0001006c)]
        HRESULT Type(
                        [in, lcid] long lcid, 
                        [out, retval] XlSheetType* RHS);
        [id(0x0000019c), propget, helpcontext(0x0001019c)]
        HRESULT UsedRange(
                        [in, lcid] long lcid, 
                        [out, retval] Range** RHS);
        [id(0x0000058a), propget, helpcontext(0x0001058a)]
        HRESULT HPageBreaks([out, retval] HPageBreaks** RHS);
        [id(0x0000058b), propget, helpcontext(0x0001058b)]
        HRESULT VPageBreaks([out, retval] VPageBreaks** RHS);
        [id(0x0000059a), propget, helpcontext(0x0001059a)]
        HRESULT QueryTables([out, retval] QueryTables** RHS);
        [id(0x0000059b), propget, helpcontext(0x0001059b)]
        HRESULT DisplayPageBreaks([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000059b), propput, helpcontext(0x0001059b)]
        HRESULT DisplayPageBreaks([in] VARIANT_BOOL RHS);
        [id(0x0000023f), propget, helpcontext(0x0001023f)]
        HRESULT Comments([out, retval] Comments** RHS);
        [id(0x00000571), propget, helpcontext(0x00010571)]
        HRESULT Hyperlinks([out, retval] Hyperlinks** RHS);
        [id(0x0000059c), helpcontext(0x0001059c)]
        HRESULT ClearCircles();
        [id(0x0000059d), helpcontext(0x0001059d)]
        HRESULT CircleInvalid();
        [id(0x00000288), propget, hidden, helpcontext(0x00010288)]
        HRESULT _DisplayRightToLeft(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000288), propput, hidden, helpcontext(0x00010288)]
        HRESULT _DisplayRightToLeft(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x00000319), propget, helpcontext(0x00010319)]
        HRESULT AutoFilter([out, retval] AutoFilter** RHS);
        [id(0x000006ee), propget, helpcontext(0x000106ee)]
        HRESULT DisplayRightToLeft(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000006ee), propput, helpcontext(0x000106ee)]
        HRESULT DisplayRightToLeft(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000718), propget, hidden, helpcontext(0x00010718)]
        HRESULT Scripts([out, retval] Scripts** RHS);
        [id(0x000006ec), hidden, helpcontext(0x000106ec)]
        HRESULT _PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, lcid] long lcid);
        [id(0x00000719), hidden, helpcontext(0x00010719)]
        HRESULT _CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [in, optional] VARIANT IgnoreFinalYaa, 
                        [in, optional] VARIANT SpellScript, 
                        [in, lcid] long lcid);
        [id(0x00000411), propget, helpcontext(0x00010411)]
        HRESULT Tab([out, retval] Tab** RHS);
        [id(0x000007e5), propget, helpcontext(0x000107e5)]
        HRESULT MailEnvelope([out, retval] MsoEnvelope** RHS);
        [id(0x00000785), helpcontext(0x00010785)]
        HRESULT SaveAs(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT FileFormat, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT ReadOnlyRecommended, 
                        [in, optional] VARIANT CreateBackup, 
                        [in, optional] VARIANT AddToMru, 
                        [in, optional] VARIANT TextCodepage, 
                        [in, optional] VARIANT TextVisualLayout, 
                        [in, optional] VARIANT Local);
        [id(0x000007ee), propget, helpcontext(0x000107ee)]
        HRESULT CustomProperties([out, retval] CustomProperties** RHS);
        [id(0x000007e0), propget, helpcontext(0x000107e0)]
        HRESULT SmartTags([out, retval] SmartTags** RHS);
        [id(0x000000b0), propget, helpcontext(0x000100b0)]
        HRESULT Protection([out, retval] Protection** RHS);
        [id(0x00000788), helpcontext(0x00010788)]
        HRESULT PasteSpecial(
                        [in, optional] VARIANT Format, 
                        [in, optional] VARIANT Link, 
                        [in, optional] VARIANT DisplayAsIcon, 
                        [in, optional] VARIANT IconFileName, 
                        [in, optional] VARIANT IconIndex, 
                        [in, optional] VARIANT IconLabel, 
                        [in, optional] VARIANT NoHTMLFormatting, 
                        [in, lcid] long lcid);
        [id(0x000007ed), helpcontext(0x000107ed)]
        HRESULT Protect(
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT DrawingObjects, 
                        [in, optional] VARIANT Contents, 
                        [in, optional] VARIANT Scenarios, 
                        [in, optional] VARIANT UserInterfaceOnly, 
                        [in, optional] VARIANT AllowFormattingCells, 
                        [in, optional] VARIANT AllowFormattingColumns, 
                        [in, optional] VARIANT AllowFormattingRows, 
                        [in, optional] VARIANT AllowInsertingColumns, 
                        [in, optional] VARIANT AllowInsertingRows, 
                        [in, optional] VARIANT AllowInsertingHyperlinks, 
                        [in, optional] VARIANT AllowDeletingColumns, 
                        [in, optional] VARIANT AllowDeletingRows, 
                        [in, optional] VARIANT AllowSorting, 
                        [in, optional] VARIANT AllowFiltering, 
                        [in, optional] VARIANT AllowUsingPivotTables);
        [id(0x000008d3), propget, helpcontext(0x000108d3)]
        HRESULT ListObjects([out, retval] ListObjects** RHS);
        [id(0x000008d4), helpcontext(0x000108d4)]
        HRESULT XmlDataQuery(
                        [in] BSTR XPath, 
                        [in, optional] VARIANT SelectionNamespaces, 
                        [in, optional] VARIANT Map, 
                        [out, retval] Range** RHS);
        [id(0x000008d7), helpcontext(0x000108d7)]
        HRESULT XmlMapQuery(
                        [in] BSTR XPath, 
                        [in, optional] VARIANT SelectionNamespaces, 
                        [in, optional] VARIANT Map, 
                        [out, retval] Range** RHS);
        [id(0x00000939), helpcontext(0x00010939)]
        HRESULT PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, optional] VARIANT IgnorePrintAreas, 
                        [in, lcid] long lcid);
        [id(0x000009cf), propget, helpcontext(0x000109cf)]
        HRESULT EnableFormatConditionsCalculation([out, retval] VARIANT_BOOL* RHS);
        [id(0x000009cf), propput, helpcontext(0x000109cf)]
        HRESULT EnableFormatConditionsCalculation([in] VARIANT_BOOL RHS);
        [id(0x00000370), propget, helpcontext(0x00010370)]
        HRESULT Sort([out, retval] Sort** RHS);
        [id(0x000009bd), helpcontext(0x000109bd)]
        HRESULT ExportAsFixedFormat(
                        [in] XlFixedFormatType Type, 
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT Quality, 
                        [in, optional] VARIANT IncludeDocProperties, 
                        [in, optional] VARIANT IgnorePrintAreas, 
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT OpenAfterPublish, 
                        [in, optional] VARIANT FixedFormatExtClassPtr);
    };

    [
      odl,
      uuid(000208B1-0001-0000-C000-000000000046),
      helpcontext(0x00020071),
      hidden
    ]
    interface IWorksheets : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, optional] VARIANT Count, 
                        [in, optional] VARIANT Type, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([in, lcid] long lcid);
        [helpcontext(0x000101d5)]
        HRESULT _stdcall FillAcrossSheets(
                        [in] Range* Range, 
                        [in, optional, defaultvalue(-4104)] XlFillWith Type, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0001027d)]
        HRESULT _stdcall Move(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [hidden, helpcontext(0x00010389)]
        HRESULT _stdcall __PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, lcid] long lcid);
        [helpcontext(0x00010119)]
        HRESULT _stdcall PrintPreview(
                        [in, optional] VARIANT EnableChanges, 
                        [in, lcid] long lcid);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x0001058a)]
        HRESULT _stdcall HPageBreaks([out, retval] HPageBreaks** RHS);
        [propget, helpcontext(0x0001058b)]
        HRESULT _stdcall VPageBreaks([out, retval] VPageBreaks** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible(
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x000106ec)]
        HRESULT _stdcall _PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, lcid] long lcid);
        [helpcontext(0x00010939)]
        HRESULT _stdcall PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, optional] VARIANT IgnorePrintAreas, 
                        [in, lcid] long lcid);
    };





































































































    /* Dispinterfaces descriptions */

    [
      uuid(00024413-0000-0000-C000-000000000046),
      helpstring("dispinterface AppEvents"),
      hidden
    ]
    dispinterface AppEvents {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x0000061d), helpcontext(0x0001061d)]
            void NewWorkbook([in] Workbook* Wb);
            [id(0x00000616), helpcontext(0x00010616)]
            void SheetSelectionChange(
                            [in] IDispatch* Sh, 
                            [in] Range* Target);
            [id(0x00000617), helpcontext(0x00010617)]
            void SheetBeforeDoubleClick(
                            [in] IDispatch* Sh, 
                            [in] Range* Target, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000618), helpcontext(0x00010618)]
            void SheetBeforeRightClick(
                            [in] IDispatch* Sh, 
                            [in] Range* Target, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000619), helpcontext(0x00010619)]
            void SheetActivate([in] IDispatch* Sh);
            [id(0x0000061a), helpcontext(0x0001061a)]
            void SheetDeactivate([in] IDispatch* Sh);
            [id(0x0000061b), helpcontext(0x0001061b)]
            void SheetCalculate([in] IDispatch* Sh);
            [id(0x0000061c), helpcontext(0x0001061c)]
            void SheetChange(
                            [in] IDispatch* Sh, 
                            [in] Range* Target);
            [id(0x0000061f), helpcontext(0x0001061f)]
            void WorkbookOpen([in] Workbook* Wb);
            [id(0x00000620), helpcontext(0x00010620)]
            void WorkbookActivate([in] Workbook* Wb);
            [id(0x00000621), helpcontext(0x00010621)]
            void WorkbookDeactivate([in] Workbook* Wb);
            [id(0x00000622), helpcontext(0x00010622)]
            void WorkbookBeforeClose(
                            [in] Workbook* Wb, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000623), helpcontext(0x00010623)]
            void WorkbookBeforeSave(
                            [in] Workbook* Wb, 
                            [in] VARIANT_BOOL SaveAsUI, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000624), helpcontext(0x00010624)]
            void WorkbookBeforePrint(
                            [in] Workbook* Wb, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000625), helpcontext(0x00010625)]
            void WorkbookNewSheet(
                            [in] Workbook* Wb, 
                            [in] IDispatch* Sh);
            [id(0x00000626), helpcontext(0x00010626)]
            void WorkbookAddinInstall([in] Workbook* Wb);
            [id(0x00000627), helpcontext(0x00010627)]
            void WorkbookAddinUninstall([in] Workbook* Wb);
            [id(0x00000612), helpcontext(0x00010612)]
            void WindowResize(
                            [in] Workbook* Wb, 
                            [in] Window* Wn);
            [id(0x00000614), helpcontext(0x00010614)]
            void WindowActivate(
                            [in] Workbook* Wb, 
                            [in] Window* Wn);
            [id(0x00000615), helpcontext(0x00010615)]
            void WindowDeactivate(
                            [in] Workbook* Wb, 
                            [in] Window* Wn);
            [id(0x0000073e), helpcontext(0x0001073e)]
            void SheetFollowHyperlink(
                            [in] IDispatch* Sh, 
                            [in] Hyperlink* Target);
            [id(0x0000086d), helpcontext(0x0001086d)]
            void SheetPivotTableUpdate(
                            [in] IDispatch* Sh, 
                            [in] PivotTable* Target);
            [id(0x00000870), helpcontext(0x00010870)]
            void WorkbookPivotTableCloseConnection(
                            [in] Workbook* Wb, 
                            [in] PivotTable* Target);
            [id(0x00000871), helpcontext(0x00010871)]
            void WorkbookPivotTableOpenConnection(
                            [in] Workbook* Wb, 
                            [in] PivotTable* Target);
            [id(0x000008f1), helpcontext(0x000108f1)]
            void WorkbookSync(
                            [in] Workbook* Wb, 
                            [in] MsoSyncEventType SyncEventType);
            [id(0x000008f2), helpcontext(0x000108f2)]
            void WorkbookBeforeXmlImport(
                            [in] Workbook* Wb, 
                            [in] XmlMap* Map, 
                            [in] BSTR Url, 
                            [in] VARIANT_BOOL IsRefresh, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x000008f3), helpcontext(0x000108f3)]
            void WorkbookAfterXmlImport(
                            [in] Workbook* Wb, 
                            [in] XmlMap* Map, 
                            [in] VARIANT_BOOL IsRefresh, 
                            [in] XlXmlImportResult Result);
            [id(0x000008f4), helpcontext(0x000108f4)]
            void WorkbookBeforeXmlExport(
                            [in] Workbook* Wb, 
                            [in] XmlMap* Map, 
                            [in] BSTR Url, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x000008f5), helpcontext(0x000108f5)]
            void WorkbookAfterXmlExport(
                            [in] Workbook* Wb, 
                            [in] XmlMap* Map, 
                            [in] BSTR Url, 
                            [in] XlXmlExportResult Result);
            [id(0x00000a33), helpcontext(0x00010a33)]
            void WorkbookRowsetComplete(
                            [in] Workbook* Wb, 
                            [in] BSTR Description, 
                            [in] BSTR Sheet, 
                            [in] VARIANT_BOOL Success);
            [id(0x00000a34), helpcontext(0x00010a34)]
            void AfterCalculate();
    };

    [
      uuid(00024412-0000-0000-C000-000000000046),
      helpcontext(0x000200a8),
      hidden
    ]
    dispinterface WorkbookEvents {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000783), helpcontext(0x00010783)]
            void Open();
            [id(0x00000130), helpcontext(0x00010130)]
            void Activate();
            [id(0x000005fa), helpcontext(0x000105fa)]
            void Deactivate();
            [id(0x0000060a), helpcontext(0x0001060a)]
            void BeforeClose([in, out] VARIANT_BOOL* Cancel);
            [id(0x0000060b), helpcontext(0x0001060b)]
            void BeforeSave(
                            [in] VARIANT_BOOL SaveAsUI, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x0000060d), helpcontext(0x0001060d)]
            void BeforePrint([in, out] VARIANT_BOOL* Cancel);
            [id(0x0000060e), helpcontext(0x0001060e)]
            void NewSheet([in] IDispatch* Sh);
            [id(0x00000610), helpcontext(0x00010610)]
            void AddinInstall();
            [id(0x00000611), helpcontext(0x00010611)]
            void AddinUninstall();
            [id(0x00000612), helpcontext(0x00010612)]
            void WindowResize([in] Window* Wn);
            [id(0x00000614), helpcontext(0x00010614)]
            void WindowActivate([in] Window* Wn);
            [id(0x00000615), helpcontext(0x00010615)]
            void WindowDeactivate([in] Window* Wn);
            [id(0x00000616), helpcontext(0x00010616)]
            void SheetSelectionChange(
                            [in] IDispatch* Sh, 
                            [in] Range* Target);
            [id(0x00000617), helpcontext(0x00010617)]
            void SheetBeforeDoubleClick(
                            [in] IDispatch* Sh, 
                            [in] Range* Target, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000618), helpcontext(0x00010618)]
            void SheetBeforeRightClick(
                            [in] IDispatch* Sh, 
                            [in] Range* Target, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000619), helpcontext(0x00010619)]
            void SheetActivate([in] IDispatch* Sh);
            [id(0x0000061a), helpcontext(0x0001061a)]
            void SheetDeactivate([in] IDispatch* Sh);
            [id(0x0000061b), helpcontext(0x0001061b)]
            void SheetCalculate([in] IDispatch* Sh);
            [id(0x0000061c), helpcontext(0x0001061c)]
            void SheetChange(
                            [in] IDispatch* Sh, 
                            [in] Range* Target);
            [id(0x0000073e), helpcontext(0x0001073e)]
            void SheetFollowHyperlink(
                            [in] IDispatch* Sh, 
                            [in] Hyperlink* Target);
            [id(0x0000086d), helpcontext(0x0001086d)]
            void SheetPivotTableUpdate(
                            [in] IDispatch* Sh, 
                            [in] PivotTable* Target);
            [id(0x0000086e), helpcontext(0x0001086e)]
            void PivotTableCloseConnection([in] PivotTable* Target);
            [id(0x0000086f), helpcontext(0x0001086f)]
            void PivotTableOpenConnection([in] PivotTable* Target);
            [id(0x000008da), helpcontext(0x000108da)]
            void Sync([in] MsoSyncEventType SyncEventType);
            [id(0x000008eb), helpcontext(0x000108eb)]
            void BeforeXmlImport(
                            [in] XmlMap* Map, 
                            [in] BSTR Url, 
                            [in] VARIANT_BOOL IsRefresh, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x000008ed), helpcontext(0x000108ed)]
            void AfterXmlImport(
                            [in] XmlMap* Map, 
                            [in] VARIANT_BOOL IsRefresh, 
                            [in] XlXmlImportResult Result);
            [id(0x000008ef), helpcontext(0x000108ef)]
            void BeforeXmlExport(
                            [in] XmlMap* Map, 
                            [in] BSTR Url, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x000008f0), helpcontext(0x000108f0)]
            void AfterXmlExport(
                            [in] XmlMap* Map, 
                            [in] BSTR Url, 
                            [in] XlXmlExportResult Result);
            [id(0x00000a32), helpcontext(0x00010a32)]
            void RowsetComplete(
                            [in] BSTR Description, 
                            [in] BSTR Sheet, 
                            [in] VARIANT_BOOL Success);
    };

    [
      uuid(0002441D-0000-0000-C000-000000000046),
      helpcontext(0x000200b3)
    ]
    dispinterface PivotCaches {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            PivotCache* Item([in] VARIANT Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            PivotCache* _Default([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000b5), hidden, helpcontext(0x000100b5)]
            PivotCache* Add(
                            [in] XlPivotTableSourceType SourceType, 
                            [in, optional] VARIANT SourceData);
            [id(0x00000768), helpcontext(0x00010768)]
            PivotCache* Create(
                            [in] XlPivotTableSourceType SourceType, 
                            [in, optional] VARIANT SourceData, 
                            [in, optional] VARIANT Version);
    };

    [
      uuid(000208B8-0000-0000-C000-000000000046),
      helpcontext(0x00020078)
    ]
    dispinterface Names {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            Name* Add(
                            [in, optional] VARIANT Name, 
                            [in, optional] VARIANT RefersTo, 
                            [in, optional] VARIANT Visible, 
                            [in, optional] VARIANT MacroType, 
                            [in, optional] VARIANT ShortcutKey, 
                            [in, optional] VARIANT Category, 
                            [in, optional] VARIANT NameLocal, 
                            [in, optional] VARIANT RefersToLocal, 
                            [in, optional] VARIANT CategoryLocal, 
                            [in, optional] VARIANT RefersToR1C1, 
                            [in, optional] VARIANT RefersToR1C1Local);
            [id(0x000000aa), helpcontext(0x000100aa)]
            Name* Item(
                            [in, optional] VARIANT Index, 
                            [in, optional] VARIANT IndexLocal, 
                            [in, optional] VARIANT RefersTo);
            [id(00000000), helpcontext(0x00010000)]
            Name* _Default(
                            [in, optional] VARIANT Index, 
                            [in, optional] VARIANT IndexLocal, 
                            [in, optional] VARIANT RefersTo);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(000208B9-0000-0000-C000-000000000046),
      helpcontext(0x00020079)
    ]
    dispinterface Name {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(00000000), propget, helpcontext(0x00010000)]
            BSTR _Default();
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x000003a6), propget, helpcontext(0x000103a6)]
            BSTR Category();
            [id(0x000003a6), propput, helpcontext(0x000103a6)]
            void Category([in] BSTR rhs);
            [id(0x000003a7), propget, helpcontext(0x000103a7)]
            BSTR CategoryLocal();
            [id(0x000003a7), propput, helpcontext(0x000103a7)]
            void CategoryLocal([in] BSTR rhs);
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x000003a8), propget, helpcontext(0x000103a8)]
            XlXLMMacroType MacroType();
            [id(0x000003a8), propput, helpcontext(0x000103a8)]
            void MacroType([in] XlXLMMacroType rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x000003aa), propget, helpcontext(0x000103aa)]
            VARIANT RefersTo();
            [id(0x000003aa), propput, helpcontext(0x000103aa)]
            void RefersTo([in] VARIANT rhs);
            [id(0x00000255), propget, helpcontext(0x00010255)]
            BSTR ShortcutKey();
            [id(0x00000255), propput, helpcontext(0x00010255)]
            void ShortcutKey([in] BSTR rhs);
            [id(0x00000006), propget, helpcontext(0x00010006)]
            BSTR Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] BSTR rhs);
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x000003a9), propget, helpcontext(0x000103a9)]
            BSTR NameLocal();
            [id(0x000003a9), propput, helpcontext(0x000103a9)]
            void NameLocal([in] BSTR rhs);
            [id(0x000003ab), propget, helpcontext(0x000103ab)]
            VARIANT RefersToLocal();
            [id(0x000003ab), propput, helpcontext(0x000103ab)]
            void RefersToLocal([in] VARIANT rhs);
            [id(0x000003ac), propget, helpcontext(0x000103ac)]
            VARIANT RefersToR1C1();
            [id(0x000003ac), propput, helpcontext(0x000103ac)]
            void RefersToR1C1([in] VARIANT rhs);
            [id(0x000003ad), propget, helpcontext(0x000103ad)]
            VARIANT RefersToR1C1Local();
            [id(0x000003ad), propput, helpcontext(0x000103ad)]
            void RefersToR1C1Local([in] VARIANT rhs);
            [id(0x00000488), propget, helpcontext(0x00010488)]
            Range* RefersToRange();
            [id(0x0000038e), propget, helpcontext(0x0001038e)]
            BSTR Comment();
            [id(0x0000038e), propput, helpcontext(0x0001038e)]
            void Comment([in] BSTR rhs);
            [id(0x00000a2f), propget, helpcontext(0x00010a2f)]
            VARIANT_BOOL WorkbookParameter();
            [id(0x00000a2f), propput, helpcontext(0x00010a2f)]
            void WorkbookParameter([in] VARIANT_BOOL rhs);
            [id(0x00000a30), propget, helpcontext(0x00010a30)]
            VARIANT_BOOL ValidWorkbookParameter();
    };

    [
      uuid(00020855-0000-0000-C000-000000000046),
      helpcontext(0x00020015)
    ]
    dispinterface Borders {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000063), propget, helpcontext(0x00010063)]
            VARIANT Color();
            [id(0x00000063), propput, helpcontext(0x00010063)]
            void Color([in] VARIANT rhs);
            [id(0x00000061), propget, helpcontext(0x00010061)]
            VARIANT ColorIndex();
            [id(0x00000061), propput, helpcontext(0x00010061)]
            void ColorIndex([in] VARIANT rhs);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            Border* Item([in] XlBordersIndex Index);
            [id(0x00000077), propget, helpcontext(0x00010077)]
            VARIANT LineStyle();
            [id(0x00000077), propput, helpcontext(0x00010077)]
            void LineStyle([in] VARIANT rhs);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x00000006), propget, helpcontext(0x00010006)]
            VARIANT Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] VARIANT rhs);
            [id(0x00000078), propget, helpcontext(0x00010078)]
            VARIANT Weight();
            [id(0x00000078), propput, helpcontext(0x00010078)]
            void Weight([in] VARIANT rhs);
            [id(00000000), propget, helpcontext(0x00010000)]
            Border* _Default([in] XlBordersIndex Index);
            [id(0x0000093d), propget, helpcontext(0x0001093d)]
            VARIANT ThemeColor();
            [id(0x0000093d), propput, helpcontext(0x0001093d)]
            void ThemeColor([in] VARIANT rhs);
            [id(0x0000093e), propget, helpcontext(0x0001093e)]
            VARIANT TintAndShade();
            [id(0x0000093e), propput, helpcontext(0x0001093e)]
            void TintAndShade([in] VARIANT rhs);
    };

    [
      uuid(00020854-0000-0000-C000-000000000046),
      helpcontext(0x00020014)
    ]
    dispinterface Border {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000063), propget, helpcontext(0x00010063)]
            VARIANT Color();
            [id(0x00000063), propput, helpcontext(0x00010063)]
            void Color([in] VARIANT rhs);
            [id(0x00000061), propget, helpcontext(0x00010061)]
            VARIANT ColorIndex();
            [id(0x00000061), propput, helpcontext(0x00010061)]
            void ColorIndex([in] VARIANT rhs);
            [id(0x00000077), propget, helpcontext(0x00010077)]
            VARIANT LineStyle();
            [id(0x00000077), propput, helpcontext(0x00010077)]
            void LineStyle([in] VARIANT rhs);
            [id(0x00000078), propget, helpcontext(0x00010078)]
            VARIANT Weight();
            [id(0x00000078), propput, helpcontext(0x00010078)]
            void Weight([in] VARIANT rhs);
            [id(0x0000093d), propget, helpcontext(0x0001093d)]
            VARIANT ThemeColor();
            [id(0x0000093d), propput, helpcontext(0x0001093d)]
            void ThemeColor([in] VARIANT rhs);
            [id(0x0000093e), propget, helpcontext(0x0001093e)]
            VARIANT TintAndShade();
            [id(0x0000093e), propput, helpcontext(0x0001093e)]
            void TintAndShade([in] VARIANT rhs);
    };

    [
      uuid(00020870-0000-0000-C000-000000000046),
      helpcontext(0x00020030)
    ]
    dispinterface Interior {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000063), propget, helpcontext(0x00010063)]
            VARIANT Color();
            [id(0x00000063), propput, helpcontext(0x00010063)]
            void Color([in] VARIANT rhs);
            [id(0x00000061), propget, helpcontext(0x00010061)]
            VARIANT ColorIndex();
            [id(0x00000061), propput, helpcontext(0x00010061)]
            void ColorIndex([in] VARIANT rhs);
            [id(0x00000084), propget, helpcontext(0x00010084)]
            VARIANT InvertIfNegative();
            [id(0x00000084), propput, helpcontext(0x00010084)]
            void InvertIfNegative([in] VARIANT rhs);
            [id(0x0000005f), propget, helpcontext(0x0001005f)]
            VARIANT Pattern();
            [id(0x0000005f), propput, helpcontext(0x0001005f)]
            void Pattern([in] VARIANT rhs);
            [id(0x00000064), propget, helpcontext(0x00010064)]
            VARIANT PatternColor();
            [id(0x00000064), propput, helpcontext(0x00010064)]
            void PatternColor([in] VARIANT rhs);
            [id(0x00000062), propget, helpcontext(0x00010062)]
            VARIANT PatternColorIndex();
            [id(0x00000062), propput, helpcontext(0x00010062)]
            void PatternColorIndex([in] VARIANT rhs);
            [id(0x0000093d), propget, helpcontext(0x0001093d)]
            VARIANT ThemeColor();
            [id(0x0000093d), propput, helpcontext(0x0001093d)]
            void ThemeColor([in] VARIANT rhs);
            [id(0x0000093e), propget, helpcontext(0x0001093e)]
            VARIANT TintAndShade();
            [id(0x0000093e), propput, helpcontext(0x0001093e)]
            void TintAndShade([in] VARIANT rhs);
            [id(0x00000a53), propget, helpcontext(0x00010a53)]
            VARIANT PatternThemeColor();
            [id(0x00000a53), propput, helpcontext(0x00010a53)]
            void PatternThemeColor([in] VARIANT rhs);
            [id(0x00000a54), propget, helpcontext(0x00010a54)]
            VARIANT PatternTintAndShade();
            [id(0x00000a54), propput, helpcontext(0x00010a54)]
            void PatternTintAndShade([in] VARIANT rhs);
            [id(0x00000a55), propget, helpcontext(0x00010a55)]
            IDispatch* Gradient();
    };

    [
      uuid(000208AB-0000-0000-C000-000000000046),
      helpcontext(0x0002006b)
    ]
    dispinterface Outline {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000003bf), propget, helpcontext(0x000103bf)]
            VARIANT_BOOL AutomaticStyles();
            [id(0x000003bf), propput, helpcontext(0x000103bf)]
            void AutomaticStyles([in] VARIANT_BOOL rhs);
            [id(0x000003c0), helpcontext(0x000103c0)]
            VARIANT ShowLevels(
                            [in, optional] VARIANT RowLevels, 
                            [in, optional] VARIANT ColumnLevels);
            [id(0x000003c1), propget, helpcontext(0x000103c1)]
            XlSummaryColumn SummaryColumn();
            [id(0x000003c1), propput, helpcontext(0x000103c1)]
            void SummaryColumn([in] XlSummaryColumn rhs);
            [id(0x00000386), propget, helpcontext(0x00010386)]
            XlSummaryRow SummaryRow();
            [id(0x00000386), propput, helpcontext(0x00010386)]
            void SummaryRow([in] XlSummaryRow rhs);
    };

    [
      uuid(000208B4-0000-0000-C000-000000000046),
      helpcontext(0x00020074)
    ]
    dispinterface PageSetup {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000003f1), propget, helpcontext(0x000103f1)]
            VARIANT_BOOL BlackAndWhite();
            [id(0x000003f1), propput, helpcontext(0x000103f1)]
            void BlackAndWhite([in] VARIANT_BOOL rhs);
            [id(0x000003ea), propget, helpcontext(0x000103ea)]
            double BottomMargin();
            [id(0x000003ea), propput, helpcontext(0x000103ea)]
            void BottomMargin([in] double rhs);
            [id(0x000003f2), propget, helpcontext(0x000103f2)]
            BSTR CenterFooter();
            [id(0x000003f2), propput, helpcontext(0x000103f2)]
            void CenterFooter([in] BSTR rhs);
            [id(0x000003f3), propget, helpcontext(0x000103f3)]
            BSTR CenterHeader();
            [id(0x000003f3), propput, helpcontext(0x000103f3)]
            void CenterHeader([in] BSTR rhs);
            [id(0x000003ed), propget, helpcontext(0x000103ed)]
            VARIANT_BOOL CenterHorizontally();
            [id(0x000003ed), propput, helpcontext(0x000103ed)]
            void CenterHorizontally([in] VARIANT_BOOL rhs);
            [id(0x000003ee), propget, helpcontext(0x000103ee)]
            VARIANT_BOOL CenterVertically();
            [id(0x000003ee), propput, helpcontext(0x000103ee)]
            void CenterVertically([in] VARIANT_BOOL rhs);
            [id(0x000003f4), propget, hidden, helpcontext(0x000103f4)]
            XlObjectSize ChartSize();
            [id(0x000003f4), propput, hidden, helpcontext(0x000103f4)]
            void ChartSize([in] XlObjectSize rhs);
            [id(0x000003fc), propget, helpcontext(0x000103fc)]
            VARIANT_BOOL Draft();
            [id(0x000003fc), propput, helpcontext(0x000103fc)]
            void Draft([in] VARIANT_BOOL rhs);
            [id(0x000003f0), propget, helpcontext(0x000103f0)]
            long FirstPageNumber();
            [id(0x000003f0), propput, helpcontext(0x000103f0)]
            void FirstPageNumber([in] long rhs);
            [id(0x000003f5), propget, helpcontext(0x000103f5)]
            VARIANT FitToPagesTall();
            [id(0x000003f5), propput, helpcontext(0x000103f5)]
            void FitToPagesTall([in] VARIANT rhs);
            [id(0x000003f6), propget, helpcontext(0x000103f6)]
            VARIANT FitToPagesWide();
            [id(0x000003f6), propput, helpcontext(0x000103f6)]
            void FitToPagesWide([in] VARIANT rhs);
            [id(0x000003f7), propget, helpcontext(0x000103f7)]
            double FooterMargin();
            [id(0x000003f7), propput, helpcontext(0x000103f7)]
            void FooterMargin([in] double rhs);
            [id(0x000003f8), propget, helpcontext(0x000103f8)]
            double HeaderMargin();
            [id(0x000003f8), propput, helpcontext(0x000103f8)]
            void HeaderMargin([in] double rhs);
            [id(0x000003f9), propget, helpcontext(0x000103f9)]
            BSTR LeftFooter();
            [id(0x000003f9), propput, helpcontext(0x000103f9)]
            void LeftFooter([in] BSTR rhs);
            [id(0x000003fa), propget, helpcontext(0x000103fa)]
            BSTR LeftHeader();
            [id(0x000003fa), propput, helpcontext(0x000103fa)]
            void LeftHeader([in] BSTR rhs);
            [id(0x000003e7), propget, helpcontext(0x000103e7)]
            double LeftMargin();
            [id(0x000003e7), propput, helpcontext(0x000103e7)]
            void LeftMargin([in] double rhs);
            [id(0x000000c0), propget, helpcontext(0x000100c0)]
            XlOrder Order();
            [id(0x000000c0), propput, helpcontext(0x000100c0)]
            void Order([in] XlOrder rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            XlPageOrientation Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] XlPageOrientation rhs);
            [id(0x000003ef), propget, helpcontext(0x000103ef)]
            XlPaperSize PaperSize();
            [id(0x000003ef), propput, helpcontext(0x000103ef)]
            void PaperSize([in] XlPaperSize rhs);
            [id(0x000003fb), propget, helpcontext(0x000103fb)]
            BSTR PrintArea();
            [id(0x000003fb), propput, helpcontext(0x000103fb)]
            void PrintArea([in] BSTR rhs);
            [id(0x000003ec), propget, helpcontext(0x000103ec)]
            VARIANT_BOOL PrintGridlines();
            [id(0x000003ec), propput, helpcontext(0x000103ec)]
            void PrintGridlines([in] VARIANT_BOOL rhs);
            [id(0x000003eb), propget, helpcontext(0x000103eb)]
            VARIANT_BOOL PrintHeadings();
            [id(0x000003eb), propput, helpcontext(0x000103eb)]
            void PrintHeadings([in] VARIANT_BOOL rhs);
            [id(0x000003fd), propget, helpcontext(0x000103fd)]
            VARIANT_BOOL PrintNotes();
            [id(0x000003fd), propput, helpcontext(0x000103fd)]
            void PrintNotes([in] VARIANT_BOOL rhs);
            [id(0x000003fe), propget, helpcontext(0x000103fe)]
            VARIANT PrintQuality([in, optional] VARIANT Index);
            [id(0x000003fe), propput, helpcontext(0x000103fe)]
            void PrintQuality(
                            [in, optional] VARIANT Index, 
                            [in] VARIANT rhs);
            [id(0x000003ff), propget, helpcontext(0x000103ff)]
            BSTR PrintTitleColumns();
            [id(0x000003ff), propput, helpcontext(0x000103ff)]
            void PrintTitleColumns([in] BSTR rhs);
            [id(0x00000400), propget, helpcontext(0x00010400)]
            BSTR PrintTitleRows();
            [id(0x00000400), propput, helpcontext(0x00010400)]
            void PrintTitleRows([in] BSTR rhs);
            [id(0x00000401), propget, helpcontext(0x00010401)]
            BSTR RightFooter();
            [id(0x00000401), propput, helpcontext(0x00010401)]
            void RightFooter([in] BSTR rhs);
            [id(0x00000402), propget, helpcontext(0x00010402)]
            BSTR RightHeader();
            [id(0x00000402), propput, helpcontext(0x00010402)]
            void RightHeader([in] BSTR rhs);
            [id(0x000003e8), propget, helpcontext(0x000103e8)]
            double RightMargin();
            [id(0x000003e8), propput, helpcontext(0x000103e8)]
            void RightMargin([in] double rhs);
            [id(0x000003e9), propget, helpcontext(0x000103e9)]
            double TopMargin();
            [id(0x000003e9), propput, helpcontext(0x000103e9)]
            void TopMargin([in] double rhs);
            [id(0x00000297), propget, helpcontext(0x00010297)]
            VARIANT Zoom();
            [id(0x00000297), propput, helpcontext(0x00010297)]
            void Zoom([in] VARIANT rhs);
            [id(0x000005f4), propget, helpcontext(0x000105f4)]
            XlPrintLocation PrintComments();
            [id(0x000005f4), propput, helpcontext(0x000105f4)]
            void PrintComments([in] XlPrintLocation rhs);
            [id(0x00000865), propget, helpcontext(0x00010865)]
            XlPrintErrors PrintErrors();
            [id(0x00000865), propput, helpcontext(0x00010865)]
            void PrintErrors([in] XlPrintErrors rhs);
            [id(0x00000866), propget, helpcontext(0x00010866)]
            Graphic* CenterHeaderPicture();
            [id(0x00000867), propget, helpcontext(0x00010867)]
            Graphic* CenterFooterPicture();
            [id(0x00000868), propget, helpcontext(0x00010868)]
            Graphic* LeftHeaderPicture();
            [id(0x00000869), propget, helpcontext(0x00010869)]
            Graphic* LeftFooterPicture();
            [id(0x0000086a), propget, helpcontext(0x0001086a)]
            Graphic* RightHeaderPicture();
            [id(0x0000086b), propget, helpcontext(0x0001086b)]
            Graphic* RightFooterPicture();
            [id(0x00000a28), propget, helpcontext(0x00010a28)]
            VARIANT_BOOL OddAndEvenPagesHeaderFooter();
            [id(0x00000a28), propput, helpcontext(0x00010a28)]
            void OddAndEvenPagesHeaderFooter([in] VARIANT_BOOL rhs);
            [id(0x00000a29), propget, helpcontext(0x00010a29)]
            VARIANT_BOOL DifferentFirstPageHeaderFooter();
            [id(0x00000a29), propput, helpcontext(0x00010a29)]
            void DifferentFirstPageHeaderFooter([in] VARIANT_BOOL rhs);
            [id(0x00000a2a), propget, helpcontext(0x00010a2a)]
            VARIANT_BOOL ScaleWithDocHeaderFooter();
            [id(0x00000a2a), propput, helpcontext(0x00010a2a)]
            void ScaleWithDocHeaderFooter([in] VARIANT_BOOL rhs);
            [id(0x00000a2b), propget, helpcontext(0x00010a2b)]
            VARIANT_BOOL AlignMarginsHeaderFooter();
            [id(0x00000a2b), propput, helpcontext(0x00010a2b)]
            void AlignMarginsHeaderFooter([in] VARIANT_BOOL rhs);
            [id(0x00000a2c), propget, helpcontext(0x00010a2c)]
            Pages* Pages();
            [id(0x00000a2d), propget, helpcontext(0x00010a2d)]
            Page* EvenPage();
            [id(0x00000a2e), propget, helpcontext(0x00010a2e)]
            Page* FirstPage();
    };

    [
      uuid(0002084D-0000-0000-C000-000000000046),
      helpcontext(0x0002000d)
    ]
    dispinterface Font {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b4), propget, helpcontext(0x000100b4)]
            VARIANT Background();
            [id(0x000000b4), propput, helpcontext(0x000100b4)]
            void Background([in] VARIANT rhs);
            [id(0x00000060), propget, helpcontext(0x00010060)]
            VARIANT Bold();
            [id(0x00000060), propput, helpcontext(0x00010060)]
            void Bold([in] VARIANT rhs);
            [id(0x00000063), propget, helpcontext(0x00010063)]
            VARIANT Color();
            [id(0x00000063), propput, helpcontext(0x00010063)]
            void Color([in] VARIANT rhs);
            [id(0x00000061), propget, helpcontext(0x00010061)]
            VARIANT ColorIndex();
            [id(0x00000061), propput, helpcontext(0x00010061)]
            void ColorIndex([in] VARIANT rhs);
            [id(0x000000b1), propget, helpcontext(0x000100b1)]
            VARIANT FontStyle();
            [id(0x000000b1), propput, helpcontext(0x000100b1)]
            void FontStyle([in] VARIANT rhs);
            [id(0x00000065), propget, helpcontext(0x00010065)]
            VARIANT Italic();
            [id(0x00000065), propput, helpcontext(0x00010065)]
            void Italic([in] VARIANT rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            VARIANT Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] VARIANT rhs);
            [id(0x000000dd), propget, hidden, helpcontext(0x000100dd)]
            VARIANT OutlineFont();
            [id(0x000000dd), propput, hidden, helpcontext(0x000100dd)]
            void OutlineFont([in] VARIANT rhs);
            [id(0x00000067), propget, hidden, helpcontext(0x00010067)]
            VARIANT Shadow();
            [id(0x00000067), propput, hidden, helpcontext(0x00010067)]
            void Shadow([in] VARIANT rhs);
            [id(0x00000068), propget, helpcontext(0x00010068)]
            VARIANT Size();
            [id(0x00000068), propput, helpcontext(0x00010068)]
            void Size([in] VARIANT rhs);
            [id(0x00000069), propget, helpcontext(0x00010069)]
            VARIANT Strikethrough();
            [id(0x00000069), propput, helpcontext(0x00010069)]
            void Strikethrough([in] VARIANT rhs);
            [id(0x000000b3), propget, helpcontext(0x000100b3)]
            VARIANT Subscript();
            [id(0x000000b3), propput, helpcontext(0x000100b3)]
            void Subscript([in] VARIANT rhs);
            [id(0x000000b2), propget, helpcontext(0x000100b2)]
            VARIANT Superscript();
            [id(0x000000b2), propput, helpcontext(0x000100b2)]
            void Superscript([in] VARIANT rhs);
            [id(0x0000006a), propget, helpcontext(0x0001006a)]
            VARIANT Underline();
            [id(0x0000006a), propput, helpcontext(0x0001006a)]
            void Underline([in] VARIANT rhs);
            [id(0x0000093d), propget, helpcontext(0x0001093d)]
            VARIANT ThemeColor();
            [id(0x0000093d), propput, helpcontext(0x0001093d)]
            void ThemeColor([in] VARIANT rhs);
            [id(0x0000093e), propget, helpcontext(0x0001093e)]
            VARIANT TintAndShade();
            [id(0x0000093e), propput, helpcontext(0x0001093e)]
            void TintAndShade([in] VARIANT rhs);
            [id(0x0000093f), propget, helpcontext(0x0001093f)]
            XlThemeFont ThemeFont();
            [id(0x0000093f), propput, helpcontext(0x0001093f)]
            void ThemeFont([in] XlThemeFont rhs);
    };

    [
      uuid(00020846-0000-0000-C000-000000000046),
      helpcontext(0x00020006)
    ]
    dispinterface Range {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000130), helpcontext(0x00010130)]
            VARIANT Activate();
            [id(0x00000427), propget, helpcontext(0x00010427)]
            VARIANT AddIndent();
            [id(0x00000427), propput, helpcontext(0x00010427)]
            void AddIndent([in] VARIANT rhs);
            [id(0x000000ec), propget, helpcontext(0x000100ec)]
            BSTR Address(
                            [in, optional] VARIANT RowAbsolute, 
                            [in, optional] VARIANT ColumnAbsolute, 
                            [in, optional, defaultvalue(1)] XlReferenceStyle ReferenceStyle, 
                            [in, optional] VARIANT External, 
                            [in, optional] VARIANT RelativeTo);
            [id(0x000001b5), propget, helpcontext(0x000101b5)]
            BSTR AddressLocal(
                            [in, optional] VARIANT RowAbsolute, 
                            [in, optional] VARIANT ColumnAbsolute, 
                            [in, optional, defaultvalue(1)] XlReferenceStyle ReferenceStyle, 
                            [in, optional] VARIANT External, 
                            [in, optional] VARIANT RelativeTo);
            [id(0x0000036c), helpcontext(0x0001036c)]
            VARIANT AdvancedFilter(
                            [in] XlFilterAction Action, 
                            [in, optional] VARIANT CriteriaRange, 
                            [in, optional] VARIANT CopyToRange, 
                            [in, optional] VARIANT Unique);
            [id(0x000001b9), helpcontext(0x000101b9)]
            VARIANT ApplyNames(
                            [in, optional] VARIANT Names, 
                            [in, optional] VARIANT IgnoreRelativeAbsolute, 
                            [in, optional] VARIANT UseRowColumnNames, 
                            [in, optional] VARIANT OmitColumn, 
                            [in, optional] VARIANT OmitRow, 
                            [in, optional, defaultvalue(1)] XlApplyNamesOrder Order, 
                            [in, optional] VARIANT AppendLast);
            [id(0x000001c0), helpcontext(0x000101c0)]
            VARIANT ApplyOutlineStyles();
            [id(0x00000238), propget, helpcontext(0x00010238)]
            Areas* Areas();
            [id(0x000004a1), helpcontext(0x000104a1)]
            BSTR AutoComplete([in] BSTR String);
            [id(0x000001c1), helpcontext(0x000101c1)]
            VARIANT AutoFill(
                            [in] Range* Destination, 
                            [in, optional, defaultvalue(0)] XlAutoFillType Type);
            [id(0x00000319), helpcontext(0x00010319)]
            VARIANT AutoFilter(
                            [in, optional] VARIANT Field, 
                            [in, optional] VARIANT Criteria1, 
                            [in, optional, defaultvalue(1)] XlAutoFilterOperator Operator, 
                            [in, optional] VARIANT Criteria2, 
                            [in, optional] VARIANT VisibleDropDown);
            [id(0x000000ed), helpcontext(0x000100ed)]
            VARIANT AutoFit();
            [id(0x00000072), hidden, helpcontext(0x00010072)]
            VARIANT AutoFormat(
                            [in, optional, defaultvalue(1)] XlRangeAutoFormat Format, 
                            [in, optional] VARIANT Number, 
                            [in, optional] VARIANT Font, 
                            [in, optional] VARIANT Alignment, 
                            [in, optional] VARIANT Border, 
                            [in, optional] VARIANT Pattern, 
                            [in, optional] VARIANT Width);
            [id(0x0000040c), helpcontext(0x0001040c)]
            VARIANT AutoOutline();
            [id(0x0000042b), helpcontext(0x0001042b)]
            VARIANT BorderAround(
                            [in, optional] VARIANT LineStyle, 
                            [in, optional, defaultvalue(2)] XlBorderWeight Weight, 
                            [in, optional, defaultvalue(-4105)] XlColorIndex ColorIndex, 
                            [in, optional] VARIANT Color);
            [id(0x000001b3), propget, helpcontext(0x000101b3)]
            Borders* Borders();
            [id(0x00000117), helpcontext(0x00010117)]
            VARIANT Calculate();
            [id(0x000000ee), propget, helpcontext(0x000100ee)]
            Range* Cells();
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x0000006f), helpcontext(0x0001006f)]
            VARIANT Clear();
            [id(0x00000071), helpcontext(0x00010071)]
            VARIANT ClearContents();
            [id(0x00000070), helpcontext(0x00010070)]
            VARIANT ClearFormats();
            [id(0x000000ef), helpcontext(0x000100ef)]
            VARIANT ClearNotes();
            [id(0x0000040d), helpcontext(0x0001040d)]
            VARIANT ClearOutline();
            [id(0x000000f0), propget, helpcontext(0x000100f0)]
            long Column();
            [id(0x000001fe), helpcontext(0x000101fe)]
            Range* ColumnDifferences([in] VARIANT Comparison);
            [id(0x000000f1), propget, helpcontext(0x000100f1)]
            Range* Columns();
            [id(0x000000f2), propget, helpcontext(0x000100f2)]
            VARIANT ColumnWidth();
            [id(0x000000f2), propput, helpcontext(0x000100f2)]
            void ColumnWidth([in] VARIANT rhs);
            [id(0x000001e2), helpcontext(0x000101e2)]
            VARIANT Consolidate(
                            [in, optional] VARIANT Sources, 
                            [in, optional] VARIANT Function, 
                            [in, optional] VARIANT TopRow, 
                            [in, optional] VARIANT LeftColumn, 
                            [in, optional] VARIANT CreateLinks);
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy([in, optional] VARIANT Destination);
            [id(0x00000480), helpcontext(0x00010480)]
            long CopyFromRecordset(
                            [in] IUnknown* Data, 
                            [in, optional] VARIANT MaxRows, 
                            [in, optional] VARIANT MaxColumns);
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(1)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000001c9), helpcontext(0x000101c9)]
            VARIANT CreateNames(
                            [in, optional] VARIANT Top, 
                            [in, optional] VARIANT Left, 
                            [in, optional] VARIANT Bottom, 
                            [in, optional] VARIANT Right);
            [id(0x000001ca), hidden, helpcontext(0x000101ca)]
            VARIANT CreatePublisher(
                            [in, optional] VARIANT Edition, 
                            [in, optional, defaultvalue(1)] XlPictureAppearance Appearance, 
                            [in, optional] VARIANT ContainsPICT, 
                            [in, optional] VARIANT ContainsBIFF, 
                            [in, optional] VARIANT ContainsRTF, 
                            [in, optional] VARIANT ContainsVALU);
            [id(0x000001f5), propget, helpcontext(0x000101f5)]
            Range* CurrentArray();
            [id(0x000000f3), propget, helpcontext(0x000100f3)]
            Range* CurrentRegion();
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut([in, optional] VARIANT Destination);
            [id(0x000001d0), helpcontext(0x000101d0)]
            VARIANT DataSeries(
                            [in, optional] VARIANT Rowcol, 
                            [in, optional, defaultvalue(-4132)] XlDataSeriesType Type, 
                            [in, optional, defaultvalue(1)] XlDataSeriesDate Date, 
                            [in, optional] VARIANT Step, 
                            [in, optional] VARIANT Stop, 
                            [in, optional] VARIANT Trend);
            [id(00000000), propget, helpcontext(0x00010000)]
            VARIANT _Default(
                            [in, optional] VARIANT RowIndex, 
                            [in, optional] VARIANT ColumnIndex);
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default(
                            [in, optional] VARIANT RowIndex, 
                            [in, optional] VARIANT ColumnIndex, 
                            [in] VARIANT rhs);
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete([in, optional] VARIANT Shift);
            [id(0x0000021f), propget, helpcontext(0x0001021f)]
            Range* Dependents();
            [id(0x000000f5), helpcontext(0x000100f5)]
            VARIANT DialogBox();
            [id(0x00000221), propget, helpcontext(0x00010221)]
            Range* DirectDependents();
            [id(0x00000222), propget, helpcontext(0x00010222)]
            Range* DirectPrecedents();
            [id(0x0000046b), helpcontext(0x0001046b)]
            VARIANT EditionOptions(
                            [in] XlEditionType Type, 
                            [in] XlEditionOptionsOption Option, 
                            [in, optional] VARIANT Name, 
                            [in, optional] VARIANT Reference, 
                            [in, optional, defaultvalue(1)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(1)] XlPictureAppearance ChartSize, 
                            [in, optional] VARIANT Format);
            [id(0x000001f4), propget, helpcontext(0x000101f4)]
            Range* End([in] XlDirection Direction);
            [id(0x000000f6), propget, helpcontext(0x000100f6)]
            Range* EntireColumn();
            [id(0x000000f7), propget, helpcontext(0x000100f7)]
            Range* EntireRow();
            [id(0x000000f8), helpcontext(0x000100f8)]
            VARIANT FillDown();
            [id(0x000000f9), helpcontext(0x000100f9)]
            VARIANT FillLeft();
            [id(0x000000fa), helpcontext(0x000100fa)]
            VARIANT FillRight();
            [id(0x000000fb), helpcontext(0x000100fb)]
            VARIANT FillUp();
            [id(0x0000018e), helpcontext(0x0001018e)]
            Range* Find(
                            [in] VARIANT What, 
                            [in, optional] VARIANT After, 
                            [in, optional] VARIANT LookIn, 
                            [in, optional] VARIANT LookAt, 
                            [in, optional] VARIANT SearchOrder, 
                            [in, optional, defaultvalue(1)] XlSearchDirection SearchDirection, 
                            [in, optional] VARIANT MatchCase, 
                            [in, optional] VARIANT MatchByte, 
                            [in, optional] VARIANT SearchFormat);
            [id(0x0000018f), helpcontext(0x0001018f)]
            Range* FindNext([in, optional] VARIANT After);
            [id(0x00000190), helpcontext(0x00010190)]
            Range* FindPrevious([in, optional] VARIANT After);
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000105), propget, helpcontext(0x00010105)]
            VARIANT Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] VARIANT rhs);
            [id(0x0000024a), propget, helpcontext(0x0001024a)]
            VARIANT FormulaArray();
            [id(0x0000024a), propput, helpcontext(0x0001024a)]
            void FormulaArray([in] VARIANT rhs);
            [id(0x00000564), propget, hidden, helpcontext(0x00010564)]
            XlFormulaLabel FormulaLabel();
            [id(0x00000564), propput, hidden, helpcontext(0x00010564)]
            void FormulaLabel([in] XlFormulaLabel rhs);
            [id(0x00000106), propget, helpcontext(0x00010106)]
            VARIANT FormulaHidden();
            [id(0x00000106), propput, helpcontext(0x00010106)]
            void FormulaHidden([in] VARIANT rhs);
            [id(0x00000107), propget, helpcontext(0x00010107)]
            VARIANT FormulaLocal();
            [id(0x00000107), propput, helpcontext(0x00010107)]
            void FormulaLocal([in] VARIANT rhs);
            [id(0x00000108), propget, helpcontext(0x00010108)]
            VARIANT FormulaR1C1();
            [id(0x00000108), propput, helpcontext(0x00010108)]
            void FormulaR1C1([in] VARIANT rhs);
            [id(0x00000109), propget, helpcontext(0x00010109)]
            VARIANT FormulaR1C1Local();
            [id(0x00000109), propput, helpcontext(0x00010109)]
            void FormulaR1C1Local([in] VARIANT rhs);
            [id(0x0000023b), helpcontext(0x0001023b)]
            VARIANT FunctionWizard();
            [id(0x000001d8), hidden, helpcontext(0x000101d8)]
            VARIANT_BOOL GoalSeek(
                            [in] VARIANT Goal, 
                            [in] Range* ChangingCell);
            [id(0x0000002e), helpcontext(0x0001002e)]
            VARIANT Group(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT End, 
                            [in, optional] VARIANT By, 
                            [in, optional] VARIANT Periods);
            [id(0x0000010a), propget, helpcontext(0x0001010a)]
            VARIANT HasArray();
            [id(0x0000010b), propget, helpcontext(0x0001010b)]
            VARIANT HasFormula();
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            VARIANT Height();
            [id(0x0000010c), propget, helpcontext(0x0001010c)]
            VARIANT Hidden();
            [id(0x0000010c), propput, helpcontext(0x0001010c)]
            void Hidden([in] VARIANT rhs);
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x000000c9), propget, helpcontext(0x000100c9)]
            VARIANT IndentLevel();
            [id(0x000000c9), propput, helpcontext(0x000100c9)]
            void IndentLevel([in] VARIANT rhs);
            [id(0x00000565), helpcontext(0x00010565)]
            void InsertIndent([in] long InsertAmount);
            [id(0x000000fc), helpcontext(0x000100fc)]
            VARIANT Insert(
                            [in, optional] VARIANT Shift, 
                            [in, optional] VARIANT CopyOrigin);
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            VARIANT Item(
                            [in] VARIANT RowIndex, 
                            [in, optional] VARIANT ColumnIndex);
            [id(0x000000aa), propput, helpcontext(0x000100aa)]
            void Item(
                            [in] VARIANT RowIndex, 
                            [in, optional] VARIANT ColumnIndex, 
                            [in] VARIANT rhs);
            [id(0x000001ef), helpcontext(0x000101ef)]
            VARIANT Justify();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            VARIANT Left();
            [id(0x000004a3), propget, helpcontext(0x000104a3)]
            long ListHeaderRows();
            [id(0x000000fd), helpcontext(0x000100fd)]
            VARIANT ListNames();
            [id(0x000002b3), propget, helpcontext(0x000102b3)]
            XlLocationInTable LocationInTable();
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT rhs);
            [id(0x00000234), helpcontext(0x00010234)]
            void Merge([in, optional] VARIANT Across);
            [id(0x00000568), helpcontext(0x00010568)]
            void UnMerge();
            [id(0x00000569), propget, helpcontext(0x00010569)]
            Range* MergeArea();
            [id(0x000000d0), propget, helpcontext(0x000100d0)]
            VARIANT MergeCells();
            [id(0x000000d0), propput, helpcontext(0x000100d0)]
            void MergeCells([in] VARIANT rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            VARIANT Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] VARIANT rhs);
            [id(0x00000408), helpcontext(0x00010408)]
            VARIANT NavigateArrow(
                            [in, optional] VARIANT TowardPrecedent, 
                            [in, optional] VARIANT ArrowNumber, 
                            [in, optional] VARIANT LinkNumber);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000001f6), propget, helpcontext(0x000101f6)]
            Range* Next();
            [id(0x00000467), helpcontext(0x00010467)]
            BSTR NoteText(
                            [in, optional] VARIANT Text, 
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000000c1), propget, helpcontext(0x000100c1)]
            VARIANT NumberFormat();
            [id(0x000000c1), propput, helpcontext(0x000100c1)]
            void NumberFormat([in] VARIANT rhs);
            [id(0x00000449), propget, helpcontext(0x00010449)]
            VARIANT NumberFormatLocal();
            [id(0x00000449), propput, helpcontext(0x00010449)]
            void NumberFormatLocal([in] VARIANT rhs);
            [id(0x000000fe), propget, helpcontext(0x000100fe)]
            Range* Offset(
                            [in, optional] VARIANT RowOffset, 
                            [in, optional] VARIANT ColumnOffset);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x0000010f), propget, helpcontext(0x0001010f)]
            VARIANT OutlineLevel();
            [id(0x0000010f), propput, helpcontext(0x0001010f)]
            void OutlineLevel([in] VARIANT rhs);
            [id(0x000000ff), propget, helpcontext(0x000100ff)]
            long PageBreak();
            [id(0x000000ff), propput, helpcontext(0x000100ff)]
            void PageBreak([in] long rhs);
            [id(0x000001dd), helpcontext(0x000101dd)]
            VARIANT Parse(
                            [in, optional] VARIANT ParseLine, 
                            [in, optional] VARIANT Destination);
            [id(0x00000403), hidden, helpcontext(0x00010403)]
            VARIANT _PasteSpecial(
                            [in, optional, defaultvalue(-4104)] XlPasteType Paste, 
                            [in, optional, defaultvalue(-4142)] XlPasteSpecialOperation Operation, 
                            [in, optional] VARIANT SkipBlanks, 
                            [in, optional] VARIANT Transpose);
            [id(0x000002db), propget, helpcontext(0x000102db)]
            PivotField* PivotField();
            [id(0x000002e4), propget, helpcontext(0x000102e4)]
            PivotItem* PivotItem();
            [id(0x000002cc), propget, helpcontext(0x000102cc)]
            PivotTable* PivotTable();
            [id(0x00000220), propget, helpcontext(0x00010220)]
            Range* Precedents();
            [id(0x000001f8), propget, helpcontext(0x000101f8)]
            VARIANT PrefixCharacter();
            [id(0x000001f7), propget, helpcontext(0x000101f7)]
            Range* Previous();
            [id(0x00000389), hidden, helpcontext(0x00010389)]
            VARIANT __PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate);
            [id(0x00000119), helpcontext(0x00010119)]
            VARIANT PrintPreview([in, optional] VARIANT EnableChanges);
            [id(0x0000056a), propget, helpcontext(0x0001056a)]
            QueryTable* QueryTable();
            [id(0x000000c5), propget, helpcontext(0x000100c5)]
            Range* Range(
                            [in] VARIANT Cell1, 
                            [in, optional] VARIANT Cell2);
            [id(0x00000373), helpcontext(0x00010373)]
            VARIANT RemoveSubtotal();
            [id(0x000000e2), helpcontext(0x000100e2)]
            VARIANT_BOOL Replace(
                            [in] VARIANT What, 
                            [in] VARIANT Replacement, 
                            [in, optional] VARIANT LookAt, 
                            [in, optional] VARIANT SearchOrder, 
                            [in, optional] VARIANT MatchCase, 
                            [in, optional] VARIANT MatchByte, 
                            [in, optional] VARIANT SearchFormat, 
                            [in, optional] VARIANT ReplaceFormat);
            [id(0x00000100), propget, helpcontext(0x00010100)]
            Range* Resize(
                            [in, optional] VARIANT RowSize, 
                            [in, optional] VARIANT ColumnSize);
            [id(0x00000101), propget, helpcontext(0x00010101)]
            long Row();
            [id(0x000001ff), helpcontext(0x000101ff)]
            Range* RowDifferences([in] VARIANT Comparison);
            [id(0x00000110), propget, helpcontext(0x00010110)]
            VARIANT RowHeight();
            [id(0x00000110), propput, helpcontext(0x00010110)]
            void RowHeight([in] VARIANT rhs);
            [id(0x00000102), propget, helpcontext(0x00010102)]
            Range* Rows();
            [id(0x00000103), helpcontext(0x00010103)]
            VARIANT Run(
                            [in, optional] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x000001f0), helpcontext(0x000101f0)]
            VARIANT Show();
            [id(0x0000036d), helpcontext(0x0001036d)]
            VARIANT ShowDependents([in, optional] VARIANT Remove);
            [id(0x00000249), propget, helpcontext(0x00010249)]
            VARIANT ShowDetail();
            [id(0x00000249), propput, helpcontext(0x00010249)]
            void ShowDetail([in] VARIANT rhs);
            [id(0x0000036e), helpcontext(0x0001036e)]
            VARIANT ShowErrors();
            [id(0x0000036f), helpcontext(0x0001036f)]
            VARIANT ShowPrecedents([in, optional] VARIANT Remove);
            [id(0x000000d1), propget, helpcontext(0x000100d1)]
            VARIANT ShrinkToFit();
            [id(0x000000d1), propput, helpcontext(0x000100d1)]
            void ShrinkToFit([in] VARIANT rhs);
            [id(0x00000370), helpcontext(0x00010370)]
            VARIANT Sort(
                            [in, optional] VARIANT Key1, 
                            [in, optional, defaultvalue(1)] XlSortOrder Order1, 
                            [in, optional] VARIANT Key2, 
                            [in, optional] VARIANT Type, 
                            [in, optional, defaultvalue(1)] XlSortOrder Order2, 
                            [in, optional] VARIANT Key3, 
                            [in, optional, defaultvalue(1)] XlSortOrder Order3, 
                            [in, optional, defaultvalue(2)] XlYesNoGuess Header, 
                            [in, optional] VARIANT OrderCustom, 
                            [in, optional] VARIANT MatchCase, 
                            [in, optional, defaultvalue(2)] XlSortOrientation Orientation, 
                            [in, optional, defaultvalue(1)] XlSortMethod SortMethod, 
                            [in, optional, defaultvalue(0)] XlSortDataOption DataOption1, 
                            [in, optional, defaultvalue(0)] XlSortDataOption DataOption2, 
                            [in, optional, defaultvalue(0)] XlSortDataOption DataOption3);
            [id(0x00000371), helpcontext(0x00010371)]
            VARIANT SortSpecial(
                            [in, optional, defaultvalue(1)] XlSortMethod SortMethod, 
                            [in, optional] VARIANT Key1, 
                            [in, optional, defaultvalue(1)] XlSortOrder Order1, 
                            [in, optional] VARIANT Type, 
                            [in, optional] VARIANT Key2, 
                            [in, optional, defaultvalue(1)] XlSortOrder Order2, 
                            [in, optional] VARIANT Key3, 
                            [in, optional, defaultvalue(1)] XlSortOrder Order3, 
                            [in, optional, defaultvalue(2)] XlYesNoGuess Header, 
                            [in, optional] VARIANT OrderCustom, 
                            [in, optional] VARIANT MatchCase, 
                            [in, optional, defaultvalue(2)] XlSortOrientation Orientation, 
                            [in, optional, defaultvalue(0)] XlSortDataOption DataOption1, 
                            [in, optional, defaultvalue(0)] XlSortDataOption DataOption2, 
                            [in, optional, defaultvalue(0)] XlSortDataOption DataOption3);
            [id(0x00000394), propget, helpcontext(0x00010394)]
            SoundNote* SoundNote();
            [id(0x0000019a), helpcontext(0x0001019a)]
            Range* SpecialCells(
                            [in] XlCellType Type, 
                            [in, optional] VARIANT Value);
            [id(0x00000104), propget, helpcontext(0x00010104)]
            VARIANT Style();
            [id(0x00000104), propput, helpcontext(0x00010104)]
            void Style([in] VARIANT rhs);
            [id(0x000001e1), helpcontext(0x000101e1)]
            VARIANT SubscribeTo(
                            [in] BSTR Edition, 
                            [in, optional, defaultvalue(-4158)] XlSubscribeToFormat Format);
            [id(0x00000372), helpcontext(0x00010372)]
            VARIANT Subtotal(
                            [in] long GroupBy, 
                            [in] XlConsolidationFunction Function, 
                            [in] VARIANT TotalList, 
                            [in, optional] VARIANT Replace, 
                            [in, optional] VARIANT PageBreaks, 
                            [in, optional, defaultvalue(1)] XlSummaryRow SummaryBelowData);
            [id(0x00000111), propget, helpcontext(0x00010111)]
            VARIANT Summary();
            [id(0x000001f1), helpcontext(0x000101f1)]
            VARIANT Table(
                            [in, optional] VARIANT RowInput, 
                            [in, optional] VARIANT ColumnInput);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            VARIANT Text();
            [id(0x00000410), helpcontext(0x00010410)]
            VARIANT TextToColumns(
                            [in, optional] VARIANT Destination, 
                            [in, optional, defaultvalue(1)] XlTextParsingType DataType, 
                            [in, optional, defaultvalue(1)] XlTextQualifier TextQualifier, 
                            [in, optional] VARIANT ConsecutiveDelimiter, 
                            [in, optional] VARIANT Tab, 
                            [in, optional] VARIANT Semicolon, 
                            [in, optional] VARIANT Comma, 
                            [in, optional] VARIANT Space, 
                            [in, optional] VARIANT Other, 
                            [in, optional] VARIANT OtherChar, 
                            [in, optional] VARIANT FieldInfo, 
                            [in, optional] VARIANT DecimalSeparator, 
                            [in, optional] VARIANT ThousandsSeparator, 
                            [in, optional] VARIANT TrailingMinusNumbers);
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            VARIANT Top();
            [id(0x000000f4), helpcontext(0x000100f4)]
            VARIANT Ungroup();
            [id(0x00000112), propget, helpcontext(0x00010112)]
            VARIANT UseStandardHeight();
            [id(0x00000112), propput, helpcontext(0x00010112)]
            void UseStandardHeight([in] VARIANT rhs);
            [id(0x00000113), propget, helpcontext(0x00010113)]
            VARIANT UseStandardWidth();
            [id(0x00000113), propput, helpcontext(0x00010113)]
            void UseStandardWidth([in] VARIANT rhs);
            [id(0x0000056b), propget, helpcontext(0x0001056b)]
            Validation* Validation();
            [id(0x00000006), propget, helpcontext(0x00010006)]
            VARIANT Value([in, optional] VARIANT RangeValueDataType);
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value(
                            [in, optional] VARIANT RangeValueDataType, 
                            [in] VARIANT rhs);
            [id(0x0000056c), propget, helpcontext(0x0001056c)]
            VARIANT Value2();
            [id(0x0000056c), propput, helpcontext(0x0001056c)]
            void Value2([in] VARIANT rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            VARIANT Width();
            [id(0x0000015c), propget, helpcontext(0x0001015c)]
            Worksheet* Worksheet();
            [id(0x00000114), propget, helpcontext(0x00010114)]
            VARIANT WrapText();
            [id(0x00000114), propput, helpcontext(0x00010114)]
            void WrapText([in] VARIANT rhs);
            [id(0x0000056d), helpcontext(0x0001056d)]
            Comment* AddComment([in, optional] VARIANT Text);
            [id(0x0000038e), propget, helpcontext(0x0001038e)]
            Comment* Comment();
            [id(0x0000056e), helpcontext(0x0001056e)]
            void ClearComments();
            [id(0x0000056f), propget, helpcontext(0x0001056f)]
            Phonetic* Phonetic();
            [id(0x00000570), propget, helpcontext(0x00010570)]
            FormatConditions* FormatConditions();
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x00000571), propget, helpcontext(0x00010571)]
            Hyperlinks* Hyperlinks();
            [id(0x00000713), propget, helpcontext(0x00010713)]
            Phonetics* Phonetics();
            [id(0x00000714), helpcontext(0x00010714)]
            void SetPhonetic();
            [id(0x00000715), propget, helpcontext(0x00010715)]
            BSTR ID();
            [id(0x00000715), propput, helpcontext(0x00010715)]
            void ID([in] BSTR rhs);
            [id(0x000006ec), hidden, helpcontext(0x000106ec)]
            VARIANT _PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate, 
                            [in, optional] VARIANT PrToFileName);
            [id(0x000007dd), propget, helpcontext(0x000107dd)]
            PivotCell* PivotCell();
            [id(0x000007de), helpcontext(0x000107de)]
            void Dirty();
            [id(0x000007df), propget, helpcontext(0x000107df)]
            Errors* Errors();
            [id(0x000007e0), propget, helpcontext(0x000107e0)]
            SmartTags* SmartTags();
            [id(0x000007e1), helpcontext(0x000107e1)]
            void Speak(
                            [in, optional] VARIANT SpeakDirection, 
                            [in, optional] VARIANT SpeakFormulas);
            [id(0x00000788), helpcontext(0x00010788)]
            VARIANT PasteSpecial(
                            [in, optional, defaultvalue(-4104)] XlPasteType Paste, 
                            [in, optional, defaultvalue(-4142)] XlPasteSpecialOperation Operation, 
                            [in, optional] VARIANT SkipBlanks, 
                            [in, optional] VARIANT Transpose);
            [id(0x000007e4), propget, helpcontext(0x000107e4)]
            VARIANT_BOOL AllowEdit();
            [id(0x000008d1), propget, helpcontext(0x000108d1)]
            ListObject* ListObject();
            [id(0x000008d2), propget, helpcontext(0x000108d2)]
            XPath* XPath();
            [id(0x000009bb), propget, helpcontext(0x000109bb)]
            Actions* ServerActions();
            [id(0x000009bc), helpcontext(0x000109bc)]
            void RemoveDuplicates(
                            [in, optional] VARIANT Columns, 
                            [in, optional, defaultvalue(2)] XlYesNoGuess Header);
            [id(0x00000939), helpcontext(0x00010939)]
            VARIANT PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate, 
                            [in, optional] VARIANT PrToFileName);
            [id(0x0000084b), propget, helpcontext(0x0001084b)]
            BSTR MDX();
            [id(0x000009bd), helpcontext(0x000109bd)]
            void ExportAsFixedFormat(
                            [in] XlFixedFormatType Type, 
                            [in, optional] VARIANT Filename, 
                            [in, optional] VARIANT Quality, 
                            [in, optional] VARIANT IncludeDocProperties, 
                            [in, optional] VARIANT IgnorePrintAreas, 
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT OpenAfterPublish, 
                            [in, optional] VARIANT FixedFormatExtClassPtr);
            [id(0x000009c3), propget, helpcontext(0x000109c3)]
            VARIANT CountLarge();
            [id(0x0000093c), helpcontext(0x0001093c)]
            VARIANT CalculateRowMajorOrder();
    };

    [
      uuid(00024411-0000-0000-C000-000000000046),
      helpcontext(0x000200a7),
      hidden
    ]
    dispinterface DocEvents {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000607), helpcontext(0x00010607)]
            void SelectionChange([in] Range* Target);
            [id(0x00000601), helpcontext(0x00010601)]
            void BeforeDoubleClick(
                            [in] Range* Target, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x000005fe), helpcontext(0x000105fe)]
            void BeforeRightClick(
                            [in] Range* Target, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000130), helpcontext(0x00010130)]
            void Activate();
            [id(0x000005fa), helpcontext(0x000105fa)]
            void Deactivate();
            [id(0x00000117), helpcontext(0x00010117)]
            void Calculate();
            [id(0x00000609), helpcontext(0x00010609)]
            void Change([in] Range* Target);
            [id(0x000005be), helpcontext(0x000105be)]
            void FollowHyperlink([in] Hyperlink* Target);
            [id(0x0000086c), helpcontext(0x0001086c)]
            void PivotTableUpdate([in] PivotTable* Target);
    };

    [
      uuid(000208B1-0000-0000-C000-000000000046),
      helpcontext(0x00020071)
    ]
    dispinterface Worksheets {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            IDispatch* Add(
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT After, 
                            [in, optional] VARIANT Count, 
                            [in, optional] VARIANT Type);
            [id(0x00000227), helpcontext(0x00010227)]
            void Copy(
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT After);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x000001d5), helpcontext(0x000101d5)]
            void FillAcrossSheets(
                            [in] Range* Range, 
                            [in, optional, defaultvalue(-4104)] XlFillWith Type);
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0x0000027d), helpcontext(0x0001027d)]
            void Move(
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT After);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x00000389), hidden, helpcontext(0x00010389)]
            void __PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate);
            [id(0x00000119), helpcontext(0x00010119)]
            void PrintPreview([in, optional] VARIANT EnableChanges);
            [id(0x000000eb), helpcontext(0x000100eb)]
            void Select([in, optional] VARIANT Replace);
            [id(0x0000058a), propget, helpcontext(0x0001058a)]
            HPageBreaks* HPageBreaks();
            [id(0x0000058b), propget, helpcontext(0x0001058b)]
            VPageBreaks* VPageBreaks();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT rhs);
            [id(00000000), propget, helpcontext(0x00010000)]
            IDispatch* _Default([in] VARIANT Index);
            [id(0x000006ec), hidden, helpcontext(0x000106ec)]
            void _PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate, 
                            [in, optional] VARIANT PrToFileName);
            [id(0x00000939), helpcontext(0x00010939)]
            void PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate, 
                            [in, optional] VARIANT PrToFileName, 
                            [in, optional] VARIANT IgnorePrintAreas);
    };






































    /*  CoClasses descriptions */

    [
      uuid(00020820-0000-0000-C000-000000000046),
      helpcontext(0x00020010)
    ]
    coclass Worksheet {
        [default] interface _Worksheet;
        [default, source] dispinterface DocEvents;
    };

    [
      uuid(00024500-0000-0000-C000-000000000046),
      helpstring("coclass Application")
    ]
    coclass Application {
        [default] interface _Application;
        [default, source] dispinterface AppEvents;
    };

    [
      uuid(00020819-0000-0000-C000-000000000046),
      helpcontext(0x00020021)
    ]
    coclass Workbook {
        [default] interface _Workbook;
        [default, source] dispinterface WorkbookEvents;
    };

};
