/*
 * IDL source for mso_to_oo.dll
 *
 * Copyright (C) 2008 Sinitsin Ivan (Etersoft) <ivan@etersoft.ru>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
 */
#include "dispid_const.h"

import "oaidl.idl";
import "ocidl.idl";
import "wtypes.idl";
	

	typedef enum
	{
		xlMaximized = 0xffffefd7,
		xlMinimized = 0xffffefd4,
		xlNormal    = 0xffffefd1
	} XlWindowState;

	typedef enum
	{
		xlRangeValueDefault        = 10,
		xlRangeValueXMLSpreadsheet = 11,
		xlRangeValueMSPersistXML   = 12
	} XlRangeValueDataType;

	typedef enum
	{
		xlA1   = 1,
		xlR1C1 = 0xffffefca
	} XlReferenceStyle;
/*Пока как заглушка. Надо найти числовые значения*/
	typedef enum
	{
		xlLandscape   	= 2,
		xlPortrait 	= 1
	} XlPageOrientation;

	typedef enum
	{
		xlShiftToLeft   = -4159,
		xlShiftUp 	= -4162
	} XlDeleteShiftDirection;

/*Пока как заглушка. Надо найти числовые значения*/
	typedef enum
	{
		xlExclusive	= 1,
		xlNoChange	= 2,
		xlShared	= 3
	}XlSaveAsAccessMode;

	typedef enum
	{
		xlVAlignBottom		= -4107,
		xlVAlignCenter		= -4108,
		xlVAlignDistributed	= -4117,
		xlVAlignJustify 	= -4130,
		xlVAlignTop		= -4160
	} XlVAlign;

	typedef enum
	{
		xlHAlignCenter			= -4108,
		xlHAlignCenterAcrossSelection	= 7,
		xlHAlignDistributed		= -4117,
		xlHAlignFill			= 5,
		xlHAlignGeneral			= 1,
		xlHAlignJustify			= -4130,
		xlHAlignLeft			= -4131,
		xlHAlignRight			= -4152
	} XlHAlign;

	typedef enum
	{
		xlLeft 			= 0x00000001,
		xlRight			= 0x00000002,
		xlTop			= 0x00000003,
		xlBottom		= 0x00000004,
		xlDiagonalDown		= 0x00000005,
		xlDiagonalUp		= 0x00000006,
		xlEdgeLeft		= 0x00000007,
		xlEdgeTop		= 0x00000008,
		xlEdgeBottom		= 0x00000009,
		xlEdgeRight		= 0x0000000a,
		xlInsideVertical	= 0x0000000b,
		xlInsideHorizontal	= 0x0000000c
	} XlBordersIndex;

	typedef enum
	{
		xlContinuous		= 0x00000001,
		xlDash			= 0xffffefed,
		xlDashDot		= 0x00000004,
		xlDashDotDot		= 0x00000005,
		xlDot			= 0xffffefea,
		xlDouble		= 0xffffefe9,
		xlSlantDashDot		= 0x0000000d,
		xlLineStyleNone		= 0xffffefd2
	} XlLineStyle;

	typedef enum
	{
		xlHairline		= 0x00000001,
		xlThin 			= 0x00000002,
		xlMedium 		= 0xffffefd6,
		xlThick			= 0x00000004
	} XlBorderWeight;

	typedef enum
	{
		xlColorIndexAutomatic 	= -4105,
		xlColorIndexNone 	= -4142
	} XlColorIndex;

	typedef enum
	{
		xlChart				= 0x00000010, // надо узнать
		xlDialogSheet 			= 0x00000011, // надо узнать
		xlExcel4IntlMacroSheet 		= 0x00000012, // надо узнать
		xlExcel4MacroSheet		= 0x00000013, // надо узнать
		xlWorksheet			= 0xffffefb9
	} XlSheetType;

	typedef enum {
		xlCreatorCode 			= 0x5843454c
	} XlCreator;

	typedef enum {
		xlMicrosoftAccess 		= 4,
		xlMicrosoftFoxPro 		= 5,
		xlMicrosoftMail 		= 3,
		xlMicrosoftPowerPoint 		= 2,
		xlMicrosoftProject 		= 6,
		xlMicrosoftSchedulePlus 	= 7,
		xlMicrosoftWord 		= 1
	} XlMSApplication;

	typedef enum {
		xlCalculationAutomatic 		= 0xffffeff7,
		xlCalculationManual 		= 0xffffefd9,
		xlCalculationSemiautomatic 	= 2
	} XlCalculation;

	typedef enum {
		xlCommandUnderlinesAutomatic 	= 0xffffeff7,
		xlCommandUnderlinesOff 		= 0xffffefce,
		xlCommandUnderlinesOn 		= 1
	} XlCommandUnderlines;

	typedef enum {
		xlIBeam 			= 3,
		xlDefault 			= 0xffffefd1,
		xlNorthwestArrow 		= 1,
		xlWait 				= 2
	} XlMousePointer;

	typedef enum {
		xlCopy 				= 1,
		xlCut 				= 2
	} XlCutCopyMode;

	typedef enum {
		xlNoIndicator 			= 0,
		xlCommentIndicatorOnly 		= 0xffffffff,
		xlCommentAndIndicator 		= 1
	} XlCommentDisplayMode;

	typedef enum {
		xlDisabled 			= 0,
		xlErrorHandler 			= 2,
		xlInterrupt 			= 1
	} XlEnableCancelKey;

	typedef enum {
		xlMAPI 				= 1,
		xlNoMailSystem			= 0,
		xlPowerTalk 			= 2
	} XlMailSystem;

	typedef enum {
		xlDown 				= 0xffffefe7,
		xlToLeft 			= 0xffffefc1,
		xlToRight 			= 0xffffefbf,
		xlUp 				= 0xffffefbe
	} XlDirection;

	typedef enum {
		xlAddIn 			= 18,
		xlCSV 				= 6,
		xlCSVMac 			= 22,
		xlCSVMSDOS 			= 24,
		xlCSVWindows 			= 23,
		xlDBF2 				= 7,
		xlDBF3				= 8,
		xlDBF4 				= 11,
		xlDIF 				= 9,
		xlExcel2 			= 16,
		xlExcel2FarEast 		= 27,
		xlExcel3 			= 29,
		xlExcel4 			= 33,
		xlExcel5 			= 39,
		xlExcel7 			= 39,
		xlExcel9795 			= 43,
		xlExcel4Workbook 		= 35,
		xlIntlAddIn 			= 26,
		xlIntlMacro 			= 25,
		xlWorkbookNormal 		= 0xffffefd1,
		xlSYLK 				= 2,
		xlTemplate 			= 17,
		xlCurrentPlatformText 		= 0xffffefc2,
		xlTextMac 			= 19,
		xlTextMSDOS 			= 21,
		xlTextPrinter 			= 36,
		xlTextWindows 			= 20,
		xlWJ2WD1 			= 14,
		xlWK1 				= 5,
		xlWK1ALL 			= 31,
		xlWK1FMT 			= 30,
		xlWK3 				= 15,
		xlWK4 				= 38,
		xlWK3FM3 			= 32,
		xlWKS 				= 4,
		xlWorks2FarEast 		= 28,
		xlWQ1 				= 34,
		xlWJ3 				= 40,
		xlWJ3FJ3 			= 41,
		xlUnicodeText 			= 42,
		xlHtml 				= 44,
		xlWebArchive 			= 45,
		xlXMLSpreadsheet 		= 46
	} XlFileFormat;

	typedef enum {
		msoFeatureInstallNone 		= 0,
		msoFeatureInstallOnDemand 	= 1,
		msoFeatureInstallOnDemandWithUI = 2
	} MsoFeatureInstall;

	typedef enum {
		xlDone 				= 0,
		xlCalculating 			= 1,
		xlPending 			= 2
	} XlCalculationState;

	typedef enum {
		xlNoKey 			= 0,
		xlEscKey 			= 1,
		xlAnyKey 			= 2
	} XlCalculationInterruptKey;

	typedef enum {
		msoAutomationSecurityLow 	= 1,
		msoAutomationSecurityByUI 	= 2,
		msoAutomationSecurityForceDisable = 3
	} MsoAutomationSecurity;

	typedef enum {
		msoFileDialogOpen 		= 1,
		msoFileDialogSaveAs 		= 2,
		msoFileDialogFilePicker 	= 3,
		msoFileDialogFolderPicker 	= 4
	} MsoFileDialogType;

//	typedef enum
//	{
//		xlBackgroundAutomatic   = 1,
//		xlBackgroundOpaque = 2,
//		xlBackgroundTransparent = 3
//	} XlBackground;

	[
		object,
		uuid(0AA5C884-A88C-4f79-AE9F-89864F3D35CD),
		dual,
		helpstring("I_Border Interface"),
		pointer_default(unique)
	]
	interface I_Border : IDispatch
	{
//Application 	Returns an Application object that represents the Microsoft Excel application.
		[propget,id(1), helpstring("property Application")] HRESULT Application([out, retval] IDispatch **value);
//Parent 	Returns the parent object for the specified object.
		[propget,id(2), helpstring("property Parent")] HRESULT Parent([out, retval] IDispatch **value);
//Color 	Returns or sets the primary color of the border.
		[propget,id(3), helpstring("property Color")] HRESULT Color([out, retval] long *plcolor);
		[propput,id(3), helpstring("property Color")] HRESULT Color([in] long lcolor);
//ColorIndex 	Returns or sets the color of the border.
		[propget,id(4), helpstring("property ColorIndex")] HRESULT ColorIndex([out, retval] long *plcolorindex);
		[propput,id(4), helpstring("property ColorIndex")] HRESULT ColorIndex([in] long lcolorindex);
//Creator 	Returns a 32-bit integer that indicates the application in which this object was created.
		[propget,id(5), helpstring("property Creator")] HRESULT Creator([out, retval] VARIANT *result);
//LineStyle 	Returns or sets the line style for the border.
		[propget,id(6), helpstring("property LineStyle")] HRESULT LineStyle([out, retval] XlLineStyle *plinestyle);
		[propput,id(6), helpstring("property LineStyle")] HRESULT LineStyle([in] XlLineStyle linestyle);
//Weight 	Returns or sets the weight of the border.
		[propget,id(7), helpstring("property Weight")] HRESULT Weight([out, retval] XlBorderWeight *pweight);
		[propput,id(7), helpstring("property Weight")] HRESULT Weight([in] XlBorderWeight weight);
	};

	[
		object,
		uuid(00020855-0001-0000-C000-000000000046),
		dual,
		helpstring("I_Borders Interface"),
		pointer_default(unique)
	]
	interface I_Borders : IDispatch
	{
//Application 	Returns an Application object that represents the Microsoft Excel application.
		[propget,id(dispid_borders_application), helpstring("property Application")] HRESULT Application([out, retval] IDispatch **value);
//Creator 	Returns a 32-bit integer that indicates the application in which this object was created.
		[propget,id(dispid_borders_creator), helpstring("property Creator")] HRESULT Creator([out, retval] VARIANT *result);
//Parent 	Returns the parent object for the specified object.
		[propget,id(dispid_borders_parent), helpstring("property Parent")] HRESULT Parent([out, retval] IDispatch **value);
//Color 	Returns or sets the primary color of all four borders of a range. If they're not all the same color, returns 0 (zero).
		[propget,id(dispid_borders_color), helpstring("property Color")] HRESULT Color([out, retval] long *plcolor);
		[propput,id(dispid_borders_color), helpstring("property Color")] HRESULT Color([in] long lcolor);
//ColorIndex 	Returns or sets the color of all four borders. Returns Null if all four borders aren't the same color.
		[propget,id(dispid_borders_colorindex), helpstring("property ColorIndex")] HRESULT ColorIndex([out, retval] long *plcolorindex);
		[propput,id(dispid_borders_colorindex), helpstring("property ColorIndex")] HRESULT ColorIndex([in] long lcolorindex);
//Count 	Returns the number of objects in the collection.
		[propget,id(dispid_borders_count), helpstring("property Count")] HRESULT Count([out, retval] long *pretval);
//Item 	Returns a Border object that represents one of the borders of either a range of cells or a style.
		[propget,id(dispid_borders_item), helpstring("property Item")] HRESULT Item([in] XlBordersIndex key, [out, retval] /*I_Border*/IDispatch **ppObject);
//LineStyle 	Returns or sets the line style for the border.
		[propget,id(dispid_borders_linestyle), helpstring("property LineStyle")] HRESULT LineStyle([out, retval] XlLineStyle *plinestyle);
		[propput,id(dispid_borders_linestyle), helpstring("property LineStyle")] HRESULT LineStyle([in] XlLineStyle linestyle);
//GetEnumerator 	Returns an enumerator to support iterating through the collection.
		[id(dispid_borders_getenumerator), helpstring("method GetEnumerator")] HRESULT GetEnumerator([out, retval] IDispatch **pdretval);
//Value 	Returns or sets the line style for the border.
		[propget,id(dispid_borders_value), helpstring("property Value")] HRESULT Value([out, retval] XlLineStyle *plinestyle);
		[propput,id(dispid_borders_value), helpstring("property Value")] HRESULT Value([in] XlLineStyle linestyle);
//Weight 	Returns or sets the weight of the border.
		[propget,id(dispid_borders_weight), helpstring("property Weight")] HRESULT Weight([out, retval] XlBorderWeight *pweight);
		[propput,id(dispid_borders_weight), helpstring("property Weight")] HRESULT Weight([in] XlBorderWeight weight);
//_Default 	 
		[propget,id(dispid_borders__default), helpstring("property _Default")] HRESULT _Default([in] XlBordersIndex key, [out, retval] /*I_Border*/IDispatch **ppObject);
	};


	[
		object,
		uuid(00020870-0001-0000-C000-000000000046),
		dual,
		helpstring("I_Interior Interface"),
		pointer_default(unique)
	]
	interface I_Interior : IDispatch
	{
//Application 	Returns an Application object that represents the Microsoft Excel application.
		[propget,id(dispid_interior_application), helpstring("property Application")] HRESULT Application([out, retval] IDispatch **value);
//Creator 	Returns a 32-bit integer that indicates the application in which this object was created.
		[propget,id(dispid_interior_creator), helpstring("property Creator")] HRESULT Creator([out, retval] VARIANT *result);
//Parent 	Returns the parent object for the specified object.
		[propget,id(dispid_interior_parent), helpstring("property Parent")] HRESULT Parent([out, retval] IDispatch **value);
//Color 	Returns or sets the primary cell shading color or drawing object fill color.
		[propget,id(dispid_interior_color), helpstring("property Color")] HRESULT Color([out, retval] long *plcolor);
		[propput,id(dispid_interior_color), helpstring("property Color")] HRESULT Color([in] long lcolor);
//ColorIndex 	Returns or sets the color of the interior.
		[propget,id(dispid_interior_colorindex), helpstring("property ColorIndex")] HRESULT ColorIndex([out, retval] long *plcolorindex);
		[propput,id(dispid_interior_colorindex), helpstring("property ColorIndex")] HRESULT ColorIndex([in] long lcolorindex);
//InvertIfNegative 	True if Microsoft Excel inverts the pattern in the item when it corresponds to a negative number.
		[propget, id(dispid_interior_invertifnegative), helpstring("property InvertIfNegative")] HRESULT InvertIfNegative([out, retval] VARIANT* RHS);
		[propput, id(dispid_interior_invertifnegative), helpstring("property InvertIfNegative")] HRESULT InvertIfNegative([in] VARIANT RHS);
//Pattern 	Returns or sets the interior pattern.
		[propget, id(dispid_interior_pattern), helpstring("property Pattern")] HRESULT Pattern([out, retval] VARIANT* RHS);
		[propput, id(dispid_interior_pattern), helpstring("property Pattern")] HRESULT Pattern([in] VARIANT RHS);
//PatternColor 	Returns or sets the color of the interior pattern as an RGB value.
		[propget, id(dispid_interior_patterncolor), helpstring("PatternColor")] HRESULT PatternColor([out, retval] VARIANT* RHS);
		[propput, id(dispid_interior_patterncolor), helpstring("PatternColor")] HRESULT PatternColor([in] VARIANT RHS);
//PatternColorIndex 	Returns or sets the color of the interior pattern as an index into the current color palette, or as one of the following XlColorIndex constants: xlColorIndexAutomatic or xlColorIndexNone.
		[propget, id(dispid_interior_patterncolorindex), helpstring("PatternColorIndex")] HRESULT PatternColorIndex([out, retval] VARIANT* RHS);
		[propput, id(dispid_interior_patterncolorindex), helpstring("PatternColorIndex")] HRESULT PatternColorIndex([in] VARIANT RHS);
	};

	[
		object,
		uuid(0002084D-0001-0000-C000-000000000046),
		dual,
		helpstring("I_Font Interface"),
		pointer_default(unique)
	]
	interface I_Font : IDispatch
	{
//Application 	Returns an Application object that represents the Microsoft Excel application.
		[propget,id(dispid_font_application), helpstring("property Application")] HRESULT Application([out, retval] IDispatch **value);
//Creator 	Returns a 32-bit integer that indicates the application in which this object was created.
		[propget,id(dispid_font_creator), helpstring("property Creator")] HRESULT Creator([out, retval] VARIANT *result);
//Parent 	Returns the parent object for the specified object.
		[propget,id(dispid_font_parent), helpstring("property Parent")] HRESULT Parent([out, retval] IDispatch **value);
//Background 	Returns or sets the type of background for text used in charts. Can be one of the XlBackground constants.
		[propget, id(dispid_font_background), helpstring("property Background")] HRESULT  Background([out, retval] VARIANT* RHS);
		[propput, id(dispid_font_background), helpstring("property Background")] HRESULT  Background([in] VARIANT RHS);
// Bold 	True if the font is bold.
		[propget,id(dispid_font_bold), helpstring("property Bold")] HRESULT Bold([out, retval] VARIANT_BOOL *pvbBold);
		[propput,id(dispid_font_bold), helpstring("property Bold")] HRESULT Bold([in] VARIANT_BOOL vbBold);
//Color 	Returns or sets the primary cell shading color or drawing object fill color.
		[propget,id(dispid_font_color), helpstring("property Color")] HRESULT Color([out, retval] long *plcolor);
		[propput,id(dispid_font_color), helpstring("property Color")] HRESULT Color([in] long lcolor);
//ColorIndex 	Returns or sets the color of the interior.
		[propget,id(dispid_font_colorindex), helpstring("property ColorIndex")] HRESULT ColorIndex([out, retval] long *plcolorindex);
		[propput,id(dispid_font_colorindex), helpstring("property ColorIndex")] HRESULT ColorIndex([in] long lcolorindex);
//FontStyle 	Returns or sets the font style.
		[propget, id(dispid_font_fontstyle), helpstring("property Fontstyle")] HRESULT  FontStyle([out, retval] VARIANT* RHS);
		[propput, id(dispid_font_fontstyle), helpstring("property Fontstyle")] HRESULT  FontStyle([in] VARIANT RHS);
// Italic 	True if the font style is italic.
		[propget,id(dispid_font_italic), helpstring("property Italic")] HRESULT Italic([out, retval] VARIANT_BOOL *pvbItalic);
		[propput,id(dispid_font_italic), helpstring("property Italic")] HRESULT Italic([in] VARIANT_BOOL vbItalic);
//Name 	Returns or sets the name of the object.
		[propget,id(dispid_font_name), helpstring("property Name")] HRESULT Name([out, retval] VARIANT *vName);
		[propput,id(dispid_font_name), helpstring("property Name")] HRESULT Name([in] VARIANT vName);
//OutlineFont 	True if the font is an outline font.
		[propget, id(dispid_font_outlinefont), helpstring("property OutlineFont")] HRESULT OutlineFont([out, retval] VARIANT* RHS);
		[propput, id(dispid_font_outlinefont), helpstring("property OutlineFont")]	HRESULT OutlineFont([in] VARIANT RHS);
//Shadow 	True if the font is a shadow font or if the object has a shadow.
		[propget,id(dispid_font_shadow), helpstring("property Shadow")] HRESULT Shadow([out, retval] VARIANT_BOOL *pvbshadow);
		[propput,id(dispid_font_shadow), helpstring("property Shadow")] HRESULT Shadow([in] VARIANT_BOOL vbshadow);
//Size 	Returns or sets the size of the font.
		[propget,id(dispid_font_size), helpstring("property Size")] HRESULT Size([out, retval] long *plsize);
		[propput,id(dispid_font_size), helpstring("property Size")] HRESULT Size([in] long lsize);
//Strikethrough 	True if the font is struck through with a horizontal line.
		[propget,id(dispid_font_strikethrough), helpstring("property Strikethrough")] HRESULT Strikethrough([out, retval] VARIANT_BOOL *pvbUnderline);
		[propput,id(dispid_font_strikethrough), helpstring("property Strikethrough")] HRESULT Strikethrough([in] VARIANT_BOOL vbUnderline);
//Subscript 	True if the font is formatted as subscript. False by default.
		[propget, id(dispid_font_subscript), helpstring("property Subscript")] HRESULT  Subscript([out, retval] VARIANT* RHS);
		[propput, id(dispid_font_subscript), helpstring("property Subscript")] HRESULT  Subscript([in] VARIANT RHS);
//Superscript 	True if the font is formatted as superscript. False by default.
		[propget, id(dispid_font_superscript), helpstring("property Superscript")] HRESULT  Superscript([out, retval] VARIANT* RHS);
		[propput, id(dispid_font_superscript), helpstring("property Superscript")] HRESULT  Superscript([in] VARIANT RHS);
// Underline 	Returns or sets the type of underline applied to the font.
		[propget,id(dispid_font_underline), helpstring("property Underline")] HRESULT Underline([out, retval] VARIANT_BOOL *pvbUnderline);
		[propput,id(dispid_font_underline), helpstring("property Underline")] HRESULT Underline([in] VARIANT_BOOL vbUnderline);
	};

	[
		object,
		uuid(00020846-0001-0000-C000-000000000046),
		dual,
		helpstring("I_Range Interface"),
		pointer_default(unique)
	]
	interface I_Range : IDispatch
	{
		[propget,id(1), helpstring("property _Default")] HRESULT _Default([in] VARIANT varRowIndex, [in] VARIANT varColumnIndex, [out, retval] IDispatch **ppObject);

		[propget,id(2), helpstring("property ColumnWidth")] HRESULT ColumnWidth([out, retval] long *pnColumnWidth);
		[propput,id(2), helpstring("property ColumnWidth")] HRESULT ColumnWidth([in] long nColumnWidth);

		[propget,id(3), helpstring("property Font")] HRESULT Font([out, retval] IDispatch **ppFont);

		[propget,id(4), helpstring("property Value")] HRESULT Value([in, optional] VARIANT varRangeValueDataType, [out, retval] VARIANT *pvarValue);
		[propput,id(4), helpstring("property Value")] HRESULT Value([in, optional] VARIANT varRangeValueDataType, [in] VARIANT varValue);

		[id(5), helpstring("method Select")] HRESULT Select([out, retval] VARIANT *pvarResult);

		[id(6), helpstring("method NoteText")] HRESULT NoteText([in, optional] VARIANT  Text, [in, optional] VARIANT  Start, [in, optional] VARIANT  Length, [out, retval]  BSTR    *pText);

		[id(7), helpstring("method ClearContents")] VARIANT ClearContents();

		[propget,id(8), helpstring("property Column")] long Column();

		[propget,id(9), helpstring("property Row")] long Row();

		[propget,id(10), helpstring("property HorizontalAlignment")] HRESULT HorizontalAlignment([out, retval] XlHAlign *halign);
		[propput,id(10), helpstring("property HorizontalAlignment")] HRESULT HorizontalAlignment([in] XlHAlign halign);

		[propget,id(11), helpstring("property VerticalAlignment")] HRESULT VerticalAlignment([out, retval] XlVAlign *valign);
		[propput,id(11), helpstring("property VerticalAlignment")] HRESULT VerticalAlignment([in] XlVAlign valign);

		[id(12), helpstring("method Merge")] HRESULT Merge([in, optional] VARIANT_BOOL flag);

		[id(13), helpstring("method UnMerge")] HRESULT UnMerge();

		[propget,id(14), helpstring("property WrapText")] HRESULT WrapText([out, retval] VARIANT_BOOL *pvbwraptext);
		[propput,id(14), helpstring("property WrapText")] HRESULT WrapText([in] VARIANT_BOOL pvbwraptext);
//Application
		[propget,id(15), helpstring("property Application")] HRESULT Application([out, retval] IDispatch **value);
//Parent
		[propget,id(16), helpstring("property Parent")] HRESULT Parent([out, retval] IDispatch **value);
//Worksheet
		[propget,id(17), helpstring("property Worksheet")] HRESULT Worksheet([out, retval] IDispatch **value);

		[id(18), helpstring("method Clear")] VARIANT Clear();

		[id(19), helpstring("method ClearComments")] HRESULT ClearComments();

		[id(20), helpstring("method ClearFormats")] VARIANT ClearFormats();

		[id(21), helpstring("method ClearNotes")] VARIANT ClearNotes();

		[id(22), helpstring("method ClearOutline")] VARIANT ClearOutline();
//Interior
		[propget,id(23), helpstring("property Interior")] HRESULT Interior([out, retval] IDispatch **value);
//Borders
		[propget,id(24), helpstring("property Borders")] HRESULT Borders([out, retval] IDispatch **value);
//Count
		[propget,id(25), helpstring("property Count")] HRESULT Count([out, retval] long *lcount);
//delete
		[id(26), helpstring("method Delete")] HRESULT Delete([in, optional] VARIANT param, [out, retval] IDispatch **value);
//RowHeight
		[propget,id(27), helpstring("property RowHeight")] HRESULT RowHeight([out, retval] long *pnrowheight);
		[propput,id(27), helpstring("property RowHeight")] HRESULT RowHeight([in] long nrowheight);
//Copy
		[id(28), helpstring("method Copy")] HRESULT Copy(
			[in, optional] VARIANT RangeTo,
			[out, retval] IDispatch **value);
//NumberFormat
		[propget,id(29), helpstring("property NumberFormat")] HRESULT NumberFormat([out, retval] VARIANT *pnumbformat);
		[propput,id(29), helpstring("property NumberFormat")] HRESULT NumberFormat([in] VARIANT numbformat);
//NumberFormatLocal
		[propget,id(30), helpstring("property NumberFormatLocal")] HRESULT NumberFormatLocal([out, retval] VARIANT *pnumbformat);
		[propput,id(30), helpstring("property NumberFormatLocal")] HRESULT NumberFormatLocal([in] VARIANT numbformat);
//Height
		[propget,id(31), helpstring("property Height")] HRESULT Height([out, retval] VARIANT *value);
//Width
		[propget,id(32), helpstring("property Width")] HRESULT Width([out, retval] VARIANT *value);
//Left
		[propget,id(33), helpstring("property Left")] HRESULT Left([out, retval] VARIANT *value);
//Top
		[propget,id(34), helpstring("property Top")] HRESULT Top([out, retval] VARIANT *value);
//ShrinkToFit
		[propget,id(35), helpstring("property ShrinkToFit")] HRESULT ShrinkToFit([out, retval] VARIANT *pparam);
		[propput,id(35), helpstring("property ShrinkToFit")] HRESULT ShrinkToFit([in] VARIANT param);
//MergeCells
		[propget,id(36), helpstring("property MergeCells")] HRESULT MergeCells([out, retval] VARIANT *pparam);
		[propput,id(36), helpstring("property MergeCells")] HRESULT MergeCells([in] VARIANT param);
//Locked
		[propget,id(37), helpstring("property Locked")] HRESULT Locked([out, retval] VARIANT *pparam);
		[propput,id(37), helpstring("property Locked")] HRESULT Locked([in] VARIANT param);
//Hidden
		[propget,id(38), helpstring("property Hidden")] HRESULT Hidden([out, retval] VARIANT *pparam);
		[propput,id(38), helpstring("property Hidden")] HRESULT Hidden([in] VARIANT param);
//MergeArea
		[propget,id(39), helpstring("property MergeArea")] HRESULT MergeArea([out, retval] IDispatch **value);
//AutoFit
		[id(40), helpstring("method AutoFit")] VARIANT AutoFit();
//Insert
		[id(41), helpstring("method Insert")] VARIANT Insert(
			[in, optional] VARIANT Shift,
			[in, optional] VARIANT CopyOrigin);
//EntireColumn
		[propget,id(42), helpstring("property EntireColumn")] HRESULT EntireColumn([out, retval] IDispatch **value);
//EntireRow
		[propget,id(43), helpstring("property EntireRow")] HRESULT EntireRow([out, retval] IDispatch **value);
	};

	[
		object,
		uuid(64E6FD03-19B4-4149-A1CE-E9517DC05B34),
		dual,
		helpstring("I_PageSetup Interface"),
		pointer_default(unique)
	]
	interface I_PageSetup : IDispatch
	{
//LeftMargin
		[propget,id(1), helpstring("property LeftMargin")] HRESULT LeftMargin([out, retval] double *value);
		[propput,id(1), helpstring("property LeftMargin")] HRESULT LeftMargin([in] double value);
//RightMargin
		[propget,id(2), helpstring("property RightMargin")] HRESULT RightMargin([out, retval] double *value);
		[propput,id(2), helpstring("property RightMargin")] HRESULT RightMargin([in] double value);
//TopMargin
		[propget,id(3), helpstring("property TopMargin")] HRESULT TopMargin([out, retval] double *value);
		[propput,id(3), helpstring("property TopMargin")] HRESULT TopMargin([in] double value);
//BottomMargin
		[propget,id(4), helpstring("property BottomMargin")] HRESULT BottomMargin([out, retval] double *value);
		[propput,id(4), helpstring("property BottomMargin")] HRESULT BottomMargin([in] double value);
//Orientation
		[propget,id(5), helpstring("property Orientation")] HRESULT Orientation([out, retval] long *value);
		[propput,id(5), helpstring("property Orientation")] HRESULT Orientation([in] long value);
//Zoom
		[propget,id(6), helpstring("property Zoom")] HRESULT Zoom([out, retval] VARIANT *value);
		[propput,id(6), helpstring("property Zoom")] HRESULT Zoom([in] VARIANT value);
//FitToPagesTall
		[propget,id(7), helpstring("property FitToPagesTall")] HRESULT FitToPagesTall([out, retval] VARIANT *value);
		[propput,id(7), helpstring("property FitToPagesTall")] HRESULT FitToPagesTall([in] VARIANT value);
//FitToPagesWide
		[propget,id(8), helpstring("property FitToPagesWide")] HRESULT FitToPagesWide([out, retval] VARIANT *value);
		[propput,id(8), helpstring("property FitToPagesWide")] HRESULT FitToPagesWide([in] VARIANT value);
//HeaderMargin
		[propget,id(9), helpstring("property HeaderMargin")] HRESULT HeaderMargin([out, retval] double *value);
		[propput,id(9), helpstring("property HeaderMargin")] HRESULT HeaderMargin([in] double value);
//FooterMargin
		[propget,id(10), helpstring("property FooterMargin")] HRESULT FooterMargin([out, retval] double *value);
		[propput,id(10), helpstring("property FooterMargin")] HRESULT FooterMargin([in] double value);
//CenterHorizontally
		[propget,id(11), helpstring("property CenterHorizontally")] HRESULT CenterHorizontally([out, retval] VARIANT_BOOL *value);
		[propput,id(11), helpstring("property CenterHorizontally")] HRESULT CenterHorizontally([in] VARIANT_BOOL value);
//CenterVertically
		[propget,id(12), helpstring("property CenterVertically")] HRESULT CenterVertically([out, retval] VARIANT_BOOL *value);
		[propput,id(12), helpstring("property CenterVertically")] HRESULT CenterVertically([in] VARIANT_BOOL value);
//PrintTitleRows
		[propget,id(13), helpstring("property PrintTitleRows")] HRESULT PrintTitleRows([out, retval] BSTR *value);
		[propput,id(13), helpstring("property PrintTitleRows")] HRESULT PrintTitleRows([in] BSTR value);
	};

	[
		object,
		uuid(89D530BA-8D4B-48b7-99A3-3AD84E2DDC87),
		dual,
		helpstring("I_Shape Interface"),
		pointer_default(unique)
	]
	interface I_Shape : IDispatch
	{

	};

	[
		object,
		uuid(8BEDE852-1F35-4aeb-8FEA-12A40C8934B1),
		dual,
		helpstring("I_Shapes Interface"),
		pointer_default(unique)
	]
	interface I_Shapes : IDispatch
	{
//AddLine Returns a Shape object that represents the new line in a worksheet.
		[id(1), helpstring("method AddLine")] HRESULT AddLine(
			[in] float beginX,
			[in] float beginY,
			[in] float endX,
			[in] float endY,
			[out, retval] IDispatch **ppValue);
	};

	[
		object,
		uuid(000208D8-0000-0000-C000-000000000046),
		dual,
		helpstring("I_Worksheet Interface"),
		pointer_default(unique)
	]
	interface I_Worksheet : IDispatch
	{
//Name
		[propget,id(1), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pbstrName);
		[propput,id(1), helpstring("property Name")] HRESULT Name([in] BSTR bstrName);
//Cells
		[propget,id(2), helpstring("property Cells")] HRESULT Cells   ([out, retval] IDispatch **ppRange);
//Range
		[propget,id(3), helpstring("property Range")] HRESULT Range([in] VARIANT Cell1, [in, optional] VARIANT Cell2, [out, retval] IDispatch **ppRange);
//Paste
		[id(4), helpstring("method Paste")] HRESULT Paste([in, optional] VARIANT Destination, [in, optional] VARIANT Link, [in] long lcid);
//Activate
		[id(5), helpstring("method Activate")] HRESULT Activate();
//Rows
		[propget,id(6), helpstring("property Rows")] HRESULT Rows([in, optional] VARIANT Row, [out, retval] IDispatch **ppRange);
//Columns
		[propget,id(7), helpstring("property Columns")] HRESULT Columns([in, optional] VARIANT Column, [out, retval] IDispatch **ppRange);
//Copy
		[id(8), helpstring("method Copy")] HRESULT Copy(
			[in, optional] VARIANT Before,
			[in, optional] VARIANT After);
//Delete
		[id(9), helpstring("method Delete")] HRESULT Delete();
//PageSetup
		[propget,id(10), helpstring("property PageSetup")] HRESULT PageSetup([out, retval] IDispatch **ppValue);
//Protect
		[id(11), helpstring("property Protect")] HRESULT Protect([in, optional] VARIANT Password,
			[in, optional] VARIANT DrawingObjects,
			[in, optional] VARIANT Contents,
			[in, optional] VARIANT Scenarios,
			[in, optional] VARIANT UserInterfaceOnly,
			[in, optional] VARIANT AllowFormattingCells,
			[in, optional] VARIANT AllowFormattingColumns,
			[in, optional] VARIANT AllowFormattingRows,
			[in, optional] VARIANT AllowInsertingColumns,
			[in, optional] VARIANT AllowInsertingRows,
			[in, optional] VARIANT AllowInsertingHyperlinks,
			[in, optional] VARIANT AllowDeletingColumns,
			[in, optional] VARIANT AllowDeletingRows,
			[in, optional] VARIANT AllowSorting,
			[in, optional] VARIANT AllowFiltering,
			[in, optional] VARIANT AllowUsingPivotTables);
//Unprotect
		[id(12), helpstring("property Unprotect")] HRESULT Unprotect([in, optional] VARIANT Password);
//Shapes
		[propget, id(13), helpstring("property Shapes")] HRESULT Shapes([out, retval] IDispatch **ppValue);
	};

	[
		object,
		uuid(000208D7-0000-0000-C000-000000000046),
		dual,
		helpstring("I_Sheets Interface"),
		pointer_default(unique)
	]
	interface I_Sheets : IDispatch
	{
		[propget,id(1), helpstring("property _Default")] HRESULT _Default([in] VARIANT varIndex, [out, retval] IDispatch **ppSheet);
//Count
		[propget,id(2), helpstring("property Count")] HRESULT Count([out, retval] int *count);
//Application
		[propget,id(3), helpstring("property Application")] HRESULT Application([out, retval] IDispatch **value);
//Parent
		[propget,id(4), helpstring("property Parent")] HRESULT Parent([out, retval] IDispatch **value);
//Item
		[propget,id(5), helpstring("property Item")] HRESULT Item([in] VARIANT varIndex, [out, retval] IDispatch **ppSheet);
//Creator
		[propget,id(6), helpstring("property Creator")] HRESULT Creator([out, retval] VARIANT *result);
//Add
		[id(7), helpstring("method Add")] HRESULT Add(
			[in, optional] VARIANT Before,
			[in, optional] VARIANT After,
			[in, optional] VARIANT Count,
			[in, optional] VARIANT Type,
			[out, retval] IDispatch **value);
	};

	[
		object,
		uuid(000208DA-0000-0000-C000-000000000046),
		dual,
		helpstring("I_Workbook Interface"),
		pointer_default(unique)
	]
	interface I_Workbook : IDispatch
	{
		[propget,id(1), helpstring("property Sheets")] HRESULT Sheets([out, retval] IDispatch **ppSheets);
//WorkSheets = Sheets
		[propget,id(2), helpstring("property WorkSheets")] HRESULT WorkSheets([out, retval] IDispatch **ppSheets);
//Close
		[id(3), helpstring("method Close")] HRESULT Close(
			[in, optional] VARIANT SaveChanges,
			[in, optional] VARIANT Filename,
			[in, optional] VARIANT RouteWorkbook);
//SaveAs
		[id(4), helpstring("method SaveAs")] HRESULT SaveAs(
			[in, optional] VARIANT Filename,
			[in, optional] VARIANT FileFormat,
			[in, optional] VARIANT Password,
			[in, optional] VARIANT WriteResPassword,
			[in, optional] VARIANT ReadOnlyRecommended,
			[in, optional] VARIANT CreateBackup,
			[in, optional] XlSaveAsAccessMode AccessMode,
			[in, optional] VARIANT ConflictResolution,
			[in, optional] VARIANT AddToMru,
			[in, optional] VARIANT TextCodepage,
			[in, optional] VARIANT TextVisualLayout,
			[in, optional] VARIANT Local);
//Save
		[id(5), helpstring("method Save")] HRESULT Save();
//Protect
		[id(6), helpstring("method Protect")] HRESULT Protect(
			[in, optional] VARIANT Password,
			[in, optional] VARIANT Structure,
			[in, optional] VARIANT Windows);
//Unprotect
		[id(7), helpstring("method Unprotect")] HRESULT Unprotect(
			[in, optional] VARIANT Password);
//Name
		[propget,id(8), helpstring("property Name")] HRESULT Name([out, retval] BSTR *retval);
//Names
		[propget,id(9), helpstring("property Names")] HRESULT Names([out, retval] IDispatch **retval);

	};

	[
		object,
		uuid(9D055220-D153-4a09-B680-6AAC88BD06F1),
		dual,
		helpstring("Names Interface"),
		pointer_default(unique)
	]
	interface Names : IDispatch
	{
//Application
		[propget,id(1), helpstring("property Application")] HRESULT Application([out, retval] IDispatch **value);
//Count
		[propget,id(2), helpstring("property Count")] HRESULT Count([out, retval] int *count);
//Creator
		[propget,id(3), helpstring("property Creator")] HRESULT Creator([out, retval] VARIANT *result);
//Parent
		[propget,id(4), helpstring("property Parent")] HRESULT Parent([out, retval] IDispatch **value);
//_Default
		[id(5), helpstring("property _Default")] HRESULT _Default(
			[in, optional] VARIANT Index,
			[in, optional] VARIANT IndexLocal,
			[in, optional] VARIANT RefersTo,
			[out, retval] IDispatch **ppvalue);
//Add
		[id(6), helpstring("property Add")] HRESULT Add(
			[in, optional] VARIANT Name,
			[in, optional] VARIANT RefersTo,
			[in, optional] VARIANT Visible,
			[in, optional] VARIANT MacroType,
			[in, optional] VARIANT ShortcutKey,
			[in, optional] VARIANT Category,
			[in, optional] VARIANT NameLocal,
			[in, optional] VARIANT RefersToLocal,
			[in, optional] VARIANT CategoryLocal,
			[in, optional] VARIANT RefersToR1C1,
			[in, optional] VARIANT RefersToR1C1Local,
			[out, retval] IDispatch **ppvalue);
//GetEnumerator
		[id(7), helpstring("property GetEnumerator")] HRESULT GetEnumerator([out, retval] IDispatch **value);
//Item
		[id(8), helpstring("property Item")] HRESULT Item(
			[in, optional] VARIANT Index,
			[in, optional] VARIANT IndexLocal,
			[in, optional] VARIANT RefersTo,
			[out, retval] IDispatch **ppvalue);
	}

	[
		object,
		uuid(000208DB-0000-0000-C000-000000000046),
		dual,
		helpstring("I_Workbooks Interface"),
		pointer_default(unique)
	]
	interface I_Workbooks : IDispatch
	{
//Add 	Creates a new workbook. The new workbook becomes the active workbook. Returns a Workbook object.
		[id(1), helpstring("method Add")] HRESULT Add([in, optional] VARIANT varTemplate, [out, retval] IDispatch **ppWorkbook);
//_Open
		[id(2), hidden, helpstring("method _Open")] HRESULT _Open(
			[in]           BSTR        Filename,
			[in, optional] VARIANT     UpdateLinks,
			[in, optional] VARIANT     ReadOnly,
			[in, optional] VARIANT     Format,
			[in, optional] VARIANT     Password,
			[in, optional] VARIANT     WriteResPassword,
			[in, optional] VARIANT     IgnoreReadOnlyRecommended,
			[in, optional] VARIANT     Origin,
			[in, optional] VARIANT     Delimiter,
			[in, optional] VARIANT     Editable,
			[in, optional] VARIANT     Notify,
			[in, optional] VARIANT     Converter,
			[in, optional] VARIANT     AddToMru,
			[in]     long        Lcid,
			[out, retval]  IDispatch **ppWorkbook);
//Close 	Closes the object. 
		[id(3), helpstring("method Close")] HRESULT Close([in] long lcid);
//Count
		[propget,id(4), helpstring("property Count")] HRESULT Count([out, retval] int *count);
//Application
		[propget,id(5), helpstring("property Application")] HRESULT Application([out, retval] IDispatch **value);
//Parent
		[propget,id(6), helpstring("property Parent")] HRESULT Parent([out, retval] IDispatch **value);
//Open
		[id(7), helpstring("method Open")] HRESULT Open(
			[in]           BSTR        Filename,
			[in, optional] VARIANT     UpdateLinks,
			[in, optional] VARIANT     ReadOnly,
			[in, optional] VARIANT     Format,
			[in, optional] VARIANT     Password,
			[in, optional] VARIANT     WriteResPassword,
			[in, optional] VARIANT     IgnoreReadOnlyRecommended,
			[in, optional] VARIANT     Origin,
			[in, optional] VARIANT     Delimiter,
			[in, optional] VARIANT     Editable,
			[in, optional] VARIANT     Notify,
			[in, optional] VARIANT     Converter,
			[in, optional] VARIANT     AddToMru,
			[in, optional] VARIANT     Local,
			[in, optional] VARIANT     CorruptLoad,
			[in]     long        Lcid,
			[out, retval]  IDispatch **ppWorkbook);
//OpenText
		[id(8), helpstring("method OpenText")] HRESULT OpenText(
			[in]           BSTR        Filename,
			[in, optional] VARIANT     Origin,
			[in, optional] VARIANT     StartRow,
			[in, optional] VARIANT     DataType,
			[in, optional] VARIANT     TextQualifier,
			[in, optional] VARIANT     ConsecutiveDelimiter,
			[in, optional] VARIANT     Tab,
			[in, optional] VARIANT     Semicolon,
			[in, optional] VARIANT     Comma,
			[in, optional] VARIANT     Space,
			[in, optional] VARIANT     Other,
			[in, optional] VARIANT     OtherChar,
			[in, optional] VARIANT     FieldInfo,
			[in, optional] VARIANT     TextVisualLayout,
			[in, optional] VARIANT     DecimalSeparator,
			[in, optional] VARIANT     ThousandsSeparator,
			[in, optional] VARIANT     TrailingMinusNumbers,
			[in, optional] VARIANT     Local,
			[in]     long        Lcid,
			[out, retval]  IDispatch **ppWorkbook);
//_OpenText
		[id(9), hidden, helpstring("method _OpenText")] HRESULT _OpenText(
			[in]           BSTR        Filename,
			[in, optional] VARIANT     Origin,
			[in, optional] VARIANT     StartRow,
			[in, optional] VARIANT     DataType,
			[in, optional] VARIANT     TextQualifier,
			[in, optional] VARIANT     ConsecutiveDelimiter,
			[in, optional] VARIANT     Tab,
			[in, optional] VARIANT     Semicolon,
			[in, optional] VARIANT     Comma,
			[in, optional] VARIANT     Space,
			[in, optional] VARIANT     Other,
			[in, optional] VARIANT     OtherChar,
			[in, optional] VARIANT     FieldInfo,
			[in, optional] VARIANT     TextVisualLayout,
			[in, optional] VARIANT     DecimalSeparator,
			[in, optional] VARIANT     ThousandsSeparator,
			[in]     long        Lcid,
			[out, retval]  IDispatch **ppWorkbook);
//OpenXML
		[id(10), helpstring("method OpenXML")] HRESULT OpenXML(
			[in]           BSTR        Filename,
			[in, optional] VARIANT     Stylesheets,
			[in, optional] VARIANT     LoadOption,
			[in]     long        Lcid,
			[out, retval]  IDispatch **ppWorkbook);
//_OpenXML
		[id(11), hidden, helpstring("method _OpenXML")] HRESULT _OpenXML(
			[in]           BSTR        Filename,
			[in, optional] VARIANT     Stylesheets,
			[in]     long        Lcid,
			[out, retval]  IDispatch **ppWorkbook);
//OpenDatabase
		[id(12), helpstring("method OpenDatabase")] HRESULT OpenDatabase(
			[in]           BSTR        Filename,
			[in, optional] VARIANT     CommandText,
			[in, optional] VARIANT     CommandType,
			[in, optional] VARIANT     BackgroundQuery,
			[in, optional] VARIANT     ImportDataAs,
			[in]     long        Lcid,
			[out, retval]  IDispatch **ppWorkbook);
//CanCheckOut
		[propget,id(13), helpstring("property CanCheckOut")] HRESULT CanCheckOut([in] BSTR Filename, [out, retval] VARIANT_BOOL *result);
		[propput,id(13), helpstring("property CanCheckOut")] HRESULT CanCheckOut([in] BSTR Filename, [in] VARIANT_BOOL result);
//CheckOut
		[id(14), helpstring("method CanCheckOut")] HRESULT CheckOut([in] BSTR Filename);
//Creator
		[propget,id(15), helpstring("property Creator")] HRESULT Creator([out, retval] VARIANT *result);
//_Default
		[propget,id(16), helpstring("property _Default")] HRESULT _Default([in] VARIANT varIndex, [out, retval] IDispatch **ppSheet);
//Item
		[propget,id(17), helpstring("property Item")] HRESULT Item([in] VARIANT index, [out, retval] IDispatch **result);
//__OpenText
		[id(18), hidden, helpstring("method __OpenText")] HRESULT __OpenText(
			[in]           BSTR        Filename,
			[in, optional] VARIANT     Origin,
			[in, optional] VARIANT     StartRow,
			[in, optional] VARIANT     DataType,
			[in, optional] VARIANT     TextQualifier,
			[in, optional] VARIANT     ConsecutiveDelimiter,
			[in, optional] VARIANT     Tab,
			[in, optional] VARIANT     Semicolon,
			[in, optional] VARIANT     Comma,
			[in, optional] VARIANT     Space,
			[in, optional] VARIANT     Other,
			[in, optional] VARIANT     OtherChar,
			[in, optional] VARIANT     FieldInfo,
			[in, optional] VARIANT     TextVisualLayout,
			[in]     long        Lcid,
			[out, retval]  IDispatch **ppWorkbook);
//Methods
//GetEnumerator 	Returns an enumerator to support iterating through the collection.   .NET
		};

	[
		object,
		uuid(000208D5-0000-0000-C000-000000000046),
		dual,
		helpstring("I_Application Interface"),
		pointer_default(unique)
	]
	interface I_ApplicationExcel : IDispatch
	{
//Application 	Returns an Application object that represents the creator of the specified object (you can use this property with an OLE Automation object to return the application of that object).
		[propget,id(dispid_application_application), helpstring("property Application")] HRESULT Application([out, retval] IDispatch **value);
//Creator 	Returns a 32-bit integer that indicates the application in which this object was created. If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C.
		[id(dispid_application_creator), propget, helpstring("property Creator")]HRESULT Creator([out, retval] XlCreator* RHS);
//Parent 	Returns the parent object for the specified object.
		[id(dispid_application_parent), propget, helpstring("property Parent")]HRESULT Parent([out, retval] IDispatch** RHS);
//ActiveCell 	Returns a Range object that represents the active cell in the active window (the window on top) or in the specified window. If the window isn't displaying a worksheet, this property fails.
		[propget,id(dispid_application_activecell),helpstring("property ActiveCell")] HRESULT ActiveCell([out, retval] IDispatch** RHS);
//ActiveChart 	Returns a Chart object that represents the active chart (either an embedded chart or a chart sheet). An embedded chart is considered active when it's either selected or activated. When no chart is active, this property returns Nothing.
		[id(dispid_application_activechart), propget, helpstring("property ActiveChart")] HRESULT ActiveChart([out, retval] IDispatch** RHS);
//ActiveDialog
		[id(dispid_application_activedialog), propget, hidden, helpstring("property ActiveDialog")]HRESULT ActiveDialog([out, retval] IDispatch** RHS);
//ActiveMenuBar
		[id(dispid_application_activemenubar), propget, hidden, helpstring("property ActiveMenuBar")]HRESULT ActiveMenuBar([out, retval] IDispatch** RHS);
//ActivePrinter Returns or sets the name of the active printer.
		[id(dispid_application_activeprinter), propget, helpstring("property ActivePrinter")] HRESULT ActivePrinter(
			[in] long lcid,
			[out, retval] BSTR* RHS);
//ActiveSheet 	Returns an object that represents the active sheet (the sheet on top) in the active workbook or in the specified window or workbook. Returns Nothing if no sheet is active.
		[propget,id(dispid_application_activesheet),helpstring("property ActiveSheet")] HRESULT ActiveSheet([out, retval] IDispatch** RHS);
//ActiveWindow 	Returns a Window object that represents the active window (the window on top). Returns Nothing if there are no windows open.
		[id(dispid_application_activewindow), propget, helpstring("property ActiveWindow")] HRESULT ActiveWindow([out, retval] IDispatch** RHS);
//ActiveWorkbook 	Returns a Workbook object that represents the workbook in the active window (the window on top). Returns Nothing if there are no windows open or if either the Info window or the Clipboard window is the active window.
		[propget,id(dispid_application_activeworkbook), helpstring("property ActiveWorkbook")] HRESULT ActiveWorkbook([out, retval] IDispatch **result);
//AddIns 	Returns an AddIns collection that represents all the add-ins listed in the Add-Ins dialog box (Tools menu).
		[id(dispid_application_addins), propget, helpstring("property AddIns")] HRESULT AddIns([out, retval] IDispatch** RHS);
//Assistant 	Returns an Microsoft.Office.Core.Assistant object for Microsoft Excel.
		[id(dispid_application_assistant), propget, helpstring("property Assistant")] HRESULT Assistant([out, retval] IDispatch** RHS);
//Calculate 	Calculates all open workbooks 
		[id(dispid_application_calculate), helpstring("method Calculate")] HRESULT Calculate([in] long lcid);
//Cells 	Returns a Range object that represents all the cells on the active worksheet. If the active document isn?t a worksheet, this property fails.
		[propget,id(dispid_application_cells), helpstring("property Cells")] HRESULT Cells([out, retval] IDispatch **ppRange);
//Charts 	Returns a Sheets collection that represents all the chart sheets in the active workbook.
		[id(dispid_application_charts), propget, helpstring("property Charts")] HRESULT Charts([out, retval] /*ISheets*/IDispatch** RHS);
//Columns 	Returns a Range object that represents all the columns on the active worksheet. If the active document isn't a worksheet, the Columns property fails.
// !!!Исправить должен быть всего один параметр.!!!
		[propget,id(dispid_application_columns), helpstring("property Columns")] HRESULT Columns( [in, optional] VARIANT param, [out, retval] IDispatch **ppRange);
//CommandBars 	Returns a Microsoft.Office.Core.CommandBars object that represents the Microsoft Excel command bars.
		[id(dispid_application_commandbars), propget, helpstring("property CommandBars")] HRESULT CommandBars([out, retval] IDispatch** RHS);
//DDEAppReturnCode 	Returns the application-specific DDE return code that was contained in the last DDE acknowledge message received by Microsoft Excel.
		[id(dispid_application_ddeappreturncode), propget, helpstring("property DDEAppReturnCode")] HRESULT DDEAppReturnCode(
			[in] long lcid, 
			[out, retval] long* RHS);
//DDEExecute 	Runs a command or performs some other action or actions in another application by way of the specified DDE channel. 
		[id(dispid_application_ddeexecute), helpstring("method DDEExecute")] HRESULT DDEExecute(
			[in] long Channel,
			[in] BSTR String,
			[in] long lcid);
//DDEInitiate 	Opens a DDE channel to an application. 
		[id(dispid_application_ddeinitiate), helpstring("method DDEInitiate")] HRESULT DDEInitiate(
			[in] BSTR App,
			[in] BSTR Topic,
			[in] long lcid,
			[out, retval] long* RHS);
//DDEPoke 	Sends data to an application. 
		[id(dispid_application_ddepoke), helpstring("method DDEPoke")] HRESULT DDEPoke(
			[in] long Channel,
			[in] VARIANT Item,
			[in] VARIANT Data,
			[in] long lcid);
//DDERequest 	Requests information from the specified application. This method always returns an array. 
		[id(dispid_application_dderequest), helpstring("method DDERequest")] HRESULT DDERequest(
			[in] long Channel,
			[in] BSTR Item,
			[in] long lcid,
			[out, retval] VARIANT* RHS);
//DDETerminate 	Closes a channel to another application. 
		[id(dispid_application_ddeterminate), helpstring("method DDETerminate")] HRESULT DDETerminate(
			[in] long Channel,
			[in] long lcid);
//DialogSheets
		[id(dispid_application_dialogsheets), propget, hidden, helpstring("property DialogSheets")] HRESULT DialogSheets([out, retval] IDispatch** RHS);
//Evaluate	Converts a Microsoft Excel name to an object or a value.
		[id(dispid_application_evaluate), helpstring("method Evaluate")] HRESULT Evaluate(
			[in] VARIANT Name,
			[in] long lcid,
			[out, retval] VARIANT* RHS);
//_Evaluate
		[id(dispid_application__evaluate), helpstring("method _Evaluate")] HRESULT _Evaluate(
			[in] VARIANT Name,
			[in] long lcid,
			[out, retval] VARIANT* RHS);
//ExecuteExcel4Macro 	Runs a Microsoft Excel 4.0 macro function, and then returns the result of the function. The return type depends on the function. 
		[id(dispid_application_evaluateexcel4macro), helpstring("method ExecuteExcel4Macro")] HRESULT ExecuteExcel4Macro(
			[in] BSTR String,
			[in] long lcid,
			[out, retval] VARIANT* RHS);
//Intersect 	Returns a Range object that represents the rectangular intersection of two or more ranges. 
		[id(dispid_application_intersect), helpstring("method Intersect")] HRESULT Intersect(
			[in] /*IRange*/IDispatch* Arg1,
			[in] /*IRange*/IDispatch* Arg2,
			[in, optional] VARIANT Arg3,
			[in, optional] VARIANT Arg4,
			[in, optional] VARIANT Arg5,
			[in, optional] VARIANT Arg6,
			[in, optional] VARIANT Arg7,
			[in, optional] VARIANT Arg8,
			[in, optional] VARIANT Arg9,
			[in, optional] VARIANT Arg10,
			[in, optional] VARIANT Arg11,
			[in, optional] VARIANT Arg12,
			[in, optional] VARIANT Arg13,
			[in, optional] VARIANT Arg14,
			[in, optional] VARIANT Arg15,
			[in, optional] VARIANT Arg16,
			[in, optional] VARIANT Arg17,
			[in, optional] VARIANT Arg18,
			[in, optional] VARIANT Arg19,
			[in, optional] VARIANT Arg20,
			[in, optional] VARIANT Arg21,
			[in, optional] VARIANT Arg22,
			[in, optional] VARIANT Arg23,
			[in, optional] VARIANT Arg24,
			[in, optional] VARIANT Arg25,
			[in, optional] VARIANT Arg26,
			[in, optional] VARIANT Arg27,
			[in, optional] VARIANT Arg28,
			[in, optional] VARIANT Arg29,
			[in, optional] VARIANT Arg30,
			[in] long lcid,
			[out, retval] /*IRange*/IDispatch** RHS);
//MenuBars
		[id(dispid_application_menubars), propget, hidden, helpstring("property MenuBars")] HRESULT MenuBars([out, retval] IDispatch** RHS);
//Modules
		[id(dispid_application_modules), propget, hidden, helpstring("property Modules")] HRESULT Modules([out, retval] IDispatch** RHS);
//Names 	Returns a Names collection that represents all the names in the active workbook.
		[id(dispid_application_names), propget, helpstring("property Names")] HRESULT Names([out, retval] IDispatch** RHS);
//Range 	Returns a Range object that represents a cell or a range of cells.
		[propget,id(dispid_application_range), helpstring("property Range")] HRESULT Range   ([in] VARIANT Cell1, [in, optional] VARIANT Cell2, [out, retval] IDispatch **ppRange);

//Rows 	Returns a Range object that represents all the rows on the active worksheet. If the active document isn?t a worksheet, the Rows property fails.
		[propget,id(dispid_application_rows), helpstring("property Rows")] HRESULT Rows( [in, optional] VARIANT param, [out, retval] IDispatch **ppRange);
//Run 	Runs a macro or calls a function. 
		[id(dispid_application_run), helpstring("method Run")] HRESULT Run(
			[in, optional] VARIANT Macro,
			[in, optional] VARIANT Arg1,
			[in, optional] VARIANT Arg2,
			[in, optional] VARIANT Arg3,
			[in, optional] VARIANT Arg4,
			[in, optional] VARIANT Arg5,
			[in, optional] VARIANT Arg6,
			[in, optional] VARIANT Arg7,
			[in, optional] VARIANT Arg8,
			[in, optional] VARIANT Arg9,
			[in, optional] VARIANT Arg10,
			[in, optional] VARIANT Arg11,
			[in, optional] VARIANT Arg12,
			[in, optional] VARIANT Arg13,
			[in, optional] VARIANT Arg14,
			[in, optional] VARIANT Arg15,
			[in, optional] VARIANT Arg16,
			[in, optional] VARIANT Arg17,
			[in, optional] VARIANT Arg18,
			[in, optional] VARIANT Arg19,
			[in, optional] VARIANT Arg20,
			[in, optional] VARIANT Arg21,
			[in, optional] VARIANT Arg22,
			[in, optional] VARIANT Arg23,
			[in, optional] VARIANT Arg24,
			[in, optional] VARIANT Arg25,
			[in, optional] VARIANT Arg26,
			[in, optional] VARIANT Arg27,
			[in, optional] VARIANT Arg28,
			[in, optional] VARIANT Arg29,
			[in, optional] VARIANT Arg30,
			[out, retval] VARIANT* RHS);
//_Run2
		[id(dispid_application__run2), helpstring("method _Run2")] HRESULT _Run2(
			[in, optional] VARIANT Macro,
			[in, optional] VARIANT Arg1,
			[in, optional] VARIANT Arg2,
			[in, optional] VARIANT Arg3,
			[in, optional] VARIANT Arg4,
			[in, optional] VARIANT Arg5,
			[in, optional] VARIANT Arg6,
			[in, optional] VARIANT Arg7,
			[in, optional] VARIANT Arg8,
			[in, optional] VARIANT Arg9,
			[in, optional] VARIANT Arg10,
			[in, optional] VARIANT Arg11,
			[in, optional] VARIANT Arg12,
			[in, optional] VARIANT Arg13,
			[in, optional] VARIANT Arg14,
			[in, optional] VARIANT Arg15,
			[in, optional] VARIANT Arg16,
			[in, optional] VARIANT Arg17,
			[in, optional] VARIANT Arg18,
			[in, optional] VARIANT Arg19,
			[in, optional] VARIANT Arg20,
			[in, optional] VARIANT Arg21,
			[in, optional] VARIANT Arg22,
			[in, optional] VARIANT Arg23,
			[in, optional] VARIANT Arg24,
			[in, optional] VARIANT Arg25,
			[in, optional] VARIANT Arg26,
			[in, optional] VARIANT Arg27,
			[in, optional] VARIANT Arg28,
			[in, optional] VARIANT Arg29,
			[in, optional] VARIANT Arg30,
			[in] long lcid,
			[out, retval] VARIANT* RHS);
//Selection 	Returns the selected object in the active window.
		[propget,id(dispid_application_selection), helpstring("property Selection")] HRESULT Selection([out, retval] IDispatch **ppRange);
//SendKeys 	Sends keystrokes to the active application. 
		[id(dispid_application_sendkeys), helpstring("method SendKeys")] HRESULT SendKeys(
			[in] VARIANT Keys,
			[in, optional] VARIANT Wait,
			[in] long lcid);
//Sheets 	Returns a Sheets collection that represents all the worksheets in the active workbook.
		[propget,id(dispid_application_sheets), helpstring("property Sheets")] HRESULT Sheets([out, retval] IDispatch **ppSheets);
//ShortcutMenus
		[id(dispid_application_shortcutmenus), propget, hidden, helpstring("property ShortcutMenus")] HRESULT ShortcutMenus(
			[in] long Index,
			[out, retval] IDispatch** RHS);
//ThisWorkbook 	Returns a Workbook object that represents the workbook where the current macro code is running.
		[id(dispid_application_thisworkbook), propget, helpstring("property ThisWorkbook")] HRESULT ThisWorkbook(
			[in] long lcid,
			[out, retval] /*IWorkbook*/IDispatch** RHS);
//Toolbars
		[id(dispid_application_toolbars), propget, hidden, helpstring("property Toolbars")] HRESULT Toolbars([out, retval] IDispatch** RHS);
//Union 	Returns the union of two or more ranges. 
		[id(dispid_application_union), helpstring("method Union")] HRESULT Union(
			[in] /*IRange*/IDispatch* Arg1,
			[in] /*IRange*/IDispatch* Arg2,
			[in, optional] VARIANT Arg3,
			[in, optional] VARIANT Arg4,
			[in, optional] VARIANT Arg5,
			[in, optional] VARIANT Arg6,
			[in, optional] VARIANT Arg7,
			[in, optional] VARIANT Arg8,
			[in, optional] VARIANT Arg9,
			[in, optional] VARIANT Arg10,
			[in, optional] VARIANT Arg11,
			[in, optional] VARIANT Arg12,
			[in, optional] VARIANT Arg13,
			[in, optional] VARIANT Arg14,
			[in, optional] VARIANT Arg15,
			[in, optional] VARIANT Arg16,
			[in, optional] VARIANT Arg17,
			[in, optional] VARIANT Arg18,
			[in, optional] VARIANT Arg19,
			[in, optional] VARIANT Arg20,
			[in, optional] VARIANT Arg21,
			[in, optional] VARIANT Arg22,
			[in, optional] VARIANT Arg23,
			[in, optional] VARIANT Arg24,
			[in, optional] VARIANT Arg25,
			[in, optional] VARIANT Arg26,
			[in, optional] VARIANT Arg27,
			[in, optional] VARIANT Arg28,
			[in, optional] VARIANT Arg29,
			[in, optional] VARIANT Arg30,
			[in] long lcid,
			[out, retval] /*IRange*/IDispatch** RHS);
//Windows 	Returns a Windows collection that represents all the windows in all the workbooks.
		[id(dispid_application_windows), propget, helpstring("property Windows")] HRESULT Windows([out, retval] IDispatch** RHS);
//Workbooks 	Returns a Workbooks collection that represents all the open workbooks.
		[propget,id(dispid_application_workbooks), helpstring("Workbooks")] HRESULT Workbooks([out, retval] IDispatch **ppWorkbooks);
//WorksheetFunction 	Returns the WorksheetFunction object.
		[id(dispid_application_worksheetfunction), propget, helpstring("property WorksheetFunction")] HRESULT WorksheetFunction([out, retval] IDispatch** RHS);
//Worksheets 	Returns a Sheets collection that represents all the worksheets in the active workbook.
		[propget,id(dispid_application_worksheets), helpstring("property Worksheet")] HRESULT Worksheets([out, retval] IDispatch **ppSheets);
//Excel4IntlMacroSheets 	Returns a Sheets collection that represents all the Microsoft Excel 4.0 international macro sheets in the specified workbook.
		[id(dispid_application_excel4intlmacrosheets), propget, helpstring("property Excel4IntlMacroSheets")] HRESULT Excel4IntlMacroSheets([out, retval] /*ISheets*/IDispatch** RHS);
//Excel4MacroSheets 	Returns a Sheets collection that represents all the Microsoft Excel 4.0 macro sheets in the specified workbook.
		[id(dispid_application_excel4macrosheets), propget, helpstring("property Excel4MacroSheets")] HRESULT Excel4MacroSheets([out, retval] /*ISheets*/IDispatch** RHS);
//ActivateMicrosoftApp 	Activates a Microsoft application. If the application is already running, this method activates the running application. If the application isn't running, this method starts a new instance of the application. 
		[id(dispid_application_activatemicrosoftapp), helpstring("method ActivateMicrosoftApp")] HRESULT ActivateMicrosoftApp(
			[in] XlMSApplication Index,
			[in] long lcid);
//AddChartAutoFormat 	Adds a custom chart autoformat to the list of available chart autoformats. 
		[id(dispid_application_addchartautoformat), helpstring("method AddChartAutoFormat")] HRESULT AddChartAutoFormat(
			[in] VARIANT Chart,
			[in] BSTR Name,
			[in, optional] VARIANT Description,
			[in] long lcid);
//AddCustomList 	Adds a custom list for custom autofill and/or custom sort. 
		[id(dispid_application_addcustomlist), helpstring("method AddCustomList")] HRESULT AddCustomList(
			[in] VARIANT ListArray,
			[in, optional] VARIANT ByRow,
			[in] long lcid);
//AlertBeforeOverwriting 	True if Microsoft Excel displays a message before overwriting nonblank cells during a drag-and-drop editing operation.
		[id(dispid_application_alertbeforeoverwriting), propget, helpstring("property AlertBeforeOverwriting")] HRESULT AlertBeforeOverwriting(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_alertbeforeoverwriting), propput, helpstring("property AlertBeforeOverwriting")] HRESULT AlertBeforeOverwriting(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//AltStartupPath 	Returns or sets the name of the alternate startup folder.
		[id(dispid_application_altstartuppath), propget, helpstring("property AltStartupPath")] HRESULT AltStartupPath(
			[in] long lcid,
			[out, retval] BSTR* RHS);
		[id(dispid_application_altstartuppath), propput, helpstring("property AltStartupPath")] HRESULT AltStartupPath(
			[in] long lcid,
			[in] BSTR RHS);
//AskToUpdateLinks 	True if Microsoft Excel asks the user to update links when opening files with links. False if links are automatically updated with no dialog box.
		[id(dispid_application_asktoupdatelinks), propget, helpstring("property AskToUpdateLinks")] HRESULT AskToUpdateLinks(
			[in] long lcid, 
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_asktoupdatelinks), propput, helpstring("property AskToUpdateLinks")] HRESULT AskToUpdateLinks(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//EnableAnimations 	True if animated insertion and deletion is enabled.
		[id(dispid_application_enableanimation), propget, helpstring("property EnableAnimation")] HRESULT EnableAnimations(
			[in] long lcid, 
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_enableanimation), propput, helpstring("property EnableAnimation")] HRESULT EnableAnimations(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//AutoCorrect 	Returns an AutoCorrect object that represents the Microsoft Excel AutoCorrect attributes.
		[id(dispid_application_autocorrect), propget, helpstring("property AutoCorrect")] HRESULT AutoCorrect([out, retval] IDispatch** RHS);
//Build 	Returns the Microsoft Excel build number.
		[id(dispid_application_build), propget, helpstring("property Build")] HRESULT Build(
			[in] long lcid,
			[out, retval] long* RHS);
//CalculateBeforeSave 	True if workbooks are calculated before they're saved to disk (if the Calculation property is set to xlManual). This property is preserved even if you change the Calculation property.
		[id(dispid_application_calculatebeforesave), propget, helpstring("property CalculateBeforeSave")] HRESULT CalculateBeforeSave(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_calculatebeforesave), propput, helpstring("property CalculateBeforeSave")] HRESULT CalculateBeforeSave(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//Calculation 	Returns or sets the calculation mode. Read/write XlCalculation.
		[id(dispid_application_calculation), propget, helpstring("property Calculation")] HRESULT Calculation(
			[in] long lcid,
			[out, retval] XlCalculation* RHS);
		[id(dispid_application_calculation), propput, helpstring("property Calculation")] HRESULT Calculation(
			[in] long lcid,
			[in] XlCalculation RHS);
//Caller 	Returns information about how Visual Basic was called (for more information, see the Remarks section).
		[id(dispid_application_caller), propget, helpstring("property Caller")] HRESULT Caller(
			[in, optional] VARIANT Index,
			[in] long lcid,
			[out, retval] VARIANT* RHS);
//CanPlaySounds 	This property should not be used. Sound notes have been removed from Microsoft Excel.
		[id(dispid_application_canplaysounds), propget, helpstring("property CanPlaySounds")] HRESULT CanPlaySounds(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
//CanRecordSounds 	This property should not be used. Sound notes have been removed from Microsoft Excel.
		[id(dispid_application_canrecordsounds), propget, helpstring("property CanRecordSounds")] HRESULT CanRecordSounds(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
//Caption 	The name that appears in the title bar of the main Microsoft Excel window. If you don't set a name, or if you set the name to Empty, this property returns "Microsoft Excel".
		[propget,id(dispid_application_caption), helpstring("property Caption")] HRESULT Caption([out, retval] VARIANT *vName);
		[propput,id(dispid_application_caption), helpstring("property Caption")] HRESULT Caption([in] VARIANT vName);
//CellDragAndDrop 	True if dragging and dropping cells is enabled.
		[id(dispid_application_celldraganddrop), propget, helpstring("property CellDragAndDrop")] HRESULT CellDragAndDrop(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_celldraganddrop), propput, helpstring("property CellDragAndDrop")] HRESULT CellDragAndDrop(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//CentimetersToPoints 	Converts a measurement from centimeters to points (one point equals 0.035 centimeters). 
		[id(dispid_application_centimeterstopoints), helpstring("method CentimetersToPoints")] HRESULT CentimetersToPoints(
			[in] double Centimeters,
			[in] long lcid,
			[out, retval] double* RHS);
//CheckSpelling 	Checks the spelling of a single word. Returns True if the word is found in one of the dictionaries; returns False if the word isn't found. 
		[id(dispid_application_checkspelling), helpstring("method CheckSpelling")] HRESULT CheckSpelling(
			[in] BSTR Word,
			[in, optional] VARIANT CustomDictionary,
			[in, optional] VARIANT IgnoreUppercase,
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
//ClipboardFormats 	Returns the formats that are currently on the Clipboard as an array of numeric values. To determine whether a particular format is on the Clipboard, compare each element in the array with the appropriate constant listed in the Remarks section.
		[id(dispid_application_clipboardformats), propget, helpstring("property ClipboardFormats")] HRESULT ClipboardFormats(
			[in, optional] VARIANT Index,
			[in] long lcid,
			[out, retval] VARIANT* RHS);
//DisplayClipboardWindow 	Returns True if the Microsoft Office Clipboard can be displayed.
		[id(dispid_application_displayclipboardwindow), propget, helpstring("property DisplayClipboardWindow")] HRESULT DisplayClipboardWindow(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_displayclipboardwindow), propput, helpstring("property DisplayClipboardWindow")] HRESULT DisplayClipboardWindow(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//ColorButtons 	 
        [id(dispid_application_colorbuttons), propget, hidden, helpstring("property ColorButtons")]
        HRESULT ColorButtons([out, retval] VARIANT_BOOL* RHS);
        [id(dispid_application_colorbuttons), propput, hidden, helpstring("property ColorButtons")]
        HRESULT ColorButtons([in] VARIANT_BOOL RHS);
//CommandUnderlines 	Returns or sets the state of the command underlines in Microsoft Excel for the Macintosh.
		[id(dispid_application_commandunderlines), propget, helpstring("property CommandUnderlines")] HRESULT CommandUnderlines(
			[in] long lcid,
			[out, retval] XlCommandUnderlines* RHS);
		[id(dispid_application_commandunderlines), propput, helpstring("property CommandUnderlines")] HRESULT CommandUnderlines(
			[in] long lcid,
			[in] XlCommandUnderlines RHS);
//ConstrainNumeric 	True if handwriting recognition is limited to numbers and punctuation only.
		[id(dispid_application_constrainnumeric), propget, helpstring("property ConstrainNumeric")] HRESULT ConstrainNumeric(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_constrainnumeric), propput, helpstring("property ConstrainNumeric")] HRESULT ConstrainNumeric(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//ConvertFormula 	Converts cell references in a formula between the A1 and R1C1 reference styles, between relative and absolute references, or both.
		[id(dispid_application_convertformula), helpstring("method ConvertFormula")] HRESULT ConvertFormula(
			[in]           VARIANT          Formula,
			[in]           XlReferenceStyle FromReferenceStyle,
			[in, optional] VARIANT          ToReferenceStyle,
			[in, optional] VARIANT          ToAbsolute,
			[in, optional] VARIANT          RelativeTo,
			[in]           long             Lcid,
			[out, retval]  VARIANT         *pResult);
//CopyObjectsWithCells 	True if objects are cut, copied, extracted, and sorted with cells.
		[id(dispid_application_copyobjectswithcells), propget, helpstring("property CopyObjectsWithCells")] HRESULT CopyObjectsWithCells(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_copyobjectswithcells), propput, helpstring("property CopyObjectsWithCells")] HRESULT CopyObjectsWithCells(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//Cursor 	Returns or sets the appearance of the mouse pointer in Microsoft Excel.
		[id(dispid_application_cursor), propget, helpstring("property Cursor")] HRESULT Cursor(
			[in] long lcid,
			[out, retval] XlMousePointer* RHS);
		[id(dispid_application_cursor), propput, helpstring("property Cursor")] HRESULT Cursor(
			[in] long lcid,
			[in] XlMousePointer RHS);
//CustomListCount 	Returns the number of defined custom lists (including built-in lists).
		[id(dispid_application_customlistcount), propget, helpstring("property CustomListCount")] HRESULT CustomListCount(
			[in] long lcid,
			[out, retval] long* RHS);
//CutCopyMode 	Returns or sets the status of Cut or Copy mode.
		[id(dispid_application_cutcopymode), propget, helpstring("property CutCopyMode")] HRESULT CutCopyMode(
			[in] long lcid,
			[out, retval] XlCutCopyMode* RHS);
		[id(dispid_application_cutcopymode), propput, helpstring("property CutCopyMode")] HRESULT CutCopyMode(
			[in] long lcid,
			[in] XlCutCopyMode RHS);
//DataEntryMode 	Returns or sets Data Entry mode, as shown in the table below. When in Data Entry mode, you can enter data only in the unlocked cells in the currently selected range.
		[id(dispid_application_dataentrymode), propget, helpstring("property DataEntryMode")] HRESULT DataEntryMode(
			[in] long lcid,
			[out, retval] long* RHS);
		[id(dispid_application_dataentrymode), propput, helpstring("property DataEntryMode")] HRESULT DataEntryMode(
			[in] long lcid,
			[in] long RHS);
//Dummy1 	 
		[id(dispid_application_dummy1), hidden, helpstring("method Dummy1")] HRESULT Dummy1(
			[in, optional] VARIANT Arg1,
			[in, optional] VARIANT Arg2,
			[in, optional] VARIANT Arg3,
			[in, optional] VARIANT Arg4,
			[out, retval] VARIANT* RHS);
//Dummy2 	 
		[id(dispid_application_dummy2), hidden, helpstring("method Dummy2")] HRESULT Dummy2(
			[in, optional] VARIANT Arg1,
			[in, optional] VARIANT Arg2,
			[in, optional] VARIANT Arg3,
			[in, optional] VARIANT Arg4,
			[in, optional] VARIANT Arg5,
			[in, optional] VARIANT Arg6,
			[in, optional] VARIANT Arg7,
			[in, optional] VARIANT Arg8,
			[out, retval] VARIANT* RHS);
//Dummy3 	 
		[id(dispid_application_dummy3), hidden, helpstring("method Dummy3")] HRESULT Dummy3([out, retval] VARIANT* RHS);
//Dummy4 	 
		[id(dispid_application_dummy4), hidden, helpstring("method Dummy4")] HRESULT Dummy4(
			[in, optional] VARIANT Arg1,
			[in, optional] VARIANT Arg2,
			[in, optional] VARIANT Arg3,
			[in, optional] VARIANT Arg4,
			[in, optional] VARIANT Arg5,
			[in, optional] VARIANT Arg6,
			[in, optional] VARIANT Arg7,
			[in, optional] VARIANT Arg8,
			[in, optional] VARIANT Arg9,
			[in, optional] VARIANT Arg10,
			[in, optional] VARIANT Arg11,
			[in, optional] VARIANT Arg12,
			[in, optional] VARIANT Arg13,
			[in, optional] VARIANT Arg14,
			[in, optional] VARIANT Arg15,
			[out, retval] VARIANT* RHS);
//Dummy5 	 
        [id(dispid_application_dummy5), hidden, helpstring("method Dummy5")] HRESULT Dummy5(
			[in, optional] VARIANT Arg1,
			[in, optional] VARIANT Arg2,
			[in, optional] VARIANT Arg3,
			[in, optional] VARIANT Arg4,
			[in, optional] VARIANT Arg5,
			[in, optional] VARIANT Arg6,
			[in, optional] VARIANT Arg7,
			[in, optional] VARIANT Arg8,
			[in, optional] VARIANT Arg9,
			[in, optional] VARIANT Arg10,
			[in, optional] VARIANT Arg11,
			[in, optional] VARIANT Arg12,
			[in, optional] VARIANT Arg13,
			[out, retval] VARIANT* RHS);
//Dummy6 	 
		[id(dispid_application_dummy6), hidden, helpstring("method Dummy6")] HRESULT Dummy6([out, retval] VARIANT* RHS);
//Dummy7 	 
		[id(dispid_application_dummy7), hidden, helpstring("method Dummy7")] HRESULT Dummy7([out, retval] VARIANT* RHS);
//Dummy8 	 
		[id(dispid_application_dummy8), hidden, helpstring("method Dummy8")] HRESULT Dummy8(
			[in, optional] VARIANT Arg1,
			[out, retval] VARIANT* RHS);
//Dummy9 	 
		[id(dispid_application_dummy9), hidden, helpstring("method Dummy9")] HRESULT Dummy9([out, retval] VARIANT* RHS);
//Dummy10 	 
		[id(dispid_application_dummy10), hidden, helpstring("method Dummy10")]HRESULT Dummy10(
			[in, optional] VARIANT arg,
			[out, retval] VARIANT_BOOL* RHS);
//Dummy11 	 
		[id(dispid_application_dummy11), hidden, helpstring("method Dummy11")] HRESULT Dummy11();
//_Default 	 
		[id(dispid_application__default), propget, helpstring("property _Default")] HRESULT _Default([out, retval] BSTR* RHS);
//DefaultFilePath 	Returns or sets the default path that Microsoft Excel uses when it opens files.
		[id(dispid_application_defaultfilepath), propget, helpstring("property DefaultFilePath")] HRESULT DefaultFilePath(
			[in] long lcid,
			[out, retval] BSTR* RHS);
		[id(dispid_application_defaultfilepath), propput, helpstring("property DefaultFilePath")] HRESULT DefaultFilePath(
			[in] long lcid,
			[in] BSTR RHS);
//DeleteChartAutoFormat 	Removes a custom chart autoformat from the list of available chart autoformats. 
		[id(dispid_application_deletechartautoformat), helpstring("method DeleteChartAutoFormat")] HRESULT DeleteChartAutoFormat(
			[in] BSTR Name,
			[in] long lcid);
//DeleteCustomList 	Deletes a custom list.
		[id(dispid_application_deletecustomlist), helpstring("method DeleteCustomList")] HRESULT DeleteCustomList(
			[in] long ListNum,
			[in] long lcid);
//Dialogs 	Returns a Dialogs collection that represents all built-in dialog boxes.
        [id(dispid_application_dialogs), propget, helpstring("property Dialogs")] HRESULT Dialogs([out, retval] IDispatch ** RHS);
//DisplayAlerts 	True if Microsoft Excel displays certain alerts and messages while a macro is running.
		[propput,id(dispid_application_displayalerts)] HRESULT DisplayAlerts(
			[in] long lcid,
			[in] VARIANT_BOOL vbDisplayAlerts);
		[propget,id(dispid_application_displayalerts)] HRESULT DisplayAlerts(
			[in] long lcid,
			[out, retval] VARIANT_BOOL *vbDisplayAlerts);
//DisplayFormulaBar 	True if the formula bar is displayed.
		[id(dispid_application_displayformulabar), propget, helpstring("property DisplayFormulaBar")] HRESULT DisplayFormulaBar(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_displayformulabar), propput, helpstring("property DisplayFormulaBar")] HRESULT DisplayFormulaBar(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//DisplayFullScreen 	True if Microsoft Excel is in full-screen mode.
		[id(dispid_application_displayfullscreen), propget, helpstring("property DisplayFullScreen")] HRESULT DisplayFullScreen(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_displayfullscreen), propput, helpstring("property DisplayFullScreen")] HRESULT DisplayFullScreen(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//DisplayNoteIndicator 	True if cells containing notes display cell tips and contain note indicators (small dots in their upper-right corners).
		[id(dispid_application_displaynoteindicator), propget, helpstring("property DisplayNoteIndicator")] HRESULT DisplayNoteIndicator([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_displaynoteindicator), propput, helpstring("property DisplayNoteIndicator")] HRESULT DisplayNoteIndicator([in] VARIANT_BOOL RHS);
//DisplayCommentIndicator 	Returns or sets the way cells display comments and indicators. Can be one of the following XlCommentDisplayMode constants: xlNoIndicator, xlCommentIndicatorOnly, or xlCommentAndIndicator.
		[id(dispid_application_displaycommentindicator), propget, helpstring("property DisplayCommentIndicator")] HRESULT DisplayCommentIndicator([out, retval] XlCommentDisplayMode* RHS);
		[id(dispid_application_displaycommentindicator), propput, helpstring("property DisplayCommentIndicator")] HRESULT DisplayCommentIndicator([in] XlCommentDisplayMode RHS);
//DisplayExcel4Menus 	True if Microsoft Excel displays version 4.0 menu bars.
		[id(dispid_application_displayexcel4menus), propget, helpstring("property DisplayExcel4Menus")] HRESULT DisplayExcel4Menus(
			[in] long lcid, 
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_displayexcel4menus), propput, helpstring("property DisplayExcel4Menus")] HRESULT DisplayExcel4Menus(
			[in] long lcid, 
			[in] VARIANT_BOOL RHS);
//DisplayRecentFiles 	True if the list of recently used files is displayed on the File menu.
		[id(dispid_application_displayrecentfiles), propget, helpstring("property DisplayRecentFiles")] HRESULT DisplayRecentFiles([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_displayrecentfiles), propput, helpstring("property DisplayRecentFiles")] HRESULT DisplayRecentFiles([in] VARIANT_BOOL RHS);
//DisplayScrollBars 	True if scroll bars are visible for all workbooks.
		[id(dispid_application_displayscrollbars), propget, helpstring("property DisplayScrollBars")] HRESULT DisplayScrollBars(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_displayscrollbars), propput, helpstring("property DisplayScrollBars")] HRESULT DisplayScrollBars(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//DisplayStatusBar 	True if the status bar is displayed.
		[id(dispid_application_displaystatusbar), propget, helpstring("property DisplayStatusBar")] HRESULT DisplayStatusBar(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_displaystatusbar), propput, helpstring("property DisplayStatusBar")] HRESULT DisplayStatusBar(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//DoubleClick 	Equivalent to double-clicking the active cell. 
		[id(dispid_application_doubleclick), helpstring("method DoubleClick")] HRESULT DoubleClick([in] long lcid);
//EditDirectlyInCell 	True if Microsoft Excel allows editing in cells.
		[id(dispid_application_editdirectlyincell), propget, helpstring("property EditDirectlyInCell")] HRESULT EditDirectlyInCell(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_editdirectlyincell), propput, helpstring("property EditDirectlyInCell")] HRESULT EditDirectlyInCell(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//EnableAutoComplete 	True if the AutoComplete feature is enabled.
		[id(dispid_application_enableautocomplete), propget, helpstring("property EnableAutoComplete")] HRESULT EnableAutoComplete([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_enableautocomplete), propput, helpstring("property EnableAutoComplete")] HRESULT EnableAutoComplete([in] VARIANT_BOOL RHS);
//EnableCancelKey 	Controls how Microsoft Excel handles CTRL+BREAK (or ESC or COMMAND+PERIOD) user interruptions to the running procedure. Read/write XlEnableCancelKey.
		[id(dispid_application_enablecancelkey), propget, helpstring("property EnableCancelKey")] HRESULT EnableCancelKey(
			[in] long lcid,
			[out, retval] XlEnableCancelKey* RHS);
		[id(dispid_application_enablecancelkey), propput, helpstring("property EnableCancelKey")] HRESULT EnableCancelKey(
			[in] long lcid,
			[in] XlEnableCancelKey RHS);
//EnableSound 	True if sound is enabled for Microsoft Office.
		[id(dispid_application_enablesound), propget, helpstring("property EnableSound")] HRESULT EnableSound([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_enablesound), propput, helpstring("property EnableSound")] HRESULT EnableSound([in] VARIANT_BOOL RHS);
//EnableTipWizard
		[id(dispid_application_enabletipwizard), propget, hidden, helpstring("property EnableTipWizard")] HRESULT EnableTipWizard(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_enabletipwizard), propput, hidden, helpstring("property EnableTipWizard")] HRESULT EnableTipWizard(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//FileConverters 	Returns information about installed file converters. Returns Null if there are no converters installed.
		[id(dispid_application_fileconverters), propget, helpstring("property FileConverters")] HRESULT FileConverters(
			[in, optional] VARIANT Index1,
			[in, optional] VARIANT Index2,
			[in] long lcid,
			[out, retval] VARIANT* RHS);
//FileSearch 	Returns a Microsoft.Office.Core.FileSearch object for use with file searches. This property is available only in Microsoft Windows.
		[id(dispid_application_filesearch), propget, helpstring("property FileSearch")] HRESULT FileSearch([out, retval] IDispatch** RHS);
//FileFind 	You have requested Help for a Visual Basic keyword used only on the Macintosh. For information about this keyword, consult the language reference Help included with Microsoft Office Macintosh Edition.
		[id(dispid_application_filefind), propget, helpstring("property FileFind")] HRESULT FileFind([out, retval] IDispatch** RHS);
//_FindFile 	 
        [id(dispid_application__findfile), hidden, helpstring("method _FindFile")]
        HRESULT _FindFile([in] long lcid);
//FixedDecimal 	All data entered after this property is set to True will be formatted with the number of fixed decimal places set by the FixedDecimalPlaces property.
		[id(dispid_application_fixeddecimal), propget, helpstring("property FixedDecimal")] HRESULT FixedDecimal(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_fixeddecimal), propput, helpstring("property FixedDecimal")] HRESULT FixedDecimal(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//FixedDecimalPlaces 	Returns or sets the number of fixed decimal places used when the FixedDecimal property is set to True.
		[id(dispid_application_fixeddecimalplaces), propget, helpstring("property FixedDecimalPlaces")] HRESULT FixedDecimalPlaces(
			[in] long lcid, 
			[out, retval] long* RHS);
		[id(dispid_application_fixeddecimalplaces), propput, helpstring("property FixedDecimalPlaces")] HRESULT FixedDecimalPlaces(
			[in] long lcid, 
			[in] long RHS);
//GetCustomListContents 	Returns a custom list (an array of strings). 
		[id(dispid_application_getcustomlistcontents), helpstring("method GetCustomListContents")] HRESULT GetCustomListContents(
			[in] long ListNum,
			[in] long lcid,
			[out, retval] VARIANT* RHS);
//GetCustomListNum 	Returns the custom list number for an array of strings. You can use this method to match both built-in lists and custom-defined lists. 
		[id(dispid_application_getcustomlistnum), helpstring("method GetCustomListNum")] HRESULT GetCustomListNum(
			[in] VARIANT ListArray,
			[in] long lcid,
			[out, retval] long* RHS);
//GetOpenFilename 	Displays the standard Open dialog box and gets a file name from the user without actually opening any files. 
		[id(dispid_application_getopenfilename), helpstring("method GetOpenFilename")] HRESULT GetOpenFilename(
			[in, optional] VARIANT FileFilter,
			[in, optional] VARIANT FilterIndex,
			[in, optional] VARIANT Title,
			[in, optional] VARIANT ButtonText,
			[in, optional] VARIANT MultiSelect,
			[in] long lcid,
			[out, retval] VARIANT* RHS);
//GetSaveAsFilename 	Displays the standard Save As dialog box and gets a file name from the user without actually saving any files. 
		[id(dispid_application_getsaveasfilename), helpstring("method GetSaveAsFilename")] HRESULT GetSaveAsFilename(
			[in, optional] VARIANT InitialFilename,
			[in, optional] VARIANT FileFilter,
			[in, optional] VARIANT FilterIndex,
			[in, optional] VARIANT Title,
			[in, optional] VARIANT ButtonText,
			[in] long lcid,
			[out, retval] VARIANT* RHS);
//Goto 	Selects any range or Visual Basic procedure in any workbook and activates that workbook if it?s not already active. 
		[id(dispid_application_goto), helpstring("method Goto")] HRESULT Goto(
			[in, optional] VARIANT Reference,
			[in, optional] VARIANT Scroll,
			[in] long lcid);
//Height 	The height, in points, of the main application window. If the window is minimized, this property is read-only and refers to the height of the icon. If the window is maximized, this property cannot be set. Use the WindowState property to determine the window state.
		[id(dispid_application_height), propget, helpstring("property Height")] HRESULT Height(
			[in] long lcid,
			[out, retval] double* RHS);
		[id(dispid_application_height), propput, helpstring("property Height")] HRESULT Height(
			[in] long lcid,
			[in] double RHS);
//Help 	Displays a Help topic. 
		[id(dispid_application_help), helpstring("method Help")] HRESULT Help(
			[in, optional] VARIANT HelpFile, 
			[in, optional] VARIANT HelpContextID, 
			[in] long lcid);
//IgnoreRemoteRequests 	True if remote DDE requests are ignored.
		[id(dispid_application_ignoreremoterequests), propget, helpstring("property IgnoreRemoteRequests")] HRESULT IgnoreRemoteRequests(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_ignoreremoterequests), propput, helpstring("property IgnoreRemoteRequests")] HRESULT IgnoreRemoteRequests(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//InchesToPoints 	Converts a measurement from inches to points. 
		[id(dispid_application_inchestopoints), helpstring("method InchesToPoints")] HRESULT InchesToPoints(
			[in] double Inches,
			[in] long lcid,
			[out, retval] double* RHS);
//InputBox 	Displays a dialog box for user input. Returns the information entered in the dialog box. 
		[id(dispid_application_inputbox), helpstring("method InputBox")] HRESULT InputBox(
			[in] BSTR Prompt,
			[in, optional] VARIANT Title,
			[in, optional] VARIANT Default,
			[in, optional] VARIANT Left,
			[in, optional] VARIANT Top,
			[in, optional] VARIANT HelpFile,
			[in, optional] VARIANT HelpContextID,
			[in, optional] VARIANT Type,
			[in] long lcid,
			[out, retval] VARIANT* RHS);
//Interactive 	True if Microsoft Excel is in interactive mode; this property is usually True. If you set this property to False, Microsoft Excel will block all input from the keyboard and mouse (except input to dialog boxes that are displayed by your code). Blocking user input will prevent the user from interfering with the code as it moves or activates Microsoft Excel objects.
		[id(dispid_application_interactive), propget, helpstring("property Interactive")] HRESULT Interactive(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_interactive), propput, helpstring("property Interactive")] HRESULT Interactive(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//International 	Returns information about the current country/region and international settings.
		[id(dispid_application_international), propget, helpstring("property International")] HRESULT International(
			[in, optional] VARIANT Index,
			[in] long lcid,
			[out, retval] VARIANT* RHS);
//Iteration 	True if Microsoft Excel will use iteration to resolve circular references.
		[id(dispid_application_iteration), propget, helpstring("property Iteration")] HRESULT Iteration(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_iteration), propput, helpstring("property Iteration")] HRESULT Iteration(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//LargeButtons
		[id(dispid_application_largebuttons), propget, hidden, helpstring("property LargeButtons")] HRESULT LargeButtons([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_largebuttons), propput, hidden, helpstring("property LargeButtons")] HRESULT LargeButtons([in] VARIANT_BOOL RHS);
//Left 	The distance, in points, from the left edge of the screen to the left edge of the main Microsoft Excel window.
		[id(dispid_application_left), propget, helpstring("property Left")] HRESULT Left(
			[in] long lcid,
			[out, retval] double* RHS);
		[id(dispid_application_left), propput, helpstring("property Left")] HRESULT Left(
			[in] long lcid,
			[in] double RHS);
//LibraryPath 	Returns the path to the Library folder but without the final separator.
		[id(dispid_application_librarypath), propget, helpstring("property LibraryPath")] HRESULT LibraryPath(
			[in] long lcid,
			[out, retval] BSTR* RHS);
//MacroOptions 	Corresponds to options in the Macro Options dialog box. You can also use this method to display a user defined function (UDF) in a built-in or new category within the Insert Function dialog box. 
		[id(dispid_application_macrooption), helpstring("method MacroOptions")] HRESULT MacroOptions(
			[in, optional] VARIANT Macro,
			[in, optional] VARIANT Description,
			[in, optional] VARIANT HasMenu,
			[in, optional] VARIANT MenuText,
			[in, optional] VARIANT HasShortcutKey,
			[in, optional] VARIANT ShortcutKey,
			[in, optional] VARIANT Category,
			[in, optional] VARIANT StatusBar,
			[in, optional] VARIANT HelpContextID,
			[in, optional] VARIANT HelpFile,
			[in] long lcid);
//MailLogoff 	Closes a MAPI mail session established by Microsoft Excel. 
		[id(dispid_application_maillogoff), helpstring("method MailLogoff")] HRESULT MailLogoff([in] long lcid);
//MailLogon 	Logs in to MAPI Mail or Microsoft Exchange and establishes a mail session. If Microsoft Mail isn't already running, you must use this method to establish a mail session before mail or document routing functions can be used. 
		[id(dispid_application_maillogon), helpstring("method MailLogon")] HRESULT MailLogon(
			[in, optional] VARIANT Name,
			[in, optional] VARIANT Password,
			[in, optional] VARIANT DownloadNewMail,
			[in] long lcid);
//MailSession 	Returns the MAPI mail session number as a hexadecimal string (if there's an active session), or returns Null if there's no session.
		[id(dispid_application_mailsession), propget, helpstring("property MailSession")] HRESULT MailSession(
			[in] long lcid,
			[out, retval] VARIANT* RHS);
//MailSystem 	Returns the mail system that's installed on the host machine. Read-only XlMailSystem.
		[id(dispid_application_mailsystem), propget, helpstring("property MailSystem")] HRESULT MailSystem(
			[in] long lcid,
			[out, retval] XlMailSystem* RHS);
//MathCoprocessorAvailable 	True if a math coprocessor is available.
		[id(dispid_application_mathcoprocessoravailable), propget, helpstring("property MathCoprocessorAvailable")] HRESULT MathCoprocessorAvailable(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
//MaxChange 	Returns or sets the maximum amount of change between each iteration as Microsoft Excel resolves circular references.
		[id(dispid_application_maxchange), propget, helpstring("property MaxChange")] HRESULT MaxChange(
			[in] long lcid,
			[out, retval] double* RHS);
		[id(dispid_application_maxchange), propput, helpstring("property MaxChange")] HRESULT MaxChange(
		[in] long lcid,
		[in] double RHS);
//MaxIterations 	Returns or sets the maximum number of iterations that Microsoft Excel can use to resolve a circular reference.
		[id(dispid_application_maxiterations), propget, helpstring("property MaxIterations")] HRESULT MaxIterations(
			[in] long lcid,
			[out, retval] long* RHS);
		[id(dispid_application_maxiterations), propput, helpstring("property MaxIterations")] HRESULT MaxIterations(
			[in] long lcid,
			[in] long RHS);
//MemoryFree 	Returns the amount of memory that's still available for Microsoft Excel to use, in bytes.
		[id(dispid_application_memoryfree), propget, hidden, helpstring("property MemoryFree")] HRESULT MemoryFree(
			[in] long lcid,
			[out, retval] long* RHS);
//MemoryTotal 	 
		[id(dispid_application_memorytotal), propget, hidden, helpstring("property MemoryTotal")] HRESULT MemoryTotal(
			[in] long lcid,
			[out, retval] long* RHS);
//MemoryUsed 	 
		[id(dispid_application_memoryused), propget, hidden, helpstring("property MemoryUsed")] HRESULT MemoryUsed(
			[in] long lcid,
			[out, retval] long* RHS);
//MouseAvailable 	True if a mouse is available.
		[id(dispid_application_mouseavailable), propget, helpstring("property MouseAvailable")] HRESULT MouseAvailable(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
//MoveAfterReturn 	True if the active cell will be moved as soon as the ENTER (RETURN) key is pressed.
		[id(dispid_application_moveafterreturn), propget, helpstring("property MoveAfterReturn")] HRESULT MoveAfterReturn(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_moveafterreturn), propput, helpstring("property MoveAfterReturn")] HRESULT MoveAfterReturn(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//MoveAfterReturnDirection 	Returns or sets the direction in which the active cell is moved when the user presses ENTER. Read/write XlDirection.
		[id(dispid_application_moveafterreturndirection), propget, helpstring("property MoveAfterReturnDirection")] HRESULT MoveAfterReturnDirection(
			[in] long lcid,
			[out, retval] XlDirection* RHS);
		[id(dispid_application_moveafterreturndirection), propput, helpstring("property MoveAfterReturnDirection")] HRESULT MoveAfterReturnDirection(
			[in] long lcid,
			[in] XlDirection RHS);
//RecentFiles 	Returns a RecentFiles collection that represents the list of recently used files.
		[id(dispid_application_recentfiles), propget, helpstring("property RecentFiles")] HRESULT RecentFiles([out, retval] IDispatch** RHS);
//Name 	Returns the name of the object.
		[id(dispid_application_name), propget, helpstring("property Name")] HRESULT Name([out, retval] BSTR* RHS);
//NextLetter 	You have requested Help for a Visual Basic keyword used only on the Macintosh. For information about this keyword, consult the language reference Help included with Microsoft Office Macintosh Edition. 
		[id(dispid_application_nextletter), helpstring("property NextLetter")] HRESULT NextLetter(
			[in] long lcid,
			[out, retval] IDispatch** RHS);
//NetworkTemplatesPath 	Returns the network path where templates are stored. If the network path doesn?t exist, this property returns an empty string.
		[id(dispid_application_networktemplatespath), propget, helpstring("property NetworkTemplatesPath")]  HRESULT NetworkTemplatesPath(
			[in] long lcid,
			[out, retval] BSTR* RHS);
//ODBCErrors 	Returns an ODBCErrors collection that contains all the ODBC errors generated by the most recent query table or PivotTable report operation.
		[id(dispid_application_odbcerrors), propget, helpstring("property ODBCErrors")] HRESULT ODBCErrors([out, retval] IDispatch** RHS);
//ODBCTimeout 	Returns or sets the ODBC query time limit in seconds. The default value is 45 seconds.
		[id(dispid_application_odbctimeout), propget, helpstring("property ODBCTimeout")] HRESULT ODBCTimeout([out, retval] long* RHS);
		[id(dispid_application_odbctimeout), propput, helpstring("property ODBCTimeout")] HRESULT ODBCTimeout([in] long RHS);
//OnCalculate 	 
		[id(dispid_application_oncalculate), propget, hidden, helpstring("property OnCalculate")] HRESULT OnCalculate(
			[in] long lcid,
			[out, retval] BSTR* RHS);
		[id(dispid_application_oncalculate), propput, hidden, helpstring("property OnCalculate")] HRESULT OnCalculate(
			[in] long lcid,
			[in] BSTR RHS);
//OnData 	 
		[id(dispid_application_ondata), propget, hidden, helpstring("property OnData")] HRESULT OnData(
			[in] long lcid,
			[out, retval] BSTR* RHS);
		[id(dispid_application_ondata), propput, hidden, helpstring("property OnData")] HRESULT OnData(
			[in] long lcid,
			[in] BSTR RHS);
//OnDoubleClick 	 
		[id(dispid_application_ondoubleclick), propget, hidden, helpstring("property OnDoubleClick")] HRESULT OnDoubleClick(
			[in] long lcid,
			[out, retval] BSTR* RHS);
		[id(dispid_application_ondoubleclick), propput, hidden, helpstring("property OnDoubleClick")] HRESULT OnDoubleClick(
			[in] long lcid,
			[in] BSTR RHS);
//OnEntry 	 
		[id(dispid_application_onentry), propget, hidden, helpstring("property OnEntry")] HRESULT OnEntry(
			[in] long lcid,
			[out, retval] BSTR* RHS);
		[id(dispid_application_onentry), propput, hidden, helpstring("property OnEntry")] HRESULT OnEntry(
			[in] long lcid,
			[in] BSTR RHS);
//OnKey 	Runs a specified procedure when a particular key or key combination is pressed. 
		[id(dispid_application_onkey), helpstring("method OnKey")] HRESULT OnKey(
			[in] BSTR Key,
			[in, optional] VARIANT Procedure,
			[in] long lcid);
//OnRepeat 	Sets the Repeat menu item and the name of the procedure that will run if you choose the Repeat command (Edit menu) after running the procedure that sets this property. 
		[id(dispid_application_onrepeat), helpstring("method OnRepeat")] HRESULT OnRepeat(
			[in] BSTR Text,
			[in] BSTR Procedure,
			[in] long lcid);
//OnSheetActivate 	 
		[id(dispid_application_onsheetactivate), propget, hidden, helpstring("property OnSheetActivate")] HRESULT OnSheetActivate(
			[in] long lcid,
			[out, retval] BSTR* RHS);
		[id(dispid_application_onsheetactivate), propput, hidden, helpstring("property OnSheetActivate")] HRESULT OnSheetActivate(
			[in] long lcid,
			[in] BSTR RHS);
//OnSheetDeactivate 	 
		[id(dispid_application_onsheetdeactivate), propget, hidden, helpstring("property OnSheetDeactivate")] HRESULT OnSheetDeactivate(
			[in] long lcid,
			[out, retval] BSTR* RHS);
		[id(dispid_application_onsheetdeactivate), propput, hidden, helpstring("property OnSheetDeactivate")] HRESULT OnSheetDeactivate(
			[in] long lcid,
			[in] BSTR RHS);
//OnTime 	Schedules a procedure to be run at a specified time in the future (either at a specific time of day or after a specific amount of time has passed). 
		[id(dispid_application_ontime), helpstring("method OnTime")] HRESULT OnTime(
			[in] VARIANT EarliestTime,
			[in] BSTR Procedure,
			[in, optional] VARIANT LatestTime,
			[in, optional] VARIANT Schedule,
			[in] long lcid);
//OnUndo 	Sets the text of the Undo and the name of the procedure that?s run if you choose the Undo command (Edit menu) after running the procedure that sets this property. 
		[id(dispid_application_onundo), helpstring("method OnUndo")] HRESULT OnUndo(
			[in] BSTR Text,
			[in] BSTR Procedure,
			[in] long lcid);
//OnWindow 	Returns or sets the name of the procedure that?s run whenever you activate a window.
		[id(dispid_application_onwindow), propget, helpstring("property OnWindow")] HRESULT OnWindow(
			[in] long lcid,
			[out, retval] BSTR* RHS);
		[id(dispid_application_onwindow), propput, helpstring("property OnWindow")] HRESULT OnWindow(
			[in] long lcid,
			[in] BSTR RHS);
//OperatingSystem 	Returns the name and version number of the current operating system, for example, "Windows (32-bit) 4.00" or "Macintosh 7.00".
		[id(dispid_application_operatingsystem), propget, helpstring("property OperatingSystem")] HRESULT OperatingSystem(
			[in] long lcid,
			[out, retval] BSTR* RHS);
//OrganizationName 	Returns the registered organization name.
		[id(dispid_application_organizationname), propget, helpstring("property OrganizationName")] HRESULT OrganizationName(
			[in] long lcid,
			[out, retval] BSTR* RHS);
//Path 	Returns the complete path to the application, excluding the final separator and name of the application.
		[id(dispid_application_path), propget, helpstring("property Path")] HRESULT Path(
			[in] long lcid,
			[out, retval] BSTR* RHS);
//PathSeparator 	Returns the path separator character ("\").
		[id(dispid_application_pathseparator), propget, helpstring("property PathSeparator")] HRESULT PathSeparator(
			[in] long lcid, 
			[out, retval] BSTR* RHS);
//PreviousSelections 	Returns an array of the last four ranges or names selected. Each element in the array is a Range object.
		[id(dispid_application_previousselections), propget, helpstring("property PreviousSelections")] HRESULT PreviousSelections(
			[in, optional] VARIANT Index,
			[in] long lcid,
			[out, retval] VARIANT* RHS);
//PivotTableSelection 	True if PivotTable reports use structured selection.
		[id(dispid_application_pivottableselection), propget, helpstring("property PivotTableSelection")] HRESULT PivotTableSelection([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_pivottableselection), propput, helpstring("property PivotTableSelection")] HRESULT PivotTableSelection([in] VARIANT_BOOL RHS);
//PromptForSummaryInfo 	True if Microsoft Excel asks for summary information when files are first saved.
		[id(dispid_application_promptforsummaryinfo), propget, helpstring("property PromptForSummaryInfo")] HRESULT PromptForSummaryInfo(
			[in] long lcid,
			[out, retval] VARIANT_BOOL *RHS);
		[id(dispid_application_promptforsummaryinfo), propput, helpstring("property PromptForSummaryInfo")] HRESULT PromptForSummaryInfo(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//Quit 	Quits Microsoft Excel.
		[id(dispid_application_quit)] HRESULT Quit();
//RecordMacro 	Records code if the macro recorder is on. 
		[id(dispid_application_recordmacro), helpstring("method RecordMacro")] HRESULT RecordMacro(
			[in, optional] VARIANT BasicCode,
			[in, optional] VARIANT XlmCode,
			[in] long lcid);
//RecordRelative 	True if macros are recorded using relative references; False if recording is absolute.
		[id(dispid_application_recordrelaytive), propget, helpstring("property RecordRelative")] HRESULT RecordRelative(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
//ReferenceStyle 	Returns or sets how Microsoft Excel displays cell references and row and column headings in either A1 or R1C1 reference style. Read/write XlReferenceStyle.
		[id(dispid_application_referencestyle), propget, helpstring("property ReferenceStyle")] HRESULT ReferenceStyle(
			[in] long lcid, 
			[out, retval] XlReferenceStyle* RHS);
		[id(dispid_application_referencestyle), propput, helpstring("property ReferenceStyle")] HRESULT ReferenceStyle(
			[in] long lcid,
			[in] XlReferenceStyle RHS);
//RegisteredFunctions 	Returns information about functions in either dynamic-link libraries (DLLs) or code resources that were registered with the REGISTER or REGISTER.ID macro functions.
		[id(dispid_application_registeredfunction), propget, helpstring("property RegisteredFunctions")] HRESULT RegisteredFunctions(
			[in, optional] VARIANT Index1,
			[in, optional] VARIANT Index2,
			[in] long lcid,
			[out, retval] VARIANT* RHS);
//RegisterXLL 	Loads an XLL code resource and automatically registers the functions and commands contained in the resource. 
		[id(dispid_application_registerxll), helpstring("method RegisterXLL")] HRESULT RegisterXLL(
			[in] BSTR Filename,
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
//Repeat 	Repeats the last user interface action. 
		[id(dispid_application_repeat), helpstring("method Repeat")] HRESULT Repeat([in] long lcid);
//ResetTipWizard 	
		[id(dispid_application_resettipwizard), hidden, helpstring("method ResetTipWizard")] HRESULT ResetTipWizard([in] long lcid);
//RollZoom 	True if the IntelliMouse zooms instead of scrolling.
		[id(dispid_application_rollzoom), propget, helpstring("property RollZoom")] HRESULT RollZoom([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_rollzoom), propput, helpstring("property RollZoom")] HRESULT RollZoom([in] VARIANT_BOOL RHS);
//Save
		[id(dispid_application_save), hidden, helpstring("method Save")] HRESULT Save(
			[in, optional] VARIANT Filename,
			[in] long lcid);
//SaveWorkspace 	Saves the current workspace.
		[id(dispid_application_saveworkspace), helpstring("method SaveWorkspace")] HRESULT SaveWorkspace(
			[in, optional] VARIANT Filename,
			[in] long lcid);
//ScreenUpdating 	True if screen updating is turned on.
		[id(dispid_application_screenupdating), propget, helpstring("property ScreenUpdating")] HRESULT ScreenUpdating(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_screenupdating), propput, helpstring("property ScreenUpdating")] HRESULT ScreenUpdating(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//SetDefaultChart 	Specifies the name of the chart template that Microsoft Excel will use when creating new charts. 
		[id(dispid_application_setdefaultchart), helpstring("method SetDefaultChart")] HRESULT SetDefaultChart(
			[in, optional] VARIANT FormatName,
			[in, optional] VARIANT Gallery);
//SheetsInNewWorkbook 	Returns or sets the number of sheets that Microsoft Excel automatically inserts into new workbooks.	 
		[id(dispid_application_sheetsinnewworkbook), propget, helpstring("property SheetsInNewWorkbook")] HRESULT SheetsInNewWorkbook(
			[in] long lcid,
			[out, retval] long* RHS);
		[id(dispid_application_sheetsinnewworkbook), propput, helpstring("property SheetsInNewWorkbook")] HRESULT SheetsInNewWorkbook(
			[in] long lcid,
			[in] long RHS);
//ShowChartTipNames 	True if charts show chart tip names. The default value is True.
		[id(dispid_application_showcharttipnames), propget, helpstring("property ShowChartTipNames")] HRESULT ShowChartTipNames([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_showcharttipnames), propput, helpstring("property ShowChartTipNames")] HRESULT ShowChartTipNames([in] VARIANT_BOOL RHS);
//ShowChartTipValues 	True if charts show chart tip values. The default value is True.
		[id(dispid_application_showcharttipvalues), propget, helpstring("property ShowChartTipValues")] HRESULT ShowChartTipValues([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_showcharttipvalues), propput, helpstring("property ShowChartTipValues")] HRESULT ShowChartTipValues([in] VARIANT_BOOL RHS);
//StandardFont 	Returns or sets the name of the standard font.
		[id(dispid_application_standartfont), propget, helpstring("property StandardFont")] HRESULT StandardFont(
			[in] long lcid,
			[out, retval] BSTR* RHS);
		[id(dispid_application_standartfont), propput, helpstring("property StandardFont")] HRESULT StandardFont(
			[in] long lcid,
			[in] BSTR RHS);
//StandardFontSize 	Returns or sets the standard font size, in points.
		[id(dispid_application_standartfontsize), propget, helpstring("property StandardFontSize")] HRESULT StandardFontSize(
			[in] long lcid,
			[out, retval] double* RHS);
		[id(dispid_application_standartfontsize), propput, helpstring("property StandardFontSize")] HRESULT StandardFontSize(
			[in] long lcid,
			[in] double RHS);
//StartupPath 	Returns the complete path of the startup folder excluding the final separator.
		[id(dispid_application_startuppath), propget, helpstring("property StartupPath")] HRESULT StartupPath(
			[in] long lcid,
			[out, retval] BSTR* RHS);
//StatusBar 	Returns or sets the text in the status bar.
		[id(dispid_application_statusbar), propget, helpstring("property StatusBar")] HRESULT StatusBar(
			[in] long lcid,
			[out, retval] VARIANT* RHS);
		[id(dispid_application_statusbar), propput, helpstring("property StatusBar")] HRESULT StatusBar(
			[in] long lcid,
			[in] VARIANT RHS);
//TemplatesPath 	Returns the local path where templates are stored.
		[id(dispid_application_templatespath), propget, helpstring("property TemplatesPath")] HRESULT TemplatesPath(
			[in] long lcid,
			[out, retval] BSTR* RHS);
//ShowToolTips 	True if ToolTips are turned on.
		[id(dispid_application_showtooltips), propget, helpstring("property ShowToolTips")] HRESULT ShowToolTips([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_showtooltips), propput, helpstring("property ShowToolTips")] HRESULT ShowToolTips([in] VARIANT_BOOL RHS);
//Top 	The distance, in points, from the top edge of the screen to the top edge of the main Microsoft Excel window. If the application window is minimized, this property controls the position of the window icon (anywhere on the screen).
		[id(dispid_application_top), propget, helpstring("property Top")] HRESULT Top(
			[in] long lcid,
			[out, retval] double* RHS);
		[id(dispid_application_top), propput, helpstring("property Top")] HRESULT Top(
			[in] long lcid,
			[in] double RHS);
//DefaultSaveFormat 	Returns or sets the default format for saving files.
        [id(dispid_application_defaultsaveformat), propget, helpstring("property DefaultSaveFormat")]
        HRESULT DefaultSaveFormat([out, retval] XlFileFormat* RHS);
        [id(dispid_application_defaultsaveformat), propput, helpstring("property DefaultSaveFormat")]
        HRESULT DefaultSaveFormat([in] XlFileFormat RHS);
//TransitionMenuKey 	Returns or sets the Microsoft Excel menu or help key, which is usually "/".
		[id(dispid_application_transitionmenukey), propget, helpstring("property TransitionMenuKey")] HRESULT TransitionMenuKey(
			[in] long lcid,
			[out, retval] BSTR* RHS);
		[id(dispid_application_transitionmenukey), propput, helpstring("property TransitionMenuKey")] HRESULT TransitionMenuKey(
			[in] long lcid,
			[in] BSTR RHS);
//TransitionMenuKeyAction 	Returns or sets the action taken when the Microsoft Excel menu key is pressed. Can be either xlExcelMenus or xlLotusHelp.
		[id(dispid_application_transitionmenukeyaction), propget, helpstring("property TransitionMenuKeyAction")] HRESULT TransitionMenuKeyAction(
			[in] long lcid,
			[out, retval] long* RHS);
		[id(dispid_application_transitionmenukeyaction), propput, helpstring("property TransitionMenuKeyAction")] HRESULT TransitionMenuKeyAction(
			[in] long lcid,
			[in] long RHS);
//TransitionNavigKeys 	True if transition navigation keys are active.
		[id(dispid_application_transitionnavigkeys), propget, helpstring("property TransitionNavigKeys")] HRESULT TransitionNavigKeys(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_transitionnavigkeys), propput, helpstring("property TransitionNavigKeys")] HRESULT TransitionNavigKeys(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//Undo 	Cancels the last user interface action. 
        [id(dispid_application_undo), helpstring("method Undo")]
        HRESULT Undo([in] long lcid);
//UsableHeight 	Returns the maximum height of the space that a window can occupy in the application window area, in points.
		[id(dispid_application_usableheight), propget, helpstring("property UsableHeight")] HRESULT UsableHeight(
			[in] long lcid,
			[out, retval] double* RHS);
//UsableWidth 	Returns the maximum width of the space that a window can occupy in the application window area in points.
		[id(dispid_application_usablewidth), propget, helpstring("property UsableWidth")] HRESULT UsableWidth(
			[in] long lcid,
			[out, retval] double* RHS);
//UserControl 	True if the application is visible or if it was created or started by the user. False if you created or started the application programmatically by using the CreateObject or GetObject functions and the application is hidden.
		[propput,id(dispid_application_usercontrol)] HRESULT UserControl([in] VARIANT_BOOL vbUserControl);
		[propget,id(dispid_application_usercontrol)] HRESULT UserControl([out, retval] VARIANT_BOOL *vbUserControl);
//UserName 	Returns or sets the name of the current user.
		[id(dispid_application_username), propget, helpstring("property UserName")] HRESULT UserName(
			[in] long lcid,
			[out, retval] BSTR* RHS);
		[id(dispid_application_username), propput, helpstring("property UserName")] HRESULT UserName(
			[in] long lcid,
			[in] BSTR RHS);
//Value 	Returns "Microsoft Excel".
		[id(0x00000006), propget, helpstring("property Value")] HRESULT Value([out, retval] BSTR* RHS);
//VBE 	Returns a VBE object that represents the Visual Basic Editor.
		[id(0x000004bb), propget, helpstring("property VBE")] HRESULT VBE([out, retval] IDispatch** RHS);
//Version 	Returns the Microsoft Excel version number.
		[propget,id(dispid_application_version)] HRESULT Version([in] long Lcid, [out, retval] BSTR *pVersion);
//Visible 	Determines whether the object is visible.
		[propput,id(dispid_application_visible)] HRESULT Visible(
			[in] long Lcid,
			[in] VARIANT_BOOL vbVisible);
		[propget,id(dispid_application_visible)] HRESULT Visible(
			[in] long Lcid,
			[out, retval] VARIANT_BOOL *vbVisible);
//Volatile 	Marks a user-defined function as volatile. A volatile function must be recalculated whenever calculation occurs in any cells on the worksheet. A nonvolatile function is recalculated only when the input variables change. This method has no effect if it's not inside a user-defined function used to calculate a worksheet cell. 
		[id(dispid_application_volatile), helpstring("method Volatile")] HRESULT Volatile(
			[in, optional] VARIANT Volatile,
			[in] long lcid);
//_Wait 	 
		[id(dispid_application__wait), hidden, helpstring("method _Wait")] HRESULT _Wait(
			[in] VARIANT Time,
			[in] long lcid);
//Width 	The distance, in points, from the left edge of the application window to its right edge. If the window is minimized, this property is read-only and returns the width of the window icon.
		[id(dispid_application_width), propget, helpstring("property Width")] HRESULT Width(
			[in] long lcid,
			[out, retval] double* RHS);
		[id(dispid_application_width), propput, helpstring("property Width")] HRESULT Width(
			[in] long lcid,
			[in] double RHS);
//WindowsForPens 	True if the computer is running under Microsoft Windows for Pen Computing.
        [id(dispid_application_windowsforpens), propget, helpstring("property WindowsForPens")]
        HRESULT WindowsForPens(
            [in] long lcid,
            [out, retval] VARIANT_BOOL* RHS);
//WindowState 	Returns or sets the state of the window. Read/write XlWindowState.
		[propput,id(dispid_application_windowstate)] HRESULT WindowState(
			[in] long lcid,
			[in] XlWindowState State);
		[propget,id(dispid_application_windowstate)] HRESULT WindowState(
			[in] long lcid,
			[out, retval] XlWindowState *State);
//UILanguage 	 
		[id(dispid_application_uilanguage), propget, hidden, helpstring("property UILanguage")] HRESULT UILanguage(
			[in] long lcid,
			[out, retval] long* RHS);
		[id(dispid_application_uilanguage), propput, hidden, helpstring("property UILanguage")] HRESULT UILanguage(
			[in] long lcid,
			[in] long RHS);
//DefaultSheetDirection 	Returns or sets the default direction in which Microsoft Excel displays new windows and worksheets. Can be one of the following constants: xlRTL (right to left) or xlLTR (left to right).
		[id(dispid_application_defaultsheetdirection), propget, helpstring("property DefaultSheetDirection")] HRESULT DefaultSheetDirection(
			[in] long lcid,
			[out, retval] long* RHS);
		[id(dispid_application_defaultsheetdirection), propput, helpstring("property DefaultSheetDirection")] HRESULT DefaultSheetDirection(
			[in] long lcid,
			[in] long RHS);
//CursorMovement 	Returns or sets a value that indicates whether a visual cursor or a logical cursor is used. Can be one of the following constants: xlVisualCursor or xlLogicalCursor.
		[id(dispid_application_cursormovement), propget, helpstring("property CursorMovement")] HRESULT CursorMovement(
			[in] long lcid,
			[out, retval] long* RHS);
		[id(dispid_application_cursormovement), propput, helpstring("property CursorMovement")] HRESULT CursorMovement(
			[in] long lcid,
			[in] long RHS);
//ControlCharacters 	True if Microsoft Excel displays control characters for right-to-left languages.
		[id(dispid_application_controlcharacters), propget, helpstring("property ControlCharacters")] HRESULT ControlCharacters(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_controlcharacters), propput, helpstring("property ControlCharacters")] HRESULT ControlCharacters(
			[in] long lcid,
			[in] VARIANT_BOOL RHS);
//_WSFunction 	 
		[id(dispid_application__wsfunction), hidden, helpstring("method _WSFunction")] HRESULT _WSFunction(
			[in, optional] VARIANT Arg1,
			[in, optional] VARIANT Arg2,
			[in, optional] VARIANT Arg3,
			[in, optional] VARIANT Arg4,
			[in, optional] VARIANT Arg5,
			[in, optional] VARIANT Arg6,
			[in, optional] VARIANT Arg7,
			[in, optional] VARIANT Arg8,
			[in, optional] VARIANT Arg9,
			[in, optional] VARIANT Arg10,
			[in, optional] VARIANT Arg11,
			[in, optional] VARIANT Arg12,
			[in, optional] VARIANT Arg13,
			[in, optional] VARIANT Arg14,
			[in, optional] VARIANT Arg15,
			[in, optional] VARIANT Arg16,
			[in, optional] VARIANT Arg17,
			[in, optional] VARIANT Arg18,
			[in, optional] VARIANT Arg19,
			[in, optional] VARIANT Arg20,
			[in, optional] VARIANT Arg21,
			[in, optional] VARIANT Arg22,
			[in, optional] VARIANT Arg23,
			[in, optional] VARIANT Arg24,
			[in, optional] VARIANT Arg25,
			[in, optional] VARIANT Arg26,
			[in, optional] VARIANT Arg27,
			[in, optional] VARIANT Arg28,
			[in, optional] VARIANT Arg29,
			[in, optional] VARIANT Arg30,
			[in] long lcid,
			[out, retval] VARIANT* RHS);
//EnableEvents 	True if events are enabled for the specified object.
		[propget,id(dispid_application_enableevents), helpstring("property EnableEvents")] HRESULT EnableEvents([out, retval] VARIANT_BOOL *pvbee);
		[propput,id(dispid_application_enableevents), helpstring("property EnableEvents")] HRESULT EnableEvents([in] VARIANT_BOOL vbee);
//DisplayInfoWindow 	 
		[id(dispid_application_displayinfowindow), propget, hidden, helpstring("property DisplayInfoWindow")] HRESULT DisplayInfoWindow([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_displayinfowindow), propput, hidden, helpstring("property DisplayInfoWindow")] HRESULT DisplayInfoWindow([in] VARIANT_BOOL RHS);
//Wait 	Pauses a running macro until a specified time. Returns True if the specified time has arrived.
		[id(dispid_application_wait), helpstring("method Wait")] HRESULT Wait(
			[in] VARIANT Time,
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
//ExtendList 	True if Microsoft Excel automatically extends formatting and formulas to new data that is added to a list.
		[id(dispid_application_extendlist), propget, helpstring("property ExtendList")] HRESULT ExtendList([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_extendlist), propput, helpstring("property ExtendList")] HRESULT ExtendList([in] VARIANT_BOOL RHS);
//OLEDBErrors 	Returns the OLEDBErrors collection, which represents the error information returned by the most recent OLE DB query.
		[id(dispid_application_oledberror), propget, helpstring("property OLEDBErrors")] HRESULT OLEDBErrors([out, retval] IDispatch** RHS);
//GetPhonetic 	Returns the Japanese phonetic text of the specified text string. This method is available to you only if you have selected or installed Japanese language support for Microsoft Office. 
		[id(dispid_application_get_phonetic), helpstring("method GetPhonetic")] HRESULT GetPhonetic(
		[in, optional] VARIANT Text,
		[out, retval] BSTR* RHS);
//COMAddIns 	Returns the Microsoft.Office.Core.COMAddIns collection for Microsoft Excel, which represents the currently installed COM add-ins.
		[id(dispid_application_comaddins), propget, helpstring("property COMAddIns")] HRESULT COMAddIns([out, retval] IDispatch** RHS);
//DefaultWebOptions 	Returns the DefaultWebOptions object that contains global application-level attributes used by Microsoft Excel whenever you save a document as a Web page or open a Web page.
		[id(dispid_application_defaultweboptions), propget, helpstring("property DefaultWebOptions")] HRESULT DefaultWebOptions([out, retval] IDispatch** RHS);
//ProductCode 	Returns the globally unique identifier (GUID) for Microsoft Excel.
		[id(dispid_application_productcode), propget, helpstring("property ProductCode")] HRESULT ProductCode([out, retval] BSTR* RHS);
//UserLibraryPath 	Returns the path to the location on the user?s computer where the COM add-ins are installed.
		[id(dispid_application_uselibrarypath), propget, helpstring("property UseLibraryPath")] HRESULT UserLibraryPath([out, retval] BSTR* RHS);
//AutoPercentEntry 	True if entries in cells formatted as percentages aren?t automatically multiplied by 100 as soon as they are entered.
		[id(dispid_application_autopersententry), propget, helpstring("property AutoPercentEntry")] HRESULT AutoPercentEntry([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_autopersententry), propput, helpstring("property AutoPercentEntry")] HRESULT AutoPercentEntry([in] VARIANT_BOOL RHS);
//LanguageSettings 	Returns the Microsoft.Office.Core.LanguageSettings object, which contains information about the language settings in Microsoft Excel.
		[id(dispid_application_languagesettings), propget, helpstring("property LanguageSettings")] HRESULT LanguageSettings([out, retval] IDispatch** RHS);
//Dummy101 	
		[id(dispid_application_dummy101), propget, hidden, helpstring("property Dummy101")] HRESULT Dummy101([out, retval] IDispatch** RHS);
//Dummy12 	 
		[id(dispid_application_dummy12), hidden, helpstring("method Dummy12")] HRESULT Dummy12(
			[in] IDispatch* p1,
			[in] IDispatch* p2);
//AnswerWizard 	Returns the Microsoft.Office.Core.AnswerWizard object for Microsoft Excel.
		[id(dispid_application_answerwizard), propget, helpstring("property AnswerWizard")] HRESULT AnswerWizard([out, retval] IDispatch** RHS);
//CalculateFull 	Forces a full calculation of the data in all open workbooks. 
		[id(dispid_application_calculatefull), helpstring("method CalculateFull")] HRESULT CalculateFull();
//FindFile 	Displays the Open dialog box. 
		[id(dispid_application_findfile), helpstring("method FindFile")] HRESULT FindFile(
			[in] long lcid,
			[out, retval] VARIANT_BOOL* RHS);
//CalculationVersion 	Returns a number whose rightmost four digits are the minor calculation engine version number, and whose other digits (on the left) are the major version of Microsoft Excel.
		[id(dispid_application_calculationversion), propget, helpstring("property CalculationVersion")] HRESULT CalculationVersion([out, retval] long* RHS);
//ShowWindowsInTaskbar 	True if there?s a separate Windows taskbar button for each open workbook. The default value is True.
		[id(dispid_application_showwindowsintaskbar), propget, helpstring("property ShowWindowsInTaskbar")] HRESULT ShowWindowsInTaskbar([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_showwindowsintaskbar), propput, helpstring("property ShowWindowsInTaskbar")] HRESULT ShowWindowsInTaskbar([in] VARIANT_BOOL RHS);
//FeatureInstall 	Returns or sets a value (constant) that specifies how Microsoft Excel handles calls to methods and properties that require features that aren?t yet installed. Read/write Microsoft.Office.Core.MsoFeatureInstall.
		[id(dispid_application_featureinstall), propget, helpstring("property FeatureInstall")] HRESULT FeatureInstall([out, retval] MsoFeatureInstall* RHS);
		[id(dispid_application_featureinstall), propput, helpstring("property FeatureInstall")] HRESULT FeatureInstall([in] MsoFeatureInstall RHS);
//Ready 	Returns True when the Microsoft Excel application is ready; False when the Excel application is not ready.
		[id(dispid_application_ready), propget, helpstring("property Ready")] HRESULT Ready([out, retval] VARIANT_BOOL* RHS);
//Dummy13 	
		[id(dispid_application_dummy13), hidden, helpstring("method Dummy13")] HRESULT Dummy13(
			[in] VARIANT Arg1, 
			[in, optional] VARIANT Arg2,
			[in, optional] VARIANT Arg3,
			[in, optional] VARIANT Arg4,
			[in, optional] VARIANT Arg5,
			[in, optional] VARIANT Arg6,
			[in, optional] VARIANT Arg7,
			[in, optional] VARIANT Arg8,
			[in, optional] VARIANT Arg9,
			[in, optional] VARIANT Arg10,
			[in, optional] VARIANT Arg11,
			[in, optional] VARIANT Arg12,
			[in, optional] VARIANT Arg13,
			[in, optional] VARIANT Arg14,
			[in, optional] VARIANT Arg15,
			[in, optional] VARIANT Arg16,
			[in, optional] VARIANT Arg17,
			[in, optional] VARIANT Arg18,
			[in, optional] VARIANT Arg19,
			[in, optional] VARIANT Arg20,
			[in, optional] VARIANT Arg21,
			[in, optional] VARIANT Arg22,
			[in, optional] VARIANT Arg23,
			[in, optional] VARIANT Arg24,
			[in, optional] VARIANT Arg25,
			[in, optional] VARIANT Arg26,
			[in, optional] VARIANT Arg27,
			[in, optional] VARIANT Arg28,
			[in, optional] VARIANT Arg29,
			[in, optional] VARIANT Arg30,
			[out, retval] VARIANT* RHS);
//FindFormat 	Sets or returns the search criteria for the type of cell formats to find.
		[id(dispid_application_findformat), propget, helpstring("property FindFormat")] HRESULT FindFormat([out, retval] IDispatch** RHS);
		[id(dispid_application_findformat), propputref, helpstring("property FindFormat")] HRESULT FindFormat([in] IDispatch* RHS);
//ReplaceFormat 	Sets the replacement criteria to use in replacing cell formats. The replacement criteria is then used in a subsequent call to the Replace method of the Range object.
		[id(dispid_application_replaceformat), propget, helpstring("property ReplaceFormat")] HRESULT ReplaceFormat([out, retval] IDispatch** RHS);
		[id(dispid_application_replaceformat), propputref, helpstring("property ReplaceFormat")] HRESULT ReplaceFormat([in] IDispatch* RHS);
//UsedObjects 	Returns a UsedObjects object representing objects allocated in a workbook.
		[id(dispid_application_usedobject), propget, helpstring("property UsedObjects")] HRESULT UsedObjects([out, retval] IDispatch** RHS);
//CalculationState 	Returns an XlCalculationState constant that indicates the calculation state of the application for any calculations that are being performed in Microsoft Excel.
		[id(dispid_application_calculationstate), propget, helpstring("property CalculationState")] HRESULT CalculationState([out, retval] XlCalculationState* RHS);
//CalculationInterruptKey 	Sets or returns an XlCalculationInterruptKey constant that specifies the key that can interrupt Microsoft Excel when performing calculations.
		[id(dispid_application_calculationinterruptkey), propget, helpstring("property CalculationInterruptKey")] HRESULT CalculationInterruptKey([out, retval] XlCalculationInterruptKey* RHS);
		[id(dispid_application_calculationinterruptkey), propput, helpstring("property CalculationInterruptKey")] HRESULT CalculationInterruptKey([in] XlCalculationInterruptKey RHS);
//Watches 	Returns a Watches object representing a range which is tracked when the worksheet is recalculated.
		[id(dispid_application_watches), propget, helpstring("property Watches")] HRESULT Watches([out, retval] IDispatch** RHS);
//DisplayFunctionToolTips 	True if function ToolTips can be displayed.
		[id(dispid_application_displayfunctiontooltips), propget, helpstring("property DisplayFunctionToolTips")] HRESULT DisplayFunctionToolTips([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_displayfunctiontooltips), propput, helpstring("property DisplayFunctionToolTips")] HRESULT DisplayFunctionToolTips([in] VARIANT_BOOL RHS);
//AutomationSecurity 	Returns or sets an Microsoft.Office.Core.MsoAutomationSecurity constant that represents the security mode Microsoft Excel uses when programmatically opening files.
		[id(dispid_application_automationsecurity), propget, helpstring("property AutomationSecurity")] HRESULT AutomationSecurity([out, retval] MsoAutomationSecurity* RHS);
		[id(dispid_application_automationsecurity), propput, helpstring("property AutomationSecurity")] HRESULT AutomationSecurity([in] MsoAutomationSecurity RHS);
//FileDialog 	Returns a Microsoft.Office.Core.FileDialog object representing an instance of the file dialog.
		[id(dispid_application_filedialog), propget, helpstring("property FileDialog")] HRESULT FileDialog(
			[in] MsoFileDialogType fileDialogType,
			[out, retval] IDispatch** RHS);
//Dummy14 	
		[id(dispid_application_dummy14), hidden, helpstring("method Dummy14")] HRESULT Dummy14();
//CalculateFullRebuild 	For all open workbooks, forces a full calculation of the data and rebuilds the dependencies. 
		[id(dispid_application_calculatefullrebuild), helpstring("method CalculateFullRebuild")] HRESULT CalculateFullRebuild();
//DisplayPasteOptions 	True if the Paste Options button can be displayed.
		[id(dispid_application_displaypasteoption), propget, helpstring("property DisplayPasteOptions")] HRESULT DisplayPasteOptions([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_displaypasteoption), propput, helpstring("property DisplayPasteOptions")] HRESULT DisplayPasteOptions([in] VARIANT_BOOL RHS);
//DisplayInsertOptions 	True if the Insert Options button should be displayed.
		[id(dispid_application_displayinsertoption), propget, helpstring("property DisplayInsertOptions")] HRESULT DisplayInsertOptions([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_displayinsertoption), propput, helpstring("property DisplayInsertOptions")] HRESULT DisplayInsertOptions([in] VARIANT_BOOL RHS);
//GenerateGetPivotData 	Returns True when Microsoft Excel can get PivotTable report data.
		[id(dispid_application_generategetpivotdata), propget, helpstring("property GenerateGetPivotData")] HRESULT GenerateGetPivotData([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_generategetpivotdata), propput, helpstring("property GenerateGetPivotData")] HRESULT GenerateGetPivotData([in] VARIANT_BOOL RHS);
//AutoRecover 	Returns an AutoRecover object, which backs up all file formats on a timed interval.
		[id(dispid_application_autorecover), propget, helpstring("property AutoRecover")] HRESULT AutoRecover([out, retval] IDispatch** RHS);
//Hwnd 	Returns an Integer indicating the top-level window handle of the Microsoft Excel window.
		[id(dispid_application_hwnd), propget, helpstring("property hwnd")] HRESULT Hwnd([out, retval] long* RHS);
//Hinstance 	Returns the instance handle of the instance that is calling Microsoft Excel.
		[id(dispid_application_hinstance), propget, helpstring("property HInstantce")] HRESULT Hinstance([out, retval] long* RHS);
//CheckAbort 	Stops recalculation in a Microsoft Excel application. 
		[id(dispid_application_checkabort), helpstring("method CheckAbort")] HRESULT CheckAbort([in, optional] VARIANT KeepAbort);
//ErrorCheckingOptions 	Returns an ErrorCheckingOptions object, which represents the error checking options for an application.
		[id(dispid_application_errorcheckingoptions), propget, helpstring("property ErrorCheckingOptions")] HRESULT ErrorCheckingOptions([out, retval] IDispatch** RHS);
//AutoFormatAsYouTypeReplaceHyperlinks 	True (default) if Microsoft Excel automatically formats hyperlinks as you type. False if Excel does not automatically format hyperlinks as you type.
		[id(dispid_application_autoformatasyoutypereplacehyperlinks), propget, helpstring("property AutoFormatAsYouTypeReplaceHyperlinks")] HRESULT AutoFormatAsYouTypeReplaceHyperlinks([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_autoformatasyoutypereplacehyperlinks), propput, helpstring("property AutoFormatAsYouTypeReplaceHyperlinks")] HRESULT AutoFormatAsYouTypeReplaceHyperlinks([in] VARIANT_BOOL RHS);
//SmartTagRecognizers 	Returns a SmartTagRecognizers collection for an application.
		[id(dispid_application_smarttagrecognizers), propget, helpstring("property SmartTagRecognizers")] HRESULT SmartTagRecognizers([out, retval] IDispatch** RHS);
//NewWorkbook 	Returns a NewFile object.
		[id(dispid_application_newworkbook), propget, helpstring("property")] HRESULT NewWorkbook([out, retval] IDispatch** RHS);
//SpellingOptions 	Returns a SpellingOptions object that represents the spelling options of the application.
		[id(dispid_application_spellingoptions), propget, helpstring("property SpellingOptions")] HRESULT SpellingOptions([out, retval] IDispatch** RHS);
//Speech 	Returns a Speech object.
		[id(dispid_application_speech), propget, helpstring("property Speech")] HRESULT Speech([out, retval] IDispatch** RHS);
//MapPaperSize 	True if documents formatted for the standard paper size of another country/region (for example, A4) are automatically adjusted so that they're printed correctly on the standard paper size (for example, Letter) of your country/region.
		[id(dispid_application_mappapersize), propget, helpstring("property MapPaperSize")] HRESULT MapPaperSize([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_mappapersize), propput, helpstring("property MapPaperSize")] HRESULT MapPaperSize([in] VARIANT_BOOL RHS);
//ShowStartupDialog 	Returns True (default) when the New Workbook task pane appears for a Microsoft Excel application.
		[id(dispid_application_showstartupdialog), propget, helpstring("property ShowStartupDialog")] HRESULT ShowStartupDialog([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_showstartupdialog), propput, helpstring("property ShowStartupDialog")] HRESULT ShowStartupDialog([in] VARIANT_BOOL RHS);
//DecimalSeparator 	Sets or returns the character used for the decimal separator as a String.
		[id(dispid_application_decimalseparator), propget, helpstring("property DecimalSeparator")] HRESULT DecimalSeparator([out, retval] BSTR* RHS);
		[id(dispid_application_decimalseparator), propput, helpstring("property DecimalSeparator")] HRESULT DecimalSeparator([in] BSTR RHS);
//ThousandsSeparator 	Sets or returns the character used for the thousands separator as a String.
		[id(dispid_application_thousandsseparator), propget, helpstring("property ThousandsSeparator")] HRESULT ThousandsSeparator([out, retval] BSTR* RHS);
		[id(dispid_application_thousandsseparator), propput, helpstring("property ThousandsSeparator")] HRESULT ThousandsSeparator([in] BSTR RHS);
//UseSystemSeparators 	True (default) if the system separators of Microsoft Excel are enabled.
		[id(dispid_application_usesystemseparator), propget, helpstring("property UseSystemSeparators")] HRESULT UseSystemSeparators([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_usesystemseparator), propput, helpstring("property UseSystemSeparators")] HRESULT UseSystemSeparators([in] VARIANT_BOOL RHS);
//ThisCell 	Returns the cell the user-defined function is being called from as a Range object.
		[id(dispid_application_thiscell), propget, helpstring("property ThisCell")]  HRESULT ThisCell([out, retval] /*IRange*/IDispatch** RHS);
//RTD 	Returns an RTD object.
		[id(dispid_application_rtd), propget, helpstring("property RTD")] HRESULT RTD([out, retval] IDispatch** RHS);
//DisplayDocumentActionTaskPane 	Set to True to display the Document Actions task pane; set to False to hide the Document Actions task pane.
		[id(dispid_application_displaydocumentactiontaskpan), propget, helpstring("property DisplayDocumentActionTaskPane")] HRESULT DisplayDocumentActionTaskPane([out, retval] VARIANT_BOOL* RHS);
		[id(dispid_application_displaydocumentactiontaskpan), propput, helpstring("property DisplayDocumentActionTaskPane")] HRESULT DisplayDocumentActionTaskPane([in] VARIANT_BOOL RHS);
//DisplayXMLSourcePane 	Opens the XML Source task pane and displays the XML map specified by the XmlMap argument. 
		[id(dispid_application_displayxmlsourcepane), helpstring("method DisplayXMLSourcePane")] HRESULT DisplayXMLSourcePane([in, optional] VARIANT XmlMap);
//ArbitraryXMLSupportAv//DisplayInsertOptions 	True if the Insert Options button should be displayed.ailable 	Returns a Boolean value that indicates whether the XML features in Microsoft Excel are available.
        [id(dispid_application_arbitraryxmlsupportavailable), propget,helpstring("property ArbitraryXMLSupportAvailable")]
        HRESULT ArbitraryXMLSupportAvailable([out, retval] VARIANT_BOOL* RHS);
//Support 	
        [id(dispid_application_support), hidden, helpstring("method hidden")]
        HRESULT Support(
            [in] IDispatch* Object,
            [in] long ID,
            [in, optional] VARIANT arg,
            [out, retval] VARIANT* RHS);
	};

[
	uuid(4CB175C6-200B-407f-9456-1FF61F03252C),
	version(1.0),
	helpstring("mso_to_oo 1.0 Type Library")
]
library MSO_TO_OOLib
{
	importlib("stdole2.tlb");
	
	[
		uuid(00024500-0000-0000-C000-000000000046),
		helpstring("_Application Class for Excel")
	]
	coclass _ApplicationExcel
	{
		[default] interface I_ApplicationExcel;
	};
};
