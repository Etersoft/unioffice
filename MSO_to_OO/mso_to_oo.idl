/*
 * IDL source for mso_to_oo.dll
 *
 * Copyright (C) 2008 Sinitsin Ivan (Etersoft) <ivan@etersoft.ru>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
 */

import "oaidl.idl";
import "ocidl.idl";
import "wtypes.idl";
	

	typedef enum
	{
		xlMaximized = 0xffffefd7,
		xlMinimized = 0xffffefd4,
		xlNormal    = 0xffffefd1
	} XlWindowState;

	typedef enum
	{
		xlRangeValueDefault        = 10,
		xlRangeValueXMLSpreadsheet = 11,
		xlRangeValueMSPersistXML   = 12
	} XlRangeValueDataType;

	typedef enum
	{
		xlA1   = 1,
		xlR1C1 = 0xffffefca
	} XlReferenceStyle;
/*Пока как заглушка. Надо найти числовые значения*/
	typedef enum
	{
		xlLandscape   	= 2,
		xlPortrait 	= 1
	} XlPageOrientation;

	typedef enum
	{
		xlShiftToLeft   = -4159,
		xlShiftUp 	= -4162
	} XlDeleteShiftDirection;

/*Пока как заглушка. Надо найти числовые значения*/
	typedef enum
	{
		xlExclusive	= 1,
		xlNoChange	= 2,
		xlShared	= 3
	}XlSaveAsAccessMode;

	typedef enum
	{
		xlVAlignBottom		= -4107,
		xlVAlignCenter		= -4108,
		xlVAlignDistributed	= -4117,
		xlVAlignJustify 	= -4130,
		xlVAlignTop		= -4160
	} XlVAlign;

	typedef enum
	{
		xlHAlignCenter			= -4108,
		xlHAlignCenterAcrossSelection	= 7,
		xlHAlignDistributed		= -4117,
		xlHAlignFill			= 5,
		xlHAlignGeneral			= 1,
		xlHAlignJustify			= -4130,
		xlHAlignLeft			= -4131,
		xlHAlignRight			= -4152
	} XlHAlign;

	typedef enum
	{
		xlLeft 			= 0x00000001,
		xlRight			= 0x00000002,
		xlTop			= 0x00000003,
		xlBottom		= 0x00000004,
		xlDiagonalDown		= 0x00000005,
		xlDiagonalUp		= 0x00000006,
		xlEdgeLeft		= 0x00000007,
		xlEdgeTop		= 0x00000008,
		xlEdgeBottom		= 0x00000009,
		xlEdgeRight		= 0x0000000a,
		xlInsideVertical	= 0x0000000b,
		xlInsideHorizontal	= 0x0000000c
	} XlBordersIndex;

	typedef enum
	{
		xlContinuous		= 0x00000001,
		xlDash			= 0xffffefed,
		xlDashDot		= 0x00000004,
		xlDashDotDot		= 0x00000005,
		xlDot			= 0xffffefea,
		xlDouble		= 0xffffefe9,
		xlSlantDashDot		= 0x0000000d,
		xlLineStyleNone		= 0xffffefd2
	} XlLineStyle;

	typedef enum
	{
		xlHairline		= 0x00000001,
		xlThin 			= 0x00000002,
		xlMedium 		= 0xffffefd6,
		xlThick			= 0x00000004
	} XlBorderWeight;

	typedef enum
	{
		xlColorIndexAutomatic 	= -4105,
		xlColorIndexNone 	= -4142
	} XlColorIndex;

	typedef enum
	{
		xlChart				= 0x00000010, // надо узнать
		xlDialogSheet 			= 0x00000011, // надо узнать
		xlExcel4IntlMacroSheet 		= 0x00000012, // надо узнать
		xlExcel4MacroSheet		= 0x00000013, // надо узнать
		xlWorksheet			= 0xffffefb9
	} XlSheetType;

//	typedef enum
//	{
//		xlBackgroundAutomatic   = 1,
//		xlBackgroundOpaque = 2,
//		xlBackgroundTransparent = 3
//	} XlBackground;

	[
		object,
		uuid(0AA5C884-A88C-4f79-AE9F-89864F3D35CD),
		dual,
		helpstring("I_Border Interface"),
		pointer_default(unique)
	]
	interface I_Border : IDispatch
	{
//Application 	Returns an Application object that represents the Microsoft Excel application.
		[propget,id(1), helpstring("property Application")] HRESULT Application([out, retval] IDispatch **value);
//Parent 	Returns the parent object for the specified object.
		[propget,id(2), helpstring("property Parent")] HRESULT Parent([out, retval] IDispatch **value);
//Color 	Returns or sets the primary color of the border.
		[propget,id(3), helpstring("property Color")] HRESULT Color([out, retval] long *plcolor);
		[propput,id(3), helpstring("property Color")] HRESULT Color([in] long lcolor);
//ColorIndex 	Returns or sets the color of the border.
		[propget,id(4), helpstring("property ColorIndex")] HRESULT ColorIndex([out, retval] long *plcolorindex);
		[propput,id(4), helpstring("property ColorIndex")] HRESULT ColorIndex([in] long lcolorindex);
//Creator 	Returns a 32-bit integer that indicates the application in which this object was created.
		[propget,id(5), helpstring("property Creator")] HRESULT Creator([out, retval] VARIANT *result);
//LineStyle 	Returns or sets the line style for the border.
		[propget,id(6), helpstring("property LineStyle")] HRESULT LineStyle([out, retval] XlLineStyle *plinestyle);
		[propput,id(6), helpstring("property LineStyle")] HRESULT LineStyle([in] XlLineStyle linestyle);
//Weight 	Returns or sets the weight of the border.
		[propget,id(7), helpstring("property Weight")] HRESULT Weight([out, retval] XlBorderWeight *pweight);
		[propput,id(7), helpstring("property Weight")] HRESULT Weight([in] XlBorderWeight weight);
	};

	[
		object,
		uuid(6D61D57B-4EAC-4ab5-8300-E133340AED59),
		dual,
		helpstring("I_Borders Interface"),
		pointer_default(unique)
	]
	interface I_Borders : IDispatch
	{
//Application 	Returns an Application object that represents the Microsoft Excel application.
		[propget,id(1), helpstring("property Application")] HRESULT Application([out, retval] IDispatch **value);
//Parent 	Returns the parent object for the specified object.
		[propget,id(2), helpstring("property Parent")] HRESULT Parent([out, retval] IDispatch **value);
//Color 	Returns or sets the primary color of all four borders of a range. If they're not all the same color, returns 0 (zero).
		[propget,id(3), helpstring("property Color")] HRESULT Color([out, retval] long *plcolor);
		[propput,id(3), helpstring("property Color")] HRESULT Color([in] long lcolor);
//ColorIndex 	Returns or sets the color of all four borders. Returns Null if all four borders aren't the same color.
		[propget,id(4), helpstring("property ColorIndex")] HRESULT ColorIndex([out, retval] long *plcolorindex);
		[propput,id(4), helpstring("property ColorIndex")] HRESULT ColorIndex([in] long lcolorindex);
//Creator 	Returns a 32-bit integer that indicates the application in which this object was created.
		[propget,id(5), helpstring("property Creator")] HRESULT Creator([out, retval] VARIANT *result);
//LineStyle 	Returns or sets the line style for the border.
		[propget,id(6), helpstring("property LineStyle")] HRESULT LineStyle([out, retval] XlLineStyle *plinestyle);
		[propput,id(6), helpstring("property LineStyle")] HRESULT LineStyle([in] XlLineStyle linestyle);
//Weight 	Returns or sets the weight of the border.
		[propget,id(7), helpstring("property Weight")] HRESULT Weight([out, retval] XlBorderWeight *pweight);
		[propput,id(7), helpstring("property Weight")] HRESULT Weight([in] XlBorderWeight weight);
//_Default 	 
		[propget,id(8), helpstring("property _Default")] HRESULT _Default([in] XlBordersIndex key, [out, retval] IDispatch **ppObject);/*I_Border*/
//Item 	Returns a Border object that represents one of the borders of either a range of cells or a style.
		[propget,id(9), helpstring("property Item")] HRESULT Item([in] XlBordersIndex key, [out, retval] IDispatch **ppObject);/*I_Border*/
//Value 	Returns or sets the line style for the border.
		[propget,id(10), helpstring("property Value")] HRESULT Value([out, retval] XlLineStyle *plinestyle);
		[propput,id(10), helpstring("property Value")] HRESULT Value([in] XlLineStyle linestyle);


//Count 	Returns the number of objects in the collection.
//Methods
//GetEnumerator 	Returns an enumerator to support iterating through the collection.
	};


	[
		object,
		uuid(FBB10054-3191-49da-8F75-0ED6E4C8E03A),
		dual,
		helpstring("I_Interior Interface"),
		pointer_default(unique)
	]
	interface I_Interior : IDispatch
	{
//ColorIndex 	Returns or sets the color of the interior.
		[propget,id(1), helpstring("property ColorIndex")] HRESULT ColorIndex([out, retval] long *plcolorindex);
		[propput,id(1), helpstring("property ColorIndex")] HRESULT ColorIndex([in] long lcolorindex);
//Color 	Returns or sets the primary cell shading color or drawing object fill color.
		[propget,id(2), helpstring("property Color")] HRESULT Color([out, retval] long *plcolor);
		[propput,id(2), helpstring("property Color")] HRESULT Color([in] long lcolor);
//Application 	Returns an Application object that represents the Microsoft Excel application.
		[propget,id(3), helpstring("property Application")] HRESULT Application([out, retval] IDispatch **value);
//Parent 	Returns the parent object for the specified object.
		[propget,id(4), helpstring("property Parent")] HRESULT Parent([out, retval] IDispatch **value);
//Creator 	Returns a 32-bit integer that indicates the application in which this object was created.
		[propget,id(5), helpstring("property Creator")] HRESULT Creator([out, retval] VARIANT *result);


//InvertIfNegative 	True if Microsoft Excel inverts the pattern in the item when it corresponds to a negative number.
//Pattern 	Returns or sets the interior pattern.
//PatternColor 	Returns or sets the color of the interior pattern as an RGB value.
//PatternColorIndex 	Returns or sets the color of the interior pattern as an index into the current color palette, or as one of the following XlColorIndex constants: xlColorIndexAutomatic or xlColorIndexNone.
	};

	[
		object,
		uuid(121646A0-69B9-4942-B92A-339EF5766936),
		dual,
		helpstring("I_Font Interface"),
		pointer_default(unique)
	]
	interface I_Font : IDispatch
	{
// Bold 	True if the font is bold.
		[propget,id(1), helpstring("property Bold")] HRESULT Bold([out, retval] VARIANT_BOOL *pvbBold);
		[propput,id(1), helpstring("property Bold")] HRESULT Bold([in] VARIANT_BOOL vbBold);
// Italic 	True if the font style is italic.
		[propget,id(2), helpstring("property Italic")] HRESULT Italic([out, retval] VARIANT_BOOL *pvbItalic);
		[propput,id(2), helpstring("property Italic")] HRESULT Italic([in] VARIANT_BOOL vbItalic);
// Underline 	Returns or sets the type of underline applied to the font.
		[propget,id(3), helpstring("property Underline")] HRESULT Underline([out, retval] VARIANT_BOOL *pvbUnderline);
		[propput,id(3), helpstring("property Underline")] HRESULT Underline([in] VARIANT_BOOL vbUnderline);
//Size 	Returns or sets the size of the font.
		[propget,id(4), helpstring("property Size")] HRESULT Size([out, retval] long *plsize);
		[propput,id(4), helpstring("property Size")] HRESULT Size([in] long lsize);
//Strikethrough 	True if the font is struck through with a horizontal line.
		[propget,id(5), helpstring("property Strikethrough")] HRESULT Strikethrough([out, retval] VARIANT_BOOL *pvbUnderline);
		[propput,id(5), helpstring("property Strikethrough")] HRESULT Strikethrough([in] VARIANT_BOOL vbUnderline);
//Name 	Returns or sets the name of the object.
		[propget,id(6), helpstring("property Name")] HRESULT Name([out, retval] VARIANT *vName);
		[propput,id(6), helpstring("property Name")] HRESULT Name([in] VARIANT vName);
//ColorIndex 	Returns or sets the color of the interior.
		[propget,id(7), helpstring("property ColorIndex")] HRESULT ColorIndex([out, retval] long *plcolorindex);
		[propput,id(7), helpstring("property ColorIndex")] HRESULT ColorIndex([in] long lcolorindex);
//Color 	Returns or sets the primary cell shading color or drawing object fill color.
		[propget,id(8), helpstring("property Color")] HRESULT Color([out, retval] long *plcolor);
		[propput,id(8), helpstring("property Color")] HRESULT Color([in] long lcolor);
//Application 	Returns an Application object that represents the Microsoft Excel application.
		[propget,id(9), helpstring("property Application")] HRESULT Application([out, retval] IDispatch **value);
//Parent 	Returns the parent object for the specified object.
		[propget,id(10), helpstring("property Parent")] HRESULT Parent([out, retval] IDispatch **value);
//Creator 	Returns a 32-bit integer that indicates the application in which this object was created.
		[propget,id(11), helpstring("property Creator")] HRESULT Creator([out, retval] VARIANT *result);
//Shadow 	True if the font is a shadow font or if the object has a shadow.
		[propget,id(12), helpstring("property Shadow")] HRESULT Shadow([out, retval] VARIANT_BOOL *pvbshadow);
		[propput,id(12), helpstring("property Shadow")] HRESULT Shadow([in] VARIANT_BOOL vbshadow);
//OutlineFont 	True if the font is an outline font.


//Properties
//Background 	Returns or sets the type of background for text used in charts. Can be one of the XlBackground constants.
//XlBackground - 
//FontStyle 	Returns or sets the font style.
//Subscript 	True if the font is formatted as subscript. False by default.
//Superscript 	True if the font is formatted as superscript. False by default.
	};

	[
		object,
		uuid(AE05AACA-AED3-4edd-A4DF-9FD2F24B3877),
		dual,
		helpstring("I_Range Interface"),
		pointer_default(unique)
	]
	interface I_Range : IDispatch
	{
		[propget,id(1), helpstring("property _Default")] HRESULT _Default([in] VARIANT varRowIndex, [in] VARIANT varColumnIndex, [out, retval] IDispatch **ppObject);

		[propget,id(2), helpstring("property ColumnWidth")] HRESULT ColumnWidth([out, retval] long *pnColumnWidth);
		[propput,id(2), helpstring("property ColumnWidth")] HRESULT ColumnWidth([in] long nColumnWidth);

		[propget,id(3), helpstring("property Font")] HRESULT Font([out, retval] IDispatch **ppFont);

		[propget,id(4), helpstring("property Value")] HRESULT Value([in, optional] VARIANT varRangeValueDataType, [out, retval] VARIANT *pvarValue);
		[propput,id(4), helpstring("property Value")] HRESULT Value([in, optional] VARIANT varRangeValueDataType, [in] VARIANT varValue);

		[id(5), helpstring("method Select")] HRESULT Select([out, retval] VARIANT *pvarResult);

		[id(6), helpstring("method NoteText")] HRESULT NoteText([in, optional] VARIANT  Text, [in, optional] VARIANT  Start, [in, optional] VARIANT  Length, [out, retval]  BSTR    *pText);

		[id(7), helpstring("method ClearContents")] VARIANT ClearContents();

		[propget,id(8), helpstring("property Column")] long Column();

		[propget,id(9), helpstring("property Row")] long Row();

		[propget,id(10), helpstring("property HorizontalAlignment")] HRESULT HorizontalAlignment([out, retval] XlHAlign *halign);
		[propput,id(10), helpstring("property HorizontalAlignment")] HRESULT HorizontalAlignment([in] XlHAlign halign);

		[propget,id(11), helpstring("property VerticalAlignment")] HRESULT VerticalAlignment([out, retval] XlVAlign *valign);
		[propput,id(11), helpstring("property VerticalAlignment")] HRESULT VerticalAlignment([in] XlVAlign valign);

		[id(12), helpstring("method Merge")] HRESULT Merge([in, optional] VARIANT_BOOL flag);

		[id(13), helpstring("method UnMerge")] HRESULT UnMerge();

		[propget,id(14), helpstring("property WrapText")] HRESULT WrapText([out, retval] VARIANT_BOOL *pvbwraptext);
		[propput,id(14), helpstring("property WrapText")] HRESULT WrapText([in] VARIANT_BOOL pvbwraptext);
//Application
		[propget,id(15), helpstring("property Application")] HRESULT Application([out, retval] IDispatch **value);
//Parent
		[propget,id(16), helpstring("property Parent")] HRESULT Parent([out, retval] IDispatch **value);
//Worksheet
		[propget,id(17), helpstring("property Worksheet")] HRESULT Worksheet([out, retval] IDispatch **value);

		[id(18), helpstring("method Clear")] VARIANT Clear();

		[id(19), helpstring("method ClearComments")] HRESULT ClearComments();

		[id(20), helpstring("method ClearFormats")] VARIANT ClearFormats();

		[id(21), helpstring("method ClearNotes")] VARIANT ClearNotes();

		[id(22), helpstring("method ClearOutline")] VARIANT ClearOutline();
//Interior
		[propget,id(23), helpstring("property Interior")] HRESULT Interior([out, retval] IDispatch **value);
//Borders
		[propget,id(24), helpstring("property Borders")] HRESULT Borders([out, retval] IDispatch **value);
//Count
		[propget,id(25), helpstring("property Count")] HRESULT Count([out, retval] long *lcount);
//delete
		[id(26), helpstring("method Delete")] HRESULT Delete([in, optional] VARIANT param, [out, retval] IDispatch **value);
//RowHeight
		[propget,id(27), helpstring("property RowHeight")] HRESULT RowHeight([out, retval] long *pnrowheight);
		[propput,id(27), helpstring("property RowHeight")] HRESULT RowHeight([in] long nrowheight);
//Copy
		[id(28), helpstring("method Copy")] HRESULT Copy(
			[in, optional] VARIANT RangeTo,
			[out, retval] IDispatch **value);
//NumberFormat
		[propget,id(29), helpstring("property NumberFormat")] HRESULT NumberFormat([out, retval] VARIANT *pnumbformat);
		[propput,id(29), helpstring("property NumberFormat")] HRESULT NumberFormat([in] VARIANT numbformat);
//NumberFormatLocal
		[propget,id(30), helpstring("property NumberFormatLocal")] HRESULT NumberFormatLocal([out, retval] VARIANT *pnumbformat);
		[propput,id(30), helpstring("property NumberFormatLocal")] HRESULT NumberFormatLocal([in] VARIANT numbformat);
//Height
		[propget,id(31), helpstring("property Height")] HRESULT Height([out, retval] VARIANT *value);
//Width
		[propget,id(32), helpstring("property Width")] HRESULT Width([out, retval] VARIANT *value);
//Left
		[propget,id(33), helpstring("property Left")] HRESULT Left([out, retval] VARIANT *value);
//Top
		[propget,id(34), helpstring("property Top")] HRESULT Top([out, retval] VARIANT *value);
//ShrinkToFit
		[propget,id(35), helpstring("property ShrinkToFit")] HRESULT ShrinkToFit([out, retval] VARIANT *pparam);
		[propput,id(35), helpstring("property ShrinkToFit")] HRESULT ShrinkToFit([in] VARIANT param);
//MergeCells
		[propget,id(36), helpstring("property MergeCells")] HRESULT MergeCells([out, retval] VARIANT *pparam);
		[propput,id(36), helpstring("property MergeCells")] HRESULT MergeCells([in] VARIANT param);
//Locked
		[propget,id(37), helpstring("property Locked")] HRESULT Locked([out, retval] VARIANT *pparam);
		[propput,id(37), helpstring("property Locked")] HRESULT Locked([in] VARIANT param);
//Hidden
		[propget,id(38), helpstring("property Hidden")] HRESULT Hidden([out, retval] VARIANT *pparam);
		[propput,id(38), helpstring("property Hidden")] HRESULT Hidden([in] VARIANT param);
//MergeArea
		[propget,id(39), helpstring("property MergeArea")] HRESULT MergeArea([out, retval] IDispatch **value);
//AutoFit
		[id(40), helpstring("method AutoFit")] VARIANT AutoFit();
//Insert
		[id(41), helpstring("method Insert")] VARIANT Insert(
			[in, optional] VARIANT Shift,
			[in, optional] VARIANT CopyOrigin);
//EntireColumn
		[propget,id(42), helpstring("property EntireColumn")] HRESULT EntireColumn([out, retval] IDispatch **value);
	};

	[
		object,
		uuid(64E6FD03-19B4-4149-A1CE-E9517DC05B34),
		dual,
		helpstring("I_PageSetup Interface"),
		pointer_default(unique)
	]
	interface I_PageSetup : IDispatch
	{
//LeftMargin
		[propget,id(1), helpstring("property LeftMargin")] HRESULT LeftMargin([out, retval] double *value);
		[propput,id(1), helpstring("property LeftMargin")] HRESULT LeftMargin([in] double value);
//RightMargin
		[propget,id(2), helpstring("property RightMargin")] HRESULT RightMargin([out, retval] double *value);
		[propput,id(2), helpstring("property RightMargin")] HRESULT RightMargin([in] double value);
//TopMargin
		[propget,id(3), helpstring("property TopMargin")] HRESULT TopMargin([out, retval] double *value);
		[propput,id(3), helpstring("property TopMargin")] HRESULT TopMargin([in] double value);
//BottomMargin
		[propget,id(4), helpstring("property BottomMargin")] HRESULT BottomMargin([out, retval] double *value);
		[propput,id(4), helpstring("property BottomMargin")] HRESULT BottomMargin([in] double value);
//Orientation
		[propget,id(5), helpstring("property Orientation")] HRESULT Orientation([out, retval] long *value);
		[propput,id(5), helpstring("property Orientation")] HRESULT Orientation([in] long value);
//Zoom
		[propget,id(6), helpstring("property Zoom")] HRESULT Zoom([out, retval] VARIANT *value);
		[propput,id(6), helpstring("property Zoom")] HRESULT Zoom([in] VARIANT value);
//FitToPagesTall
		[propget,id(7), helpstring("property FitToPagesTall")] HRESULT FitToPagesTall([out, retval] VARIANT *value);
		[propput,id(7), helpstring("property FitToPagesTall")] HRESULT FitToPagesTall([in] VARIANT value);
//FitToPagesWide
		[propget,id(8), helpstring("property FitToPagesWide")] HRESULT FitToPagesWide([out, retval] VARIANT *value);
		[propput,id(8), helpstring("property FitToPagesWide")] HRESULT FitToPagesWide([in] VARIANT value);
//HeaderMargin
		[propget,id(9), helpstring("property HeaderMargin")] HRESULT HeaderMargin([out, retval] double *value);
		[propput,id(9), helpstring("property HeaderMargin")] HRESULT HeaderMargin([in] double value);
//FooterMargin
		[propget,id(10), helpstring("property FooterMargin")] HRESULT FooterMargin([out, retval] double *value);
		[propput,id(10), helpstring("property FooterMargin")] HRESULT FooterMargin([in] double value);
//CenterHorizontally
		[propget,id(11), helpstring("property CenterHorizontally")] HRESULT CenterHorizontally([out, retval] VARIANT_BOOL *value);
		[propput,id(11), helpstring("property CenterHorizontally")] HRESULT CenterHorizontally([in] VARIANT_BOOL value);
//CenterVertically
		[propget,id(12), helpstring("property CenterVertically")] HRESULT CenterVertically([out, retval] VARIANT_BOOL *value);
		[propput,id(12), helpstring("property CenterVertically")] HRESULT CenterVertically([in] VARIANT_BOOL value);
//PrintTitleRows
		[propget,id(13), helpstring("property PrintTitleRows")] HRESULT PrintTitleRows([out, retval] BSTR *value);
		[propput,id(13), helpstring("property PrintTitleRows")] HRESULT PrintTitleRows([in] BSTR value);
	};

	[
		object,
		uuid(89D530BA-8D4B-48b7-99A3-3AD84E2DDC87),
		dual,
		helpstring("I_Shape Interface"),
		pointer_default(unique)
	]
	interface I_Shape : IDispatch
	{

	};

	[
		object,
		uuid(8BEDE852-1F35-4aeb-8FEA-12A40C8934B1),
		dual,
		helpstring("I_Shapes Interface"),
		pointer_default(unique)
	]
	interface I_Shapes : IDispatch
	{
//AddLine Returns a Shape object that represents the new line in a worksheet.
		[id(1), helpstring("method AddLine")] HRESULT AddLine(
			[in] float beginX,
			[in] float beginY,
			[in] float endX,
			[in] float endY,
			[out, retval] IDispatch **ppValue);
	};

	[
		object,
		uuid(2FE99C80-A00C-44a0-BC77-8DB916FDFD41),
		dual,
		helpstring("I_Worksheet Interface"),
		pointer_default(unique)
	]
	interface I_Worksheet : IDispatch
	{
//Name
		[propget,id(1), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pbstrName);
		[propput,id(1), helpstring("property Name")] HRESULT Name([in] BSTR bstrName);
//Cells
		[propget,id(2), helpstring("property Cells")] HRESULT Cells   ([out, retval] IDispatch **ppRange);
//Range
		[propget,id(3), helpstring("property Range")] HRESULT Range([in] VARIANT Cell1, [in, optional] VARIANT Cell2, [out, retval] IDispatch **ppRange);
//Paste
		[id(4), helpstring("method Paste")] HRESULT Paste([in, optional] VARIANT Destination, [in, optional] VARIANT Link, [in] long lcid);
//Activate
		[id(5), helpstring("method Activate")] HRESULT Activate();
//Rows
		[propget,id(6), helpstring("property Rows")] HRESULT Rows([in, optional] VARIANT Row, [out, retval] IDispatch **ppRange);
//Columns
		[propget,id(7), helpstring("property Columns")] HRESULT Columns([in, optional] VARIANT Column, [out, retval] IDispatch **ppRange);
//Copy
		[id(8), helpstring("method Copy")] HRESULT Copy(
			[in, optional] VARIANT Before,
			[in, optional] VARIANT After);
//Delete
		[id(9), helpstring("method Delete")] HRESULT Delete();
//PageSetup
		[propget,id(10), helpstring("property PageSetup")] HRESULT PageSetup([out, retval] IDispatch **ppValue);
//Protect
		[id(11), helpstring("property Protect")] HRESULT Protect([in, optional] VARIANT Password,
			[in, optional] VARIANT DrawingObjects,
			[in, optional] VARIANT Contents,
			[in, optional] VARIANT Scenarios,
			[in, optional] VARIANT UserInterfaceOnly,
			[in, optional] VARIANT AllowFormattingCells,
			[in, optional] VARIANT AllowFormattingColumns,
			[in, optional] VARIANT AllowFormattingRows,
			[in, optional] VARIANT AllowInsertingColumns,
			[in, optional] VARIANT AllowInsertingRows,
			[in, optional] VARIANT AllowInsertingHyperlinks,
			[in, optional] VARIANT AllowDeletingColumns,
			[in, optional] VARIANT AllowDeletingRows,
			[in, optional] VARIANT AllowSorting,
			[in, optional] VARIANT AllowFiltering,
			[in, optional] VARIANT AllowUsingPivotTables);
//Unprotect
		[id(12), helpstring("property Unprotect")] HRESULT Unprotect([in, optional] VARIANT Password);
//Shapes
		[propget, id(13), helpstring("property Shapes")] HRESULT Shapes([out, retval] IDispatch **ppValue);
	};

	[
		object,
		uuid(6D8038C2-BD65-4ef1-A118-45C36D2CB628),
		dual,
		helpstring("I_Sheets Interface"),
		pointer_default(unique)
	]
	interface I_Sheets : IDispatch
	{
		[propget,id(1), helpstring("property _Default")] HRESULT _Default([in] VARIANT varIndex, [out, retval] IDispatch **ppSheet);
//Count
		[propget,id(2), helpstring("property Count")] HRESULT Count([out, retval] int *count);
//Application
		[propget,id(3), helpstring("property Application")] HRESULT Application([out, retval] IDispatch **value);
//Parent
		[propget,id(4), helpstring("property Parent")] HRESULT Parent([out, retval] IDispatch **value);
//Item
		[propget,id(5), helpstring("property Item")] HRESULT Item([in] VARIANT varIndex, [out, retval] IDispatch **ppSheet);
//Creator
		[propget,id(6), helpstring("property Creator")] HRESULT Creator([out, retval] VARIANT *result);
//Add
		[id(7), helpstring("method Add")] HRESULT Add(
			[in, optional] VARIANT Before,
			[in, optional] VARIANT After,
			[in, optional] VARIANT Count,
			[in, optional] VARIANT Type,
			[out, retval] IDispatch **value);
	};

	[
		object,
		uuid(A27356B3-5060-408b-93B2-905649904999),
		dual,
		helpstring("I_Workbook Interface"),
		pointer_default(unique)
	]
	interface I_Workbook : IDispatch
	{
		[propget,id(1), helpstring("property Sheets")] HRESULT Sheets([out, retval] IDispatch **ppSheets);
//WorkSheets = Sheets
		[propget,id(2), helpstring("property WorkSheets")] HRESULT WorkSheets([out, retval] IDispatch **ppSheets);
//Close
		[id(3), helpstring("method Close")] HRESULT Close(
			[in, optional] VARIANT SaveChanges,
			[in, optional] VARIANT Filename,
			[in, optional] VARIANT RouteWorkbook);
//SaveAs
		[id(4), helpstring("method SaveAs")] HRESULT SaveAs(
			[in, optional] VARIANT Filename,
			[in, optional] VARIANT FileFormat,
			[in, optional] VARIANT Password,
			[in, optional] VARIANT WriteResPassword,
			[in, optional] VARIANT ReadOnlyRecommended,
			[in, optional] VARIANT CreateBackup,
			[in, optional] XlSaveAsAccessMode AccessMode,
			[in, optional] VARIANT ConflictResolution,
			[in, optional] VARIANT AddToMru,
			[in, optional] VARIANT TextCodepage,
			[in, optional] VARIANT TextVisualLayout,
			[in, optional] VARIANT Local);
//Save
		[id(5), helpstring("method Save")] HRESULT Save();
//Protect
		[id(6), helpstring("method Protect")] HRESULT Protect(
			[in, optional] VARIANT Password,
			[in, optional] VARIANT Structure,
			[in, optional] VARIANT Windows);
//Unprotect
		[id(7), helpstring("method Unprotect")] HRESULT Unprotect(
			[in, optional] VARIANT Password);
//Name
		[propget,id(8), helpstring("property Name")] HRESULT Name([out, retval] BSTR *retval);
//Names
		[propget,id(9), helpstring("property Names")] HRESULT Names([out, retval] IDispatch **retval);

	};

	[
		object,
		uuid(9D055220-D153-4a09-B680-6AAC88BD06F1),
		dual,
		helpstring("Names Interface"),
		pointer_default(unique)
	]
	interface Names : IDispatch
	{
//Application
		[propget,id(1), helpstring("property Application")] HRESULT Application([out, retval] IDispatch **value);
//Count
		[propget,id(2), helpstring("property Count")] HRESULT Count([out, retval] int *count);
//Creator
		[propget,id(3), helpstring("property Creator")] HRESULT Creator([out, retval] VARIANT *result);
//Parent
		[propget,id(4), helpstring("property Parent")] HRESULT Parent([out, retval] IDispatch **value);
//_Default
		[id(5), helpstring("property _Default")] HRESULT _Default(
			[in, optional] VARIANT Index,
			[in, optional] VARIANT IndexLocal,
			[in, optional] VARIANT RefersTo,
			[out, retval] IDispatch **ppvalue);
//Add
		[id(6), helpstring("property Add")] HRESULT Add(
			[in, optional] VARIANT Name,
			[in, optional] VARIANT RefersTo,
			[in, optional] VARIANT Visible,
			[in, optional] VARIANT MacroType,
			[in, optional] VARIANT ShortcutKey,
			[in, optional] VARIANT Category,
			[in, optional] VARIANT NameLocal,
			[in, optional] VARIANT RefersToLocal,
			[in, optional] VARIANT CategoryLocal,
			[in, optional] VARIANT RefersToR1C1,
			[in, optional] VARIANT RefersToR1C1Local,
			[out, retval] IDispatch **ppvalue);
//GetEnumerator
		[id(7), helpstring("property GetEnumerator")] HRESULT GetEnumerator([out, retval] IDispatch **value);
//Item
		[id(8), helpstring("property Item")] HRESULT Item(
			[in, optional] VARIANT Index,
			[in, optional] VARIANT IndexLocal,
			[in, optional] VARIANT RefersTo,
			[out, retval] IDispatch **ppvalue);
	}

	[
		object,
		uuid(421F8294-6598-4470-A6F7-60D4C31115B8),
		dual,
		helpstring("I_Workbooks Interface"),
		pointer_default(unique)
	]
	interface I_Workbooks : IDispatch
	{
//Add 	Creates a new workbook. The new workbook becomes the active workbook. Returns a Workbook object.
		[id(1), helpstring("method Add")] HRESULT Add([in, optional] VARIANT varTemplate, [out, retval] IDispatch **ppWorkbook);
//_Open
		[id(2), hidden, helpstring("method _Open")] HRESULT _Open(
			[in]           BSTR        Filename,
			[in, optional] VARIANT     UpdateLinks,
			[in, optional] VARIANT     ReadOnly,
			[in, optional] VARIANT     Format,
			[in, optional] VARIANT     Password,
			[in, optional] VARIANT     WriteResPassword,
			[in, optional] VARIANT     IgnoreReadOnlyRecommended,
			[in, optional] VARIANT     Origin,
			[in, optional] VARIANT     Delimiter,
			[in, optional] VARIANT     Editable,
			[in, optional] VARIANT     Notify,
			[in, optional] VARIANT     Converter,
			[in, optional] VARIANT     AddToMru,
			[in]     long        Lcid,
			[out, retval]  IDispatch **ppWorkbook);
//Close 	Closes the object. 
		[id(3), helpstring("method Close")] HRESULT Close([in] long lcid);
//Count
		[propget,id(4), helpstring("property Count")] HRESULT Count([out, retval] int *count);
//Application
		[propget,id(5), helpstring("property Application")] HRESULT Application([out, retval] IDispatch **value);
//Parent
		[propget,id(6), helpstring("property Parent")] HRESULT Parent([out, retval] IDispatch **value);
//Open
		[id(7), helpstring("method Open")] HRESULT Open(
			[in]           BSTR        Filename,
			[in, optional] VARIANT     UpdateLinks,
			[in, optional] VARIANT     ReadOnly,
			[in, optional] VARIANT     Format,
			[in, optional] VARIANT     Password,
			[in, optional] VARIANT     WriteResPassword,
			[in, optional] VARIANT     IgnoreReadOnlyRecommended,
			[in, optional] VARIANT     Origin,
			[in, optional] VARIANT     Delimiter,
			[in, optional] VARIANT     Editable,
			[in, optional] VARIANT     Notify,
			[in, optional] VARIANT     Converter,
			[in, optional] VARIANT     AddToMru,
			[in, optional] VARIANT     Local,
			[in, optional] VARIANT     CorruptLoad,
			[in]     long        Lcid,
			[out, retval]  IDispatch **ppWorkbook);
//OpenText
		[id(8), helpstring("method OpenText")] HRESULT OpenText(
			[in]           BSTR        Filename,
			[in, optional] VARIANT     Origin,
			[in, optional] VARIANT     StartRow,
			[in, optional] VARIANT     DataType,
			[in, optional] VARIANT     TextQualifier,
			[in, optional] VARIANT     ConsecutiveDelimiter,
			[in, optional] VARIANT     Tab,
			[in, optional] VARIANT     Semicolon,
			[in, optional] VARIANT     Comma,
			[in, optional] VARIANT     Space,
			[in, optional] VARIANT     Other,
			[in, optional] VARIANT     OtherChar,
			[in, optional] VARIANT     FieldInfo,
			[in, optional] VARIANT     TextVisualLayout,
			[in, optional] VARIANT     DecimalSeparator,
			[in, optional] VARIANT     ThousandsSeparator,
			[in, optional] VARIANT     TrailingMinusNumbers,
			[in, optional] VARIANT     Local,
			[in]     long        Lcid,
			[out, retval]  IDispatch **ppWorkbook);
//_OpenText
		[id(9), hidden, helpstring("method _OpenText")] HRESULT _OpenText(
			[in]           BSTR        Filename,
			[in, optional] VARIANT     Origin,
			[in, optional] VARIANT     StartRow,
			[in, optional] VARIANT     DataType,
			[in, optional] VARIANT     TextQualifier,
			[in, optional] VARIANT     ConsecutiveDelimiter,
			[in, optional] VARIANT     Tab,
			[in, optional] VARIANT     Semicolon,
			[in, optional] VARIANT     Comma,
			[in, optional] VARIANT     Space,
			[in, optional] VARIANT     Other,
			[in, optional] VARIANT     OtherChar,
			[in, optional] VARIANT     FieldInfo,
			[in, optional] VARIANT     TextVisualLayout,
			[in, optional] VARIANT     DecimalSeparator,
			[in, optional] VARIANT     ThousandsSeparator,
			[in]     long        Lcid,
			[out, retval]  IDispatch **ppWorkbook);
//OpenXML
		[id(10), helpstring("method OpenXML")] HRESULT OpenXML(
			[in]           BSTR        Filename,
			[in, optional] VARIANT     Stylesheets,
			[in, optional] VARIANT     LoadOption,
			[in]     long        Lcid,
			[out, retval]  IDispatch **ppWorkbook);
//_OpenXML
		[id(11), hidden, helpstring("method _OpenXML")] HRESULT _OpenXML(
			[in]           BSTR        Filename,
			[in, optional] VARIANT     Stylesheets,
			[in]     long        Lcid,
			[out, retval]  IDispatch **ppWorkbook);
//OpenDatabase
		[id(12), helpstring("method OpenDatabase")] HRESULT OpenDatabase(
			[in]           BSTR        Filename,
			[in, optional] VARIANT     CommandText,
			[in, optional] VARIANT     CommandType,
			[in, optional] VARIANT     BackgroundQuery,
			[in, optional] VARIANT     ImportDataAs,
			[in]     long        Lcid,
			[out, retval]  IDispatch **ppWorkbook);
//CanCheckOut
		[propget,id(13), helpstring("property CanCheckOut")] HRESULT CanCheckOut([in] BSTR Filename, [out, retval] VARIANT_BOOL *result);
		[propput,id(13), helpstring("property CanCheckOut")] HRESULT CanCheckOut([in] BSTR Filename, [in] VARIANT_BOOL result);
//CheckOut
		[id(14), helpstring("method CanCheckOut")] HRESULT CheckOut([in] BSTR Filename);
//Creator
		[propget,id(15), helpstring("property Creator")] HRESULT Creator([out, retval] VARIANT *result);
//_Default
		[propget,id(16), helpstring("property _Default")] HRESULT _Default([in] VARIANT varIndex, [out, retval] IDispatch **ppSheet);
//Item
		[propget,id(17), helpstring("property Item")] HRESULT Item([in] VARIANT index, [out, retval] IDispatch **result);
//__OpenText
		[id(18), hidden, helpstring("method __OpenText")] HRESULT __OpenText(
			[in]           BSTR        Filename,
			[in, optional] VARIANT     Origin,
			[in, optional] VARIANT     StartRow,
			[in, optional] VARIANT     DataType,
			[in, optional] VARIANT     TextQualifier,
			[in, optional] VARIANT     ConsecutiveDelimiter,
			[in, optional] VARIANT     Tab,
			[in, optional] VARIANT     Semicolon,
			[in, optional] VARIANT     Comma,
			[in, optional] VARIANT     Space,
			[in, optional] VARIANT     Other,
			[in, optional] VARIANT     OtherChar,
			[in, optional] VARIANT     FieldInfo,
			[in, optional] VARIANT     TextVisualLayout,
			[in]     long        Lcid,
			[out, retval]  IDispatch **ppWorkbook);
//Methods
//GetEnumerator 	Returns an enumerator to support iterating through the collection.   .NET
		};

	[
		object,
		uuid(8BF85212-E62F-4dd9-8A4A-A6BFA5BD0D5B),
		dual,
		helpstring("I_Application Interface"),
		pointer_default(unique)
	]
	interface I_ApplicationExcel : IDispatch
	{
//UserControl 	True if the application is visible or if it was created or started by the user. False if you created or started the application programmatically by using the CreateObject or GetObject functions and the application is hidden.
		[propput,id(1)] HRESULT UserControl([in] VARIANT_BOOL vbUserControl);
		[propget,id(1)] HRESULT UserControl([out, retval] VARIANT_BOOL *vbUserControl);

//DisplayAlerts 	True if Microsoft Excel displays certain alerts and messages while a macro is running.
		[propput,id(2)] HRESULT DisplayAlerts([in] VARIANT_BOOL vbDisplayAlerts);
		[propget,id(2)] HRESULT DisplayAlerts([out, retval] VARIANT_BOOL *vbDisplayAlerts);
		//[propget, id(0x157)] HRESULT DisplayAlerts([in, lcid] long lcid, [out, retval] VARIANT_BOOL* RHS);

//WindowState 	Returns or sets the state of the window. Read/write XlWindowState.
		[propput,id(3)] HRESULT WindowState([in] XlWindowState State);
		[propget,id(3)] HRESULT WindowState([out, retval] XlWindowState *State);

//Visible 	Determines whether the object is visible.
		[propput,id(4)] HRESULT Visible([in] VARIANT_BOOL vbVisible);
		[propget,id(4)] HRESULT Visible([out, retval] VARIANT_BOOL *vbVisible);

//Workbooks 	Returns a Workbooks collection that represents all the open workbooks.
		[propget,id(5)] HRESULT Workbooks([out, retval] IDispatch **ppWorkbooks);

//Sheets 	Returns a Sheets collection that represents all the worksheets in the active workbook.
		[propget,id(6)] HRESULT Sheets([out, retval] IDispatch **ppSheets);
//Worksheets 	Returns a Sheets collection that represents all the worksheets in the active workbook.
		[propget,id(7)] HRESULT Worksheets([out, retval] IDispatch **ppSheets);

//Cells 	Returns a Range object that represents all the cells on the active worksheet. If the active document isn?t a worksheet, this property fails.
		[propget,id(8)] HRESULT Cells([out, retval] IDispatch **ppRange);

//ActiveSheet 	Returns an object that represents the active sheet (the sheet on top) in the active workbook or in the specified window or workbook. Returns Nothing if no sheet is active.
		[propget,id(9)] HRESULT ActiveSheet([out, retval] IDispatch** RHS);

//Version 	Returns the Microsoft Excel version number.
		[propget,id(10)] HRESULT Version([in] long Lcid, [out, retval] BSTR *pVersion);

//ConvertFormula 	Converts cell references in a formula between the A1 and R1C1 reference styles, between relative and absolute references, or both.
		[id(11)] HRESULT ConvertFormula(
			[in]           VARIANT          Formula,
			[in]           XlReferenceStyle FromReferenceStyle,
			[in, optional] VARIANT          ToReferenceStyle,
			[in, optional] VARIANT          ToAbsolute,
			[in, optional] VARIANT          RelativeTo,
			[in]           long             Lcid,
			[out, retval]  VARIANT         *pResult);

//Quit 	Quits Microsoft Excel.
		[id(12)] HRESULT Quit();

//ActiveCell 	Returns a Range object that represents the active cell in the active window (the window on top) or in the specified window. If the window isn't displaying a worksheet, this property fails.
		[propget,id(13)] HRESULT ActiveCell([out, retval] IDispatch** RHS);
//Application 	Returns an Application object that represents the creator of the specified object (you can use this property with an OLE Automation object to return the application of that object).
		[propget,id(14), helpstring("property Application")] HRESULT Application([out, retval] IDispatch **value);
//EnableEvents 	True if events are enabled for the specified object.
		[propget,id(15), helpstring("property EnableEvents")] HRESULT EnableEvents([out, retval] VARIANT_BOOL *pvbee);
		[propput,id(15), helpstring("property EnableEvents")] HRESULT EnableEvents([in] VARIANT_BOOL vbee);
//ScreenUpdating 	True if screen updating is turned on.
		[propget,id(16), helpstring("property ScreenUpdating")] HRESULT ScreenUpdating([out, retval] VARIANT_BOOL *vbscup);
		[propput,id(16), helpstring("property ScreenUpdating")] HRESULT ScreenUpdating([in] VARIANT_BOOL vbscup);
//Caption 	The name that appears in the title bar of the main Microsoft Excel window. If you don't set a name, or if you set the name to Empty, this property returns "Microsoft Excel".
		[propget,id(17), helpstring("property Caption")] HRESULT Caption([out, retval] VARIANT *vName);
		[propput,id(17), helpstring("property Caption")] HRESULT Caption([in] VARIANT vName);
//ActiveWorkbook 	Returns a Workbook object that represents the workbook in the active window (the window on top). Returns Nothing if there are no windows open or if either the Info window or the Clipboard window is the active window.
		[propget,id(18), helpstring("property ActiveWorkbook")] HRESULT ActiveWorkbook([out, retval] IDispatch **result);
//Range 	Returns a Range object that represents a cell or a range of cells.
		[propget,id(19), helpstring("property Range")] HRESULT Range   ([in] VARIANT Cell1, [in, optional] VARIANT Cell2, [out, retval] IDispatch **ppRange);
//Columns 	Returns a Range object that represents all the columns on the active worksheet. If the active document isn't a worksheet, the Columns property fails.
		[propget,id(20), helpstring("property Columns")] HRESULT Columns( [in, optional] VARIANT param, [out, retval] IDispatch **ppRange);
//Rows 	Returns a Range object that represents all the rows on the active worksheet. If the active document isn?t a worksheet, the Rows property fails.
		[propget,id(21), helpstring("property Rows")] HRESULT Rows( [in, optional] VARIANT param, [out, retval] IDispatch **ppRange);
//Selection 	Returns the selected object in the active window.
		[propget,id(22), helpstring("property Selection")] HRESULT Selection([out, retval] IDispatch **ppRange);


//Methods
//_Evaluate 	 
//_FindFile 	 
//_Run2 	 
//_Wait 	 
//_WSFunction 	 
//ActivateMicrosoftApp 	Activates a Microsoft application. If the application is already running, this method activates the running application. If the application isn't running, this method starts a new instance of the application. 
//AddChartAutoFormat 	Adds a custom chart autoformat to the list of available chart autoformats. 
//AddCustomList 	Adds a custom list for custom autofill and/or custom sort. 
//Calculate 	Calculates all open workbooks 
//CalculateFull 	Forces a full calculation of the data in all open workbooks. 
//CalculateFullRebuild 	For all open workbooks, forces a full calculation of the data and rebuilds the dependencies. 
//CentimetersToPoints 	Converts a measurement from centimeters to points (one point equals 0.035 centimeters). 
//CheckAbort 	Stops recalculation in a Microsoft Excel application. 
//CheckSpelling 	Checks the spelling of a single word. Returns True if the word is found in one of the dictionaries; returns False if the word isn't found. 
//DDEExecute 	Runs a command or performs some other action or actions in another application by way of the specified DDE channel. 
//DDEInitiate 	Opens a DDE channel to an application. 
//DDEPoke 	Sends data to an application. 
//DDERequest 	Requests information from the specified application. This method always returns an array. 
//DDETerminate 	Closes a channel to another application. 
//DeleteChartAutoFormat 	Removes a custom chart autoformat from the list of available chart autoformats. 
//DeleteCustomList 	Deletes a custom list. 
//DisplayXMLSourcePane 	Opens the XML Source task pane and displays the XML map specified by the XmlMap argument. 
//DoubleClick 	Equivalent to double-clicking the active cell. 
//Dummy1 	 
//Dummy10 	 
//Dummy11 	 
//Dummy12 	 
//Dummy13 	 
//Dummy14 	 
//Dummy2 	 
//Dummy3 	 
//Dummy4 	 
//Dummy5 	 
//Dummy6 	 
//Dummy7 	 
//Dummy8 	 
//Dummy9 	 
//Evaluate 	Converts a Microsoft Excel name to an object or a value. 
//ExecuteExcel4Macro 	Runs a Microsoft Excel 4.0 macro function, and then returns the result of the function. The return type depends on the function. 
//FindFile 	Displays the Open dialog box. 
//GetCustomListContents 	Returns a custom list (an array of strings). 
//GetCustomListNum 	Returns the custom list number for an array of strings. You can use this method to match both built-in lists and custom-defined lists. 
//GetOpenFilename 	Displays the standard Open dialog box and gets a file name from the user without actually opening any files. 
//GetPhonetic 	Returns the Japanese phonetic text of the specified text string. This method is available to you only if you have selected or installed Japanese language support for Microsoft Office. 
//GetSaveAsFilename 	Displays the standard Save As dialog box and gets a file name from the user without actually saving any files. 
//Goto 	Selects any range or Visual Basic procedure in any workbook and activates that workbook if it?s not already active. 
//Help 	Displays a Help topic. 
//InchesToPoints 	Converts a measurement from inches to points. 
//InputBox 	Displays a dialog box for user input. Returns the information entered in the dialog box. 
//Intersect 	Returns a Range object that represents the rectangular intersection of two or more ranges. 
//MacroOptions 	Corresponds to options in the Macro Options dialog box. You can also use this method to display a user defined function (UDF) in a built-in or new category within the Insert Function dialog box. 
//MailLogoff 	Closes a MAPI mail session established by Microsoft Excel. 
//MailLogon 	Logs in to MAPI Mail or Microsoft Exchange and establishes a mail session. If Microsoft Mail isn't already running, you must use this method to establish a mail session before mail or document routing functions can be used. 
//NextLetter 	You have requested Help for a Visual Basic keyword used only on the Macintosh. For information about this keyword, consult the language reference Help included with Microsoft Office Macintosh Edition. 
//OnKey 	Runs a specified procedure when a particular key or key combination is pressed. 
//OnRepeat 	Sets the Repeat menu item and the name of the procedure that will run if you choose the Repeat command (Edit menu) after running the procedure that sets this property. 
//OnTime 	Schedules a procedure to be run at a specified time in the future (either at a specific time of day or after a specific amount of time has passed). 
//OnUndo 	Sets the text of the Undo and the name of the procedure that?s run if you choose the Undo command (Edit menu) after running the procedure that sets this property. 
//RecordMacro 	Records code if the macro recorder is on. 
//RegisterXLL 	Loads an XLL code resource and automatically registers the functions and commands contained in the resource. 
//Repeat 	Repeats the last user interface action. 
//ResetTipWizard 	 
//Run 	Runs a macro or calls a function. 
//Save 	 
//SaveWorkspace 	Saves the current workspace. 
//SendKeys 	Sends keystrokes to the active application. 
//SetDefaultChart 	Specifies the name of the chart template that Microsoft Excel will use when creating new charts. 
//Support 	 
//Undo 	Cancels the last user interface action. 
//Union 	Returns the union of two or more ranges. 
//Volatile 	Marks a user-defined function as volatile. A volatile function must be recalculated whenever calculation occurs in any cells on the worksheet. A nonvolatile function is recalculated only when the input variables change. This method has no effect if it's not inside a user-defined function used to calculate a worksheet cell. 
//Wait 	Pauses a running macro until a specified time. Returns True if the specified time has arrived.

//Properties
//_Default 	 
//ActiveChart 	Returns a Chart object that represents the active chart (either an embedded chart or a chart sheet). An embedded chart is considered active when it's either selected or activated. When no chart is active, this property returns Nothing.
//ActiveDialog 	 
//ActiveMenuBar 	 
//ActivePrinter 	Returns or sets the name of the active printer.
//ActiveWindow 	Returns a Window object that represents the active window (the window on top). Returns Nothing if there are no windows open.
//AddIns 	Returns an AddIns collection that represents all the add-ins listed in the Add-Ins dialog box (Tools menu).
//AlertBeforeOverwriting 	True if Microsoft Excel displays a message before overwriting nonblank cells during a drag-and-drop editing operation.
//AltStartupPath 	Returns or sets the name of the alternate startup folder.
//AnswerWizard 	Returns the Microsoft.Office.Core.AnswerWizard object for Microsoft Excel.
//ArbitraryXMLSupportAvailable 	Returns a Boolean value that indicates whether the XML features in Microsoft Excel are available.
//AskToUpdateLinks 	True if Microsoft Excel asks the user to update links when opening files with links. False if links are automatically updated with no dialog box.
//Assistant 	Returns an Microsoft.Office.Core.Assistant object for Microsoft Excel.
//AutoCorrect 	Returns an AutoCorrect object that represents the Microsoft Excel AutoCorrect attributes.
//AutoFormatAsYouTypeReplaceHyperlinks 	True (default) if Microsoft Excel automatically formats hyperlinks as you type. False if Excel does not automatically format hyperlinks as you type.
//AutomationSecurity 	Returns or sets an Microsoft.Office.Core.MsoAutomationSecurity constant that represents the security mode Microsoft Excel uses when programmatically opening files.
//AutoPercentEntry 	True if entries in cells formatted as percentages aren?t automatically multiplied by 100 as soon as they are entered.
//AutoRecover 	Returns an AutoRecover object, which backs up all file formats on a timed interval.
//Build 	Returns the Microsoft Excel build number.
//CalculateBeforeSave 	True if workbooks are calculated before they're saved to disk (if the Calculation property is set to xlManual). This property is preserved even if you change the Calculation property.
//Calculation 	Returns or sets the calculation mode. Read/write XlCalculation.
//CalculationInterruptKey 	Sets or returns an XlCalculationInterruptKey constant that specifies the key that can interrupt Microsoft Excel when performing calculations.
//CalculationState 	Returns an XlCalculationState constant that indicates the calculation state of the application for any calculations that are being performed in Microsoft Excel.
//CalculationVersion 	Returns a number whose rightmost four digits are the minor calculation engine version number, and whose other digits (on the left) are the major version of Microsoft Excel.
//Caller 	Returns information about how Visual Basic was called (for more information, see the Remarks section).
//CanPlaySounds 	This property should not be used. Sound notes have been removed from Microsoft Excel.
//CanRecordSounds 	This property should not be used. Sound notes have been removed from Microsoft Excel.
//CellDragAndDrop 	True if dragging and dropping cells is enabled.
//Charts 	Returns a Sheets collection that represents all the chart sheets in the active workbook.
//ClipboardFormats 	Returns the formats that are currently on the Clipboard as an array of numeric values. To determine whether a particular format is on the Clipboard, compare each element in the array with the appropriate constant listed in the Remarks section.
//ColorButtons 	 
//COMAddIns 	Returns the Microsoft.Office.Core.COMAddIns collection for Microsoft Excel, which represents the currently installed COM add-ins.
//CommandBars 	Returns a Microsoft.Office.Core.CommandBars object that represents the Microsoft Excel command bars.
//CommandUnderlines 	Returns or sets the state of the command underlines in Microsoft Excel for the Macintosh.
//ConstrainNumeric 	True if handwriting recognition is limited to numbers and punctuation only.
//ControlCharacters 	True if Microsoft Excel displays control characters for right-to-left languages.
//CopyObjectsWithCells 	True if objects are cut, copied, extracted, and sorted with cells.
//Creator 	Returns a 32-bit integer that indicates the application in which this object was created. If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C.
//Cursor 	Returns or sets the appearance of the mouse pointer in Microsoft Excel.
//CursorMovement 	Returns or sets a value that indicates whether a visual cursor or a logical cursor is used. Can be one of the following constants: xlVisualCursor or xlLogicalCursor.
//CustomListCount 	Returns the number of defined custom lists (including built-in lists).
//CutCopyMode 	Returns or sets the status of Cut or Copy mode.
//DataEntryMode 	Returns or sets Data Entry mode, as shown in the table below. When in Data Entry mode, you can enter data only in the unlocked cells in the currently selected range.
//DDEAppReturnCode 	Returns the application-specific DDE return code that was contained in the last DDE acknowledge message received by Microsoft Excel.
//DecimalSeparator 	Sets or returns the character used for the decimal separator as a String.
//DefaultFilePath 	Returns or sets the default path that Microsoft Excel uses when it opens files.
//DefaultSaveFormat 	Returns or sets the default format for saving files.
//DefaultSheetDirection 	Returns or sets the default direction in which Microsoft Excel displays new windows and worksheets. Can be one of the following constants: xlRTL (right to left) or xlLTR (left to right).
//DefaultWebOptions 	Returns the DefaultWebOptions object that contains global application-level attributes used by Microsoft Excel whenever you save a document as a Web page or open a Web page.
//Dialogs 	Returns a Dialogs collection that represents all built-in dialog boxes.
//DialogSheets 	 
//DisplayClipboardWindow 	Returns True if the Microsoft Office Clipboard can be displayed.
//DisplayCommentIndicator 	Returns or sets the way cells display comments and indicators. Can be one of the following XlCommentDisplayMode constants: xlNoIndicator, xlCommentIndicatorOnly, or xlCommentAndIndicator.
//DisplayDocumentActionTaskPane 	Set to True to display the Document Actions task pane; set to False to hide the Document Actions task pane.
//DisplayExcel4Menus 	True if Microsoft Excel displays version 4.0 menu bars.
//DisplayFormulaBar 	True if the formula bar is displayed.
//DisplayFullScreen 	True if Microsoft Excel is in full-screen mode.
//DisplayFunctionToolTips 	True if function ToolTips can be displayed.
//DisplayInfoWindow 	 
//DisplayInsertOptions 	True if the Insert Options button should be displayed.
//DisplayNoteIndicator 	True if cells containing notes display cell tips and contain note indicators (small dots in their upper-right corners).
//DisplayPasteOptions 	True if the Paste Options button can be displayed.
//DisplayRecentFiles 	True if the list of recently used files is displayed on the File menu.
//DisplayScrollBars 	True if scroll bars are visible for all workbooks.
//DisplayStatusBar 	True if the status bar is displayed.
//Dummy101 	 
//EditDirectlyInCell 	True if Microsoft Excel allows editing in cells.
//EnableAnimations 	True if animated insertion and deletion is enabled.
//EnableAutoComplete 	True if the AutoComplete feature is enabled.
//EnableCancelKey 	Controls how Microsoft Excel handles CTRL+BREAK (or ESC or COMMAND+PERIOD) user interruptions to the running procedure. Read/write XlEnableCancelKey.
//EnableSound 	True if sound is enabled for Microsoft Office.
//EnableTipWizard 	 
//ErrorCheckingOptions 	Returns an ErrorCheckingOptions object, which represents the error checking options for an application.
//Excel4IntlMacroSheets 	Returns a Sheets collection that represents all the Microsoft Excel 4.0 international macro sheets in the specified workbook.
//Excel4MacroSheets 	Returns a Sheets collection that represents all the Microsoft Excel 4.0 macro sheets in the specified workbook.
//ExtendList 	True if Microsoft Excel automatically extends formatting and formulas to new data that is added to a list.
//FeatureInstall 	Returns or sets a value (constant) that specifies how Microsoft Excel handles calls to methods and properties that require features that aren?t yet installed. Read/write Microsoft.Office.Core.MsoFeatureInstall.
//FileConverters 	Returns information about installed file converters. Returns Null if there are no converters installed.
//FileDialog 	Returns a Microsoft.Office.Core.FileDialog object representing an instance of the file dialog.
//FileFind 	You have requested Help for a Visual Basic keyword used only on the Macintosh. For information about this keyword, consult the language reference Help included with Microsoft Office Macintosh Edition.
//FileSearch 	Returns a Microsoft.Office.Core.FileSearch object for use with file searches. This property is available only in Microsoft Windows.
//FindFormat 	Sets or returns the search criteria for the type of cell formats to find.
//FixedDecimal 	All data entered after this property is set to True will be formatted with the number of fixed decimal places set by the FixedDecimalPlaces property.
//FixedDecimalPlaces 	Returns or sets the number of fixed decimal places used when the FixedDecimal property is set to True.
//GenerateGetPivotData 	Returns True when Microsoft Excel can get PivotTable report data.
//Height 	The height, in points, of the main application window. If the window is minimized, this property is read-only and refers to the height of the icon. If the window is maximized, this property cannot be set. Use the WindowState property to determine the window state.
//Hinstance 	Returns the instance handle of the instance that is calling Microsoft Excel.
//Hwnd 	Returns an Integer indicating the top-level window handle of the Microsoft Excel window.
//IgnoreRemoteRequests 	True if remote DDE requests are ignored.
//Interactive 	True if Microsoft Excel is in interactive mode; this property is usually True. If you set this property to False, Microsoft Excel will block all input from the keyboard and mouse (except input to dialog boxes that are displayed by your code). Blocking user input will prevent the user from interfering with the code as it moves or activates Microsoft Excel objects.
//International 	Returns information about the current country/region and international settings.
//Iteration 	True if Microsoft Excel will use iteration to resolve circular references.
//LanguageSettings 	Returns the Microsoft.Office.Core.LanguageSettings object, which contains information about the language settings in Microsoft Excel.
//LargeButtons 	 
//Left 	The distance, in points, from the left edge of the screen to the left edge of the main Microsoft Excel window.
//LibraryPath 	Returns the path to the Library folder but without the final separator.
//MailSession 	Returns the MAPI mail session number as a hexadecimal string (if there's an active session), or returns Null if there's no session.
//MailSystem 	Returns the mail system that's installed on the host machine. Read-only XlMailSystem.
//MapPaperSize 	True if documents formatted for the standard paper size of another country/region (for example, A4) are automatically adjusted so that they're printed correctly on the standard paper size (for example, Letter) of your country/region.
//MathCoprocessorAvailable 	True if a math coprocessor is available.
//MaxChange 	Returns or sets the maximum amount of change between each iteration as Microsoft Excel resolves circular references.
//MaxIterations 	Returns or sets the maximum number of iterations that Microsoft Excel can use to resolve a circular reference.
//MemoryFree 	Returns the amount of memory that's still available for Microsoft Excel to use, in bytes.
//MemoryTotal 	 
//MemoryUsed 	 
//MenuBars 	 
//Modules 	 
//MouseAvailable 	True if a mouse is available.
//MoveAfterReturn 	True if the active cell will be moved as soon as the ENTER (RETURN) key is pressed.
//MoveAfterReturnDirection 	Returns or sets the direction in which the active cell is moved when the user presses ENTER. Read/write XlDirection.
//Name 	Returns the name of the object.
//Names 	Returns a Names collection that represents all the names in the active workbook.
//NetworkTemplatesPath 	Returns the network path where templates are stored. If the network path doesn?t exist, this property returns an empty string.
//NewWorkbook 	Returns a NewFile object.
//ODBCErrors 	Returns an ODBCErrors collection that contains all the ODBC errors generated by the most recent query table or PivotTable report operation.
//ODBCTimeout 	Returns or sets the ODBC query time limit in seconds. The default value is 45 seconds.
//OLEDBErrors 	Returns the OLEDBErrors collection, which represents the error information returned by the most recent OLE DB query.
//OnCalculate 	 
//OnData 	 
//OnDoubleClick 	 
//OnEntry 	 
//OnSheetActivate 	 
//OnSheetDeactivate 	 
//OnWindow 	Returns or sets the name of the procedure that?s run whenever you activate a window.
//OperatingSystem 	Returns the name and version number of the current operating system, for example, "Windows (32-bit) 4.00" or "Macintosh 7.00".
//OrganizationName 	Returns the registered organization name.
//Parent 	Returns the parent object for the specified object.
//Path 	Returns the complete path to the application, excluding the final separator and name of the application.
//PathSeparator 	Returns the path separator character ("\").
//PivotTableSelection 	True if PivotTable reports use structured selection.
//PreviousSelections 	Returns an array of the last four ranges or names selected. Each element in the array is a Range object.
//ProductCode 	Returns the globally unique identifier (GUID) for Microsoft Excel.
//PromptForSummaryInfo 	True if Microsoft Excel asks for summary information when files are first saved.
//Ready 	Returns True when the Microsoft Excel application is ready; False when the Excel application is not ready.
//RecentFiles 	Returns a RecentFiles collection that represents the list of recently used files.
//RecordRelative 	True if macros are recorded using relative references; False if recording is absolute.
//ReferenceStyle 	Returns or sets how Microsoft Excel displays cell references and row and column headings in either A1 or R1C1 reference style. Read/write XlReferenceStyle.
//RegisteredFunctions 	Returns information about functions in either dynamic-link libraries (DLLs) or code resources that were registered with the REGISTER or REGISTER.ID macro functions.
//ReplaceFormat 	Sets the replacement criteria to use in replacing cell formats. The replacement criteria is then used in a subsequent call to the Replace method of the Range object.
//RollZoom 	True if the IntelliMouse zooms instead of scrolling.
//RTD 	Returns an RTD object.
//Selection 	Returns the selected object in the active window.
//SheetsInNewWorkbook 	Returns or sets the number of sheets that Microsoft Excel automatically inserts into new workbooks.
//ShortcutMenus 	 
//ShowChartTipNames 	True if charts show chart tip names. The default value is True.
//ShowChartTipValues 	True if charts show chart tip values. The default value is True.
//ShowStartupDialog 	Returns True (default) when the New Workbook task pane appears for a Microsoft Excel application.
//ShowToolTips 	True if ToolTips are turned on.
//ShowWindowsInTaskbar 	True if there?s a separate Windows taskbar button for each open workbook. The default value is True.
//SmartTagRecognizers 	Returns a SmartTagRecognizers collection for an application.
//Speech 	Returns a Speech object.
//SpellingOptions 	Returns a SpellingOptions object that represents the spelling options of the application.
//StandardFont 	Returns or sets the name of the standard font.
//StandardFontSize 	Returns or sets the standard font size, in points.
//StartupPath 	Returns the complete path of the startup folder excluding the final separator.
//StatusBar 	Returns or sets the text in the status bar.
//TemplatesPath 	Returns the local path where templates are stored.
//ThisCell 	Returns the cell the user-defined function is being called from as a Range object.
//ThisWorkbook 	Returns a Workbook object that represents the workbook where the current macro code is running.
//ThousandsSeparator 	Sets or returns the character used for the thousands separator as a String.
//Toolbars 	 
//Top 	The distance, in points, from the top edge of the screen to the top edge of the main Microsoft Excel window. If the application window is minimized, this property controls the position of the window icon (anywhere on the screen).
//TransitionMenuKey 	Returns or sets the Microsoft Excel menu or help key, which is usually "/".
//TransitionMenuKeyAction 	Returns or sets the action taken when the Microsoft Excel menu key is pressed. Can be either xlExcelMenus or xlLotusHelp.
//TransitionNavigKeys 	True if transition navigation keys are active.
//UILanguage 	 
//UsableHeight 	Returns the maximum height of the space that a window can occupy in the application window area, in points.
//UsableWidth 	Returns the maximum width of the space that a window can occupy in the application window area in points.
//UsedObjects 	Returns a UsedObjects object representing objects allocated in a workbook.
//UserLibraryPath 	Returns the path to the location on the user?s computer where the COM add-ins are installed.
//UserName 	Returns or sets the name of the current user.
//UseSystemSeparators 	True (default) if the system separators of Microsoft Excel are enabled.
//Value 	Returns "Microsoft Excel".
//VBE 	Returns a VBE object that represents the Visual Basic Editor.
//Watches 	Returns a Watches object representing a range which is tracked when the worksheet is recalculated.
//Width 	The distance, in points, from the left edge of the application window to its right edge. If the window is minimized, this property is read-only and returns the width of the window icon.
//Windows 	Returns a Windows collection that represents all the windows in all the workbooks.
//WindowsForPens 	True if the computer is running under Microsoft Windows for Pen Computing.
//WorksheetFunction 	Returns the WorksheetFunction object.

	};

[
	uuid(4CB175C6-200B-407f-9456-1FF61F03252C),
	version(1.0),
	helpstring("mso_to_oo 1.0 Type Library")
]
library MSO_TO_OOLib
{
	importlib("stdole2.tlb");
	
	[
		uuid(00024500-0000-0000-C000-000000000046),
		helpstring("_Application Class for Excel")
	]
	coclass _ApplicationExcel
	{
		[default] interface I_ApplicationExcel;
	};
};
